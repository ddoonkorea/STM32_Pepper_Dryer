
3rd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d70  08008c08  08008c08  00009c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a978  0800a978  0000c1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a978  0800a978  0000b978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a980  0800a980  0000c1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a980  0800a980  0000b980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a984  0800a984  0000b984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800a988  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000076c  200001e4  0800ab6c  0000c1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000950  0800ab6c  0000c950  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dc8  00000000  00000000  0000c20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003417  00000000  00000000  0001ffd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  000233f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000102d  00000000  00000000  000248a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abd0  00000000  00000000  000258d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d49  00000000  00000000  000404a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091748  00000000  00000000  000591ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea936  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068a4  00000000  00000000  000ea97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f1220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008bf0 	.word	0x08008bf0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08008bf0 	.word	0x08008bf0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_f2iz>:
 8000e0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e10:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e14:	d30f      	bcc.n	8000e36 <__aeabi_f2iz+0x2a>
 8000e16:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1e:	d90d      	bls.n	8000e3c <__aeabi_f2iz+0x30>
 8000e20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e28:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000e2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e30:	bf18      	it	ne
 8000e32:	4240      	negne	r0, r0
 8000e34:	4770      	bx	lr
 8000e36:	f04f 0000 	mov.w	r0, #0
 8000e3a:	4770      	bx	lr
 8000e3c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e40:	d101      	bne.n	8000e46 <__aeabi_f2iz+0x3a>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d105      	bne.n	8000e52 <__aeabi_f2iz+0x46>
 8000e46:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e4a:	bf08      	it	eq
 8000e4c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	4770      	bx	lr

08000e58 <isTemperSensorInit>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);	
}
#else

uint8_t isTemperSensorInit(){
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
	return m_init;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	@ (8000e68 <isTemperSensorInit+0x10>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	20000224 	.word	0x20000224

08000e6c <isBusy>:

uint8_t isBusy(){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	return isBusyLine();
 8000e70:	f000 fab4 	bl	80013dc <isBusyLine>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b2db      	uxtb	r3, r3
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <isConverting>:

uint8_t isConverting(){
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

	return m_isConverting;
 8000e80:	4b02      	ldr	r3, [pc, #8]	@ (8000e8c <isConverting+0x10>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	20000226 	.word	0x20000226

08000e90 <Ds18b20_Init_Simple>:

bool    Ds18b20_Init_Simple(){		// 온도센서 Init부분
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
		m_init = 0;
 8000e94:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <Ds18b20_Init_Simple+0x78>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	491b      	ldr	r1, [pc, #108]	@ (8000f0c <Ds18b20_Init_Simple+0x7c>)
 8000e9e:	481c      	ldr	r0, [pc, #112]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ea0:	f000 fb0e 	bl	80014c0 <OneWire_Init>

		OneWire.ROM_NO[0] = 0x28;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ea6:	2228      	movs	r2, #40	@ 0x28
 8000ea8:	725a      	strb	r2, [r3, #9]
		OneWire.ROM_NO[1] = 0x25;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000eac:	2225      	movs	r2, #37	@ 0x25
 8000eae:	729a      	strb	r2, [r3, #10]
		OneWire.ROM_NO[2] = 0xF8;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000eb2:	22f8      	movs	r2, #248	@ 0xf8
 8000eb4:	72da      	strb	r2, [r3, #11]
		OneWire.ROM_NO[3] = 0x87;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000eb8:	2287      	movs	r2, #135	@ 0x87
 8000eba:	731a      	strb	r2, [r3, #12]
		OneWire.ROM_NO[4] = 0x00;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	735a      	strb	r2, [r3, #13]
		OneWire.ROM_NO[5] = 0x7F;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ec4:	227f      	movs	r2, #127	@ 0x7f
 8000ec6:	739a      	strb	r2, [r3, #14]
		OneWire.ROM_NO[6] = 0x09;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000eca:	2209      	movs	r2, #9
 8000ecc:	73da      	strb	r2, [r3, #15]
		OneWire.ROM_NO[7] = 0xB6;
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ed0:	22b6      	movs	r2, #182	@ 0xb6
 8000ed2:	741a      	strb	r2, [r3, #16]

		OneWire_GetFullROM(&OneWire, temperSensor.Address);	// 위에서 하드코딩한 ROM 주소를 Address에 넣는다.
 8000ed4:	490f      	ldr	r1, [pc, #60]	@ (8000f14 <Ds18b20_Init_Simple+0x84>)
 8000ed6:	480e      	ldr	r0, [pc, #56]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ed8:	f000 fc46 	bl	8001768 <OneWire_GetFullROM>
		Ds18b20Delay(50);
 8000edc:	2032      	movs	r0, #50	@ 0x32
 8000ede:	f002 fa0f 	bl	8003300 <HAL_Delay>
		DS18B20_SetResolution(&OneWire, temperSensor.Address, DS18B20_Resolution_12bits);
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	490b      	ldr	r1, [pc, #44]	@ (8000f14 <Ds18b20_Init_Simple+0x84>)
 8000ee6:	480a      	ldr	r0, [pc, #40]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ee8:	f000 f96e 	bl	80011c8 <DS18B20_SetResolution>
		Ds18b20Delay(50);
 8000eec:	2032      	movs	r0, #50	@ 0x32
 8000eee:	f002 fa07 	bl	8003300 <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  temperSensor.Address);
 8000ef2:	4908      	ldr	r1, [pc, #32]	@ (8000f14 <Ds18b20_Init_Simple+0x84>)
 8000ef4:	4806      	ldr	r0, [pc, #24]	@ (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ef6:	f000 f9ff 	bl	80012f8 <DS18B20_DisableAlarmTemperature>
		m_init = 1;
 8000efa:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <Ds18b20_Init_Simple+0x78>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
		return true;
 8000f00:	2301      	movs	r3, #1
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000224 	.word	0x20000224
 8000f0c:	40010800 	.word	0x40010800
 8000f10:	20000210 	.word	0x20000210
 8000f14:	20000200 	.word	0x20000200

08000f18 <StartConverting>:
//	return true;
//}
#endif
//###########################################################################################

void StartConverting(){		// 온도 변환 시작
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	m_busy = 1;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <StartConverting+0x20>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
	DS18B20_StartAll(&OneWire);
 8000f22:	4806      	ldr	r0, [pc, #24]	@ (8000f3c <StartConverting+0x24>)
 8000f24:	f000 f84a 	bl	8000fbc <DS18B20_StartAll>
	m_isConverting = 1;
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <StartConverting+0x28>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
	m_busy = 0;
 8000f2e:	4b02      	ldr	r3, [pc, #8]	@ (8000f38 <StartConverting+0x20>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000225 	.word	0x20000225
 8000f3c:	20000210 	.word	0x20000210
 8000f40:	20000226 	.word	0x20000226

08000f44 <checkConverting>:

void checkConverting(){		// 변환 과정 확인
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	m_busy = 1;
 8000f48:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <checkConverting+0x2c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
	m_isConverting = !DS18B20_AllDone(&OneWire); //완료 1,비완료 0
 8000f4e:	4809      	ldr	r0, [pc, #36]	@ (8000f74 <checkConverting+0x30>)
 8000f50:	f000 fa2d 	bl	80013ae <DS18B20_AllDone>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bf0c      	ite	eq
 8000f5a:	2301      	moveq	r3, #1
 8000f5c:	2300      	movne	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b05      	ldr	r3, [pc, #20]	@ (8000f78 <checkConverting+0x34>)
 8000f64:	701a      	strb	r2, [r3, #0]
	m_busy = 0;
 8000f66:	4b02      	ldr	r3, [pc, #8]	@ (8000f70 <checkConverting+0x2c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000225 	.word	0x20000225
 8000f74:	20000210 	.word	0x20000210
 8000f78:	20000226 	.word	0x20000226

08000f7c <getTemper>:

float getTemper(){		// 온도값 읽어오기
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

	Ds18b20Delay(100);
 8000f80:	2064      	movs	r0, #100	@ 0x64
 8000f82:	f002 f9bd 	bl	8003300 <HAL_Delay>
	m_busy = 1;
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <getTemper+0x30>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
	temperSensor.DataIsValid = DS18B20_Read(&OneWire, temperSensor.Address, &temperSensor.Temperature);
 8000f8c:	4a08      	ldr	r2, [pc, #32]	@ (8000fb0 <getTemper+0x34>)
 8000f8e:	4909      	ldr	r1, [pc, #36]	@ (8000fb4 <getTemper+0x38>)
 8000f90:	4809      	ldr	r0, [pc, #36]	@ (8000fb8 <getTemper+0x3c>)
 8000f92:	f000 f827 	bl	8000fe4 <DS18B20_Read>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <getTemper+0x38>)
 8000f9c:	731a      	strb	r2, [r3, #12]
	m_busy = 0;
 8000f9e:	4b03      	ldr	r3, [pc, #12]	@ (8000fac <getTemper+0x30>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
	return temperSensor.Temperature;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <getTemper+0x38>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000225 	.word	0x20000225
 8000fb0:	20000208 	.word	0x20000208
 8000fb4:	20000200 	.word	0x20000200
 8000fb8:	20000210 	.word	0x20000210

08000fbc <DS18B20_StartAll>:
//}



void DS18B20_StartAll(OneWire_t* OneWire)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);		// 리셋
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 faaf 	bl	8001528 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8000fca:	21cc      	movs	r1, #204	@ 0xcc
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fb6d 	bl	80016ac <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8000fd2:	2144      	movs	r1, #68	@ 0x44
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 fb69 	bl	80016ac <OneWire_WriteByte>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination) 
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b08b      	sub	sp, #44	@ 0x2c
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	float decimal;
	uint8_t i = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8000ffa:	68b8      	ldr	r0, [r7, #8]
 8000ffc:	f000 f96c 	bl	80012d8 <DS18B20_Is>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <DS18B20_Read+0x26>
		return false;
 8001006:	2300      	movs	r3, #0
 8001008:	e0d8      	b.n	80011bc <DS18B20_Read+0x1d8>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire)) 
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f000 fb10 	bl	8001630 <OneWire_ReadBit>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false; 
 8001016:	2300      	movs	r3, #0
 8001018:	e0d0      	b.n	80011bc <DS18B20_Read+0x1d8>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f000 fa84 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f000 fb81 	bl	800172a <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001028:	21be      	movs	r1, #190	@ 0xbe
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 fb3e 	bl	80016ac <OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) 
 8001030:	2300      	movs	r3, #0
 8001032:	77fb      	strb	r3, [r7, #31]
 8001034:	e00d      	b.n	8001052 <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8001036:	7ffc      	ldrb	r4, [r7, #31]
 8001038:	68f8      	ldr	r0, [r7, #12]
 800103a:	f000 fb55 	bl	80016e8 <OneWire_ReadByte>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8001046:	443b      	add	r3, r7
 8001048:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) 
 800104c:	7ffb      	ldrb	r3, [r7, #31]
 800104e:	3301      	adds	r3, #1
 8001050:	77fb      	strb	r3, [r7, #31]
 8001052:	7ffb      	ldrb	r3, [r7, #31]
 8001054:	2b08      	cmp	r3, #8
 8001056:	d9ee      	bls.n	8001036 <DS18B20_Read+0x52>
	}
	
	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2108      	movs	r1, #8
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fb9e 	bl	80017a0 <OneWire_CRC8>
 8001064:	4603      	mov	r3, r0
 8001066:	77bb      	strb	r3, [r7, #30]
	
	/* Check if CRC is ok */
	if (crc != data[8])
 8001068:	7f3b      	ldrb	r3, [r7, #28]
 800106a:	7fba      	ldrb	r2, [r7, #30]
 800106c:	429a      	cmp	r2, r3
 800106e:	d001      	beq.n	8001074 <DS18B20_Read+0x90>
		/* CRC invalid */
		return false;
 8001070:	2300      	movs	r3, #0
 8001072:	e0a3      	b.n	80011bc <DS18B20_Read+0x1d8>

	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8001074:	7d3b      	ldrb	r3, [r7, #20]
 8001076:	b21a      	sxth	r2, r3
 8001078:	7d7b      	ldrb	r3, [r7, #21]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21b      	sxth	r3, r3
 8001082:	84fb      	strh	r3, [r7, #38]	@ 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 fa4f 	bl	8001528 <OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000)
 800108a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800108e:	2b00      	cmp	r3, #0
 8001090:	da05      	bge.n	800109e <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8001092:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001094:	425b      	negs	r3, r3
 8001096:	84fb      	strh	r3, [r7, #38]	@ 0x26
		minus = 1;
 8001098:	2301      	movs	r3, #1
 800109a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 800109e:	7e3b      	ldrb	r3, [r7, #24]
 80010a0:	115b      	asrs	r3, r3, #5
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	3309      	adds	r3, #9
 80010ac:	777b      	strb	r3, [r7, #29]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 80010ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 80010b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80010cc:	4313      	orrs	r3, r2
 80010ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	
	/* Store decimal digits */
	switch (resolution) 
 80010d2:	7f7b      	ldrb	r3, [r7, #29]
 80010d4:	3b09      	subs	r3, #9
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d850      	bhi.n	800117c <DS18B20_Read+0x198>
 80010da:	a201      	add	r2, pc, #4	@ (adr r2, 80010e0 <DS18B20_Read+0xfc>)
 80010dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e0:	080010f1 	.word	0x080010f1
 80010e4:	08001115 	.word	0x08001115
 80010e8:	08001139 	.word	0x08001139
 80010ec:	0800115d 	.word	0x0800115d
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 80010f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fe32 	bl	8000d64 <__aeabi_i2f>
 8001100:	4603      	mov	r3, r0
 8001102:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8001104:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001108:	6a38      	ldr	r0, [r7, #32]
 800110a:	f7ff f829 	bl	8000160 <__aeabi_fmul>
 800110e:	4603      	mov	r3, r0
 8001110:	623b      	str	r3, [r7, #32]
		break;
 8001112:	e038      	b.n	8001186 <DS18B20_Read+0x1a2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8001114:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	b29b      	uxth	r3, r3
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fe20 	bl	8000d64 <__aeabi_i2f>
 8001124:	4603      	mov	r3, r0
 8001126:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8001128:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800112c:	6a38      	ldr	r0, [r7, #32]
 800112e:	f7ff f817 	bl	8000160 <__aeabi_fmul>
 8001132:	4603      	mov	r3, r0
 8001134:	623b      	str	r3, [r7, #32]
		 break;
 8001136:	e026      	b.n	8001186 <DS18B20_Read+0x1a2>
		case 11: 
			decimal = (temperature >> 1) & 0x07;
 8001138:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800113a:	085b      	lsrs	r3, r3, #1
 800113c:	b29b      	uxth	r3, r3
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fe0e 	bl	8000d64 <__aeabi_i2f>
 8001148:	4603      	mov	r3, r0
 800114a:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 800114c:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8001150:	6a38      	ldr	r0, [r7, #32]
 8001152:	f7ff f805 	bl	8000160 <__aeabi_fmul>
 8001156:	4603      	mov	r3, r0
 8001158:	623b      	str	r3, [r7, #32]
		break;
 800115a:	e014      	b.n	8001186 <DS18B20_Read+0x1a2>
		case 12: 
			decimal = temperature & 0x0F;
 800115c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fdfe 	bl	8000d64 <__aeabi_i2f>
 8001168:	4603      	mov	r3, r0
 800116a:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 800116c:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8001170:	6a38      	ldr	r0, [r7, #32]
 8001172:	f7fe fff5 	bl	8000160 <__aeabi_fmul>
 8001176:	4603      	mov	r3, r0
 8001178:	623b      	str	r3, [r7, #32]
		 break;
 800117a:	e004      	b.n	8001186 <DS18B20_Read+0x1a2>
		default: 
			decimal = 0xFF;
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <DS18B20_Read+0x1e0>)
 800117e:	623b      	str	r3, [r7, #32]
			digit = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 8001186:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fdea 	bl	8000d64 <__aeabi_i2f>
 8001190:	4603      	mov	r3, r0
 8001192:	4619      	mov	r1, r3
 8001194:	6a38      	ldr	r0, [r7, #32]
 8001196:	f7ff fd31 	bl	8000bfc <__addsf3>
 800119a:	4603      	mov	r3, r0
 800119c:	623b      	str	r3, [r7, #32]
	if (minus) 
 800119e:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <DS18B20_Read+0x1d0>
		decimal = 0 - decimal;
 80011a6:	6a39      	ldr	r1, [r7, #32]
 80011a8:	f04f 0000 	mov.w	r0, #0
 80011ac:	f7ff fd24 	bl	8000bf8 <__aeabi_fsub>
 80011b0:	4603      	mov	r3, r0
 80011b2:	623b      	str	r3, [r7, #32]
	
	
	/* Set to pointer */
	*destination = decimal;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a3a      	ldr	r2, [r7, #32]
 80011b8:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return true;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	372c      	adds	r7, #44	@ 0x2c
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd90      	pop	{r4, r7, pc}
 80011c4:	437f0000 	.word	0x437f0000

080011c8 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	4613      	mov	r3, r2
 80011d4:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM)) 
 80011d6:	68b8      	ldr	r0, [r7, #8]
 80011d8:	f000 f87e 	bl	80012d8 <DS18B20_Is>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <DS18B20_SetResolution+0x1e>
		return 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e074      	b.n	80012d0 <DS18B20_SetResolution+0x108>
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f000 f99e 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 fa9b 	bl	800172a <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80011f4:	21be      	movs	r1, #190	@ 0xbe
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f000 fa58 	bl	80016ac <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f000 fa73 	bl	80016e8 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f000 fa70 	bl	80016e8 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f000 fa6d 	bl	80016e8 <OneWire_ReadByte>
 800120e:	4603      	mov	r3, r0
 8001210:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 fa68 	bl	80016e8 <OneWire_ReadByte>
 8001218:	4603      	mov	r3, r0
 800121a:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f000 fa63 	bl	80016e8 <OneWire_ReadByte>
 8001222:	4603      	mov	r3, r0
 8001224:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == DS18B20_Resolution_9bits) 
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b09      	cmp	r3, #9
 800122a:	d108      	bne.n	800123e <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001232:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	f023 0320 	bic.w	r3, r3, #32
 800123a:	75fb      	strb	r3, [r7, #23]
 800123c:	e022      	b.n	8001284 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b0a      	cmp	r3, #10
 8001242:	d108      	bne.n	8001256 <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800124a:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	f043 0320 	orr.w	r3, r3, #32
 8001252:	75fb      	strb	r3, [r7, #23]
 8001254:	e016      	b.n	8001284 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b0b      	cmp	r3, #11
 800125a:	d108      	bne.n	800126e <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001262:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	f023 0320 	bic.w	r3, r3, #32
 800126a:	75fb      	strb	r3, [r7, #23]
 800126c:	e00a      	b.n	8001284 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b0c      	cmp	r3, #12
 8001272:	d107      	bne.n	8001284 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800127a:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800127c:	7dfb      	ldrb	r3, [r7, #23]
 800127e:	f043 0320 	orr.w	r3, r3, #32
 8001282:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 f94f 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800128a:	68b9      	ldr	r1, [r7, #8]
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f000 fa4c 	bl	800172a <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8001292:	214e      	movs	r1, #78	@ 0x4e
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f000 fa09 	bl	80016ac <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 800129a:	7dbb      	ldrb	r3, [r7, #22]
 800129c:	4619      	mov	r1, r3
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 fa04 	bl	80016ac <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 80012a4:	7d7b      	ldrb	r3, [r7, #21]
 80012a6:	4619      	mov	r1, r3
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 f9ff 	bl	80016ac <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	4619      	mov	r1, r3
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 f9fa 	bl	80016ac <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f000 f935 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 fa32 	bl	800172a <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 80012c6:	2148      	movs	r1, #72	@ 0x48
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 f9ef 	bl	80016ac <OneWire_WriteByte>
	
	return 1;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) 
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) 
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b28      	cmp	r3, #40	@ 0x28
 80012e6:	d101      	bne.n	80012ec <DS18B20_Is+0x14>
		return 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <DS18B20_Is+0x16>
	
	return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <DS18B20_DisableAlarmTemperature>:
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
 8001302:	6838      	ldr	r0, [r7, #0]
 8001304:	f7ff ffe8 	bl	80012d8 <DS18B20_Is>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 800130e:	2300      	movs	r3, #0
 8001310:	e049      	b.n	80013a6 <DS18B20_DisableAlarmTemperature+0xae>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f908 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 fa05 	bl	800172a <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001320:	21be      	movs	r1, #190	@ 0xbe
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f9c2 	bl	80016ac <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f9dd 	bl	80016e8 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f9da 	bl	80016e8 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f9d7 	bl	80016e8 <OneWire_ReadByte>
 800133a:	4603      	mov	r3, r0
 800133c:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f9d2 	bl	80016e8 <OneWire_ReadByte>
 8001344:	4603      	mov	r3, r0
 8001346:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f9cd 	bl	80016e8 <OneWire_ReadByte>
 800134e:	4603      	mov	r3, r0
 8001350:	737b      	strb	r3, [r7, #13]
	
	th = 125;
 8001352:	237d      	movs	r3, #125	@ 0x7d
 8001354:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8001356:	23c9      	movs	r3, #201	@ 0xc9
 8001358:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f8e4 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001360:	6839      	ldr	r1, [r7, #0]
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f9e1 	bl	800172a <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8001368:	214e      	movs	r1, #78	@ 0x4e
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f99e 	bl	80016ac <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	4619      	mov	r1, r3
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f999 	bl	80016ac <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	4619      	mov	r1, r3
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f994 	bl	80016ac <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8001384:	7b7b      	ldrb	r3, [r7, #13]
 8001386:	4619      	mov	r1, r3
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f98f 	bl	80016ac <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f8ca 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001394:	6839      	ldr	r1, [r7, #0]
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 f9c7 	bl	800172a <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800139c:	2148      	movs	r1, #72	@ 0x48
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 f984 	bl	80016ac <OneWire_WriteByte>
	
	return 1;
 80013a4:	2301      	movs	r3, #1
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f93a 	bl	8001630 <OneWire_ReadBit>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <getCurrentTemper>:

float getCurrentTemper(){
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

	return temperSensor.Temperature;
 80013cc:	4b02      	ldr	r3, [pc, #8]	@ (80013d8 <getCurrentTemper+0x10>)
 80013ce:	689b      	ldr	r3, [r3, #8]

}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	20000200 	.word	0x20000200

080013dc <isBusyLine>:
#include "ds18b20Config.h"
//#include "tim.h"

static uint8_t m_busy_line =0;

uint8_t isBusyLine(){		// m_busy_line은 0이므로 한가한 상태
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
	return m_busy_line;
 80013e0:	4b02      	ldr	r3, [pc, #8]	@ (80013ec <isBusyLine+0x10>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	20000227 	.word	0x20000227

080013f0 <ONEWIRE_DELAY>:

void ONEWIRE_DELAY(uint16_t time_us)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 80013fa:	4b08      	ldr	r3, [pc, #32]	@ (800141c <ONEWIRE_DELAY+0x2c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	@ 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001402:	bf00      	nop
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <ONEWIRE_DELAY+0x2c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	429a      	cmp	r2, r3
 800140e:	d9f9      	bls.n	8001404 <ONEWIRE_DELAY+0x14>
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	2000070c 	.word	0x2000070c

08001420 <ONEWIRE_LOW>:

void ONEWIRE_LOW(OneWire_t *gp)		// GPIO핀 LOW 출력
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	889b      	ldrh	r3, [r3, #4]
 800142c:	461a      	mov	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	0412      	lsls	r2, r2, #16
 8001434:	611a      	str	r2, [r3, #16]
}	
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <ONEWIRE_HIGH>:

void ONEWIRE_HIGH(OneWire_t *gp)	// GPIO핀 HIGH 출력
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	889a      	ldrh	r2, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	611a      	str	r2, [r3, #16]
}	
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <ONEWIRE_INPUT>:

void ONEWIRE_INPUT(OneWire_t *gp)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	889b      	ldrh	r3, [r3, #4]
 8001474:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f107 0208 	add.w	r2, r7, #8
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f002 f86f 	bl	8003564 <HAL_GPIO_Init>
}	
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001496:	2311      	movs	r3, #17
 8001498:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	889b      	ldrh	r3, [r3, #4]
 80014a6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f107 0208 	add.w	r2, r7, #8
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 f856 	bl	8003564 <HAL_GPIO_Init>

}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) // OneWire 통신 시작
{	
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	4613      	mov	r3, r2
 80014cc:	80fb      	strh	r3, [r7, #6]
	m_busy_line = 0;
 80014ce:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <OneWire_Init+0x60>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 80014d4:	4813      	ldr	r0, [pc, #76]	@ (8001524 <OneWire_Init+0x64>)
 80014d6:	f003 fec5 	bl	8005264 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	88fa      	ldrh	r2, [r7, #6]
 80014e4:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff ffd1 	bl	800148e <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);		// 초기상태 : High (출력)
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7ff ffa7 	bl	8001440 <ONEWIRE_HIGH>
	OneWireDelay(1000);
 80014f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014f6:	f001 ff03 	bl	8003300 <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);			// 테스트용
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f7ff ff90 	bl	8001420 <ONEWIRE_LOW>
	OneWireDelay(1000);
 8001500:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001504:	f001 fefc 	bl	8003300 <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff ff99 	bl	8001440 <ONEWIRE_HIGH>
	OneWireDelay(2000);
 800150e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001512:	f001 fef5 	bl	8003300 <HAL_Delay>
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000227 	.word	0x20000227
 8001524:	2000070c 	.word	0x2000070c

08001528 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);		// 마스터가 Low로 떨어트리며 시작 신호를 보냄
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff75 	bl	8001420 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ffa9 	bl	800148e <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);		// 최소 480us 대기 (Reset Pulse)
 800153c:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8001540:	f7ff ff56 	bl	80013f0 <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8001544:	2014      	movs	r0, #20
 8001546:	f7ff ff53 	bl	80013f0 <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	m_busy_line = 1;
 800154a:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <OneWire_Reset+0x60>)
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
	ONEWIRE_INPUT(OneWireStruct);		// 입력모드로 전환
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff83 	bl	800145c <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);		// 응답 대기 시간 (70us 지난 후)
 8001556:	2046      	movs	r0, #70	@ 0x46
 8001558:	f7ff ff4a 	bl	80013f0 <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin); // Low 상태이면 슬레이브가 응답한 것
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	889b      	ldrh	r3, [r3, #4]
 8001564:	4619      	mov	r1, r3
 8001566:	4610      	mov	r0, r2
 8001568:	f002 f980 	bl	800386c <HAL_GPIO_ReadPin>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
	m_busy_line = 0;
 8001570:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <OneWire_Reset+0x60>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8001576:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 800157a:	f7ff ff39 	bl	80013f0 <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000227 	.word	0x20000227

0800158c <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]


	if (bit) 
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d024      	beq.n	80015e8 <OneWire_WriteBit+0x5c>
	{
		/* Set line low */
		m_busy_line = 1;
 800159e:	4b23      	ldr	r3, [pc, #140]	@ (800162c <OneWire_WriteBit+0xa0>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff3b 	bl	8001420 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff6f 	bl	800148e <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 80015b0:	200a      	movs	r0, #10
 80015b2:	f7ff ff1d 	bl	80013f0 <ONEWIRE_DELAY>
		m_busy_line = 0;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <OneWire_WriteBit+0xa0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]

		/* Bit high */
		m_busy_line = 1;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <OneWire_WriteBit+0xa0>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff4a 	bl	800145c <ONEWIRE_INPUT>
		m_busy_line = 0;
 80015c8:	4b18      	ldr	r3, [pc, #96]	@ (800162c <OneWire_WriteBit+0xa0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
		/* Wait for 55 us and release the line */

		ONEWIRE_DELAY(55);
 80015ce:	2037      	movs	r0, #55	@ 0x37
 80015d0:	f7ff ff0e 	bl	80013f0 <ONEWIRE_DELAY>

		m_busy_line = 1;
 80015d4:	4b15      	ldr	r3, [pc, #84]	@ (800162c <OneWire_WriteBit+0xa0>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ff3e 	bl	800145c <ONEWIRE_INPUT>
		m_busy_line = 0;
 80015e0:	4b12      	ldr	r3, [pc, #72]	@ (800162c <OneWire_WriteBit+0xa0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
		m_busy_line = 0;
	}


}
 80015e6:	e01d      	b.n	8001624 <OneWire_WriteBit+0x98>
		m_busy_line = 1;
 80015e8:	4b10      	ldr	r3, [pc, #64]	@ (800162c <OneWire_WriteBit+0xa0>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ff16 	bl	8001420 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff4a 	bl	800148e <ONEWIRE_OUTPUT>
		m_busy_line = 0;
 80015fa:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <OneWire_WriteBit+0xa0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
		ONEWIRE_DELAY(65);
 8001600:	2041      	movs	r0, #65	@ 0x41
 8001602:	f7ff fef5 	bl	80013f0 <ONEWIRE_DELAY>
		m_busy_line = 1;
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <OneWire_WriteBit+0xa0>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff25 	bl	800145c <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8001612:	2005      	movs	r0, #5
 8001614:	f7ff feec 	bl	80013f0 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff1f 	bl	800145c <ONEWIRE_INPUT>
		m_busy_line = 0;
 800161e:	4b03      	ldr	r3, [pc, #12]	@ (800162c <OneWire_WriteBit+0xa0>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000227 	.word	0x20000227

08001630 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]
	
	/* Line low */

	m_busy_line = 1;
 800163c:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <OneWire_ReadBit+0x78>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
	ONEWIRE_LOW(OneWireStruct);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff feec 	bl	8001420 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff20 	bl	800148e <ONEWIRE_OUTPUT>

	ONEWIRE_DELAY(2);
 800164e:	2002      	movs	r0, #2
 8001650:	f7ff fece 	bl	80013f0 <ONEWIRE_DELAY>
	m_busy_line = 0;
 8001654:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <OneWire_ReadBit+0x78>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]

	/* Release line */
	m_busy_line = 1;
 800165a:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <OneWire_ReadBit+0x78>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
	ONEWIRE_INPUT(OneWireStruct);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff fefb 	bl	800145c <ONEWIRE_INPUT>

	ONEWIRE_DELAY(10);
 8001666:	200a      	movs	r0, #10
 8001668:	f7ff fec2 	bl	80013f0 <ONEWIRE_DELAY>
	m_busy_line = 0;
 800166c:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <OneWire_ReadBit+0x78>)
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]


	/* Read line value */
	m_busy_line = 1;
 8001672:	4b0d      	ldr	r3, [pc, #52]	@ (80016a8 <OneWire_ReadBit+0x78>)
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	889b      	ldrh	r3, [r3, #4]
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f002 f8f2 	bl	800386c <HAL_GPIO_ReadPin>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <OneWire_ReadBit+0x62>
		/* Bit is HIGH */
		bit = 1;
 800168e:	2301      	movs	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	m_busy_line = 0;
 8001692:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <OneWire_ReadBit+0x78>)
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
	ONEWIRE_DELAY(50);
 8001698:	2032      	movs	r0, #50	@ 0x32
 800169a:	f7ff fea9 	bl	80013f0 <ONEWIRE_DELAY>
	

	/* Return bit value */
	return bit;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000227 	.word	0x20000227

080016ac <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 80016b8:	2308      	movs	r3, #8
 80016ba:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 80016bc:	e00a      	b.n	80016d4 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff5f 	bl	800158c <OneWire_WriteBit>
		byte >>= 1;
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	1e5a      	subs	r2, r3, #1
 80016d8:	73fa      	strb	r2, [r7, #15]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ef      	bne.n	80016be <OneWire_WriteByte+0x12>
	}
}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 80016f0:	2308      	movs	r3, #8
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	2300      	movs	r3, #0
 80016f6:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80016f8:	e00d      	b.n	8001716 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 80016fa:	7bbb      	ldrb	r3, [r7, #14]
 80016fc:	085b      	lsrs	r3, r3, #1
 80016fe:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff95 	bl	8001630 <OneWire_ReadBit>
 8001706:	4603      	mov	r3, r0
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	b25a      	sxtb	r2, r3
 800170c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001710:	4313      	orrs	r3, r2
 8001712:	b25b      	sxtb	r3, r3
 8001714:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	1e5a      	subs	r2, r3, #1
 800171a:	73fa      	strb	r2, [r7, #15]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1ec      	bne.n	80016fa <OneWire_ReadByte+0x12>
	}
	
	return byte;
 8001720:	7bbb      	ldrb	r3, [r7, #14]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8001734:	2155      	movs	r1, #85	@ 0x55
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffb8 	bl	80016ac <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e00a      	b.n	8001758 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	4413      	add	r3, r2
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	4619      	mov	r1, r3
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ffad 	bl	80016ac <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	3301      	adds	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	2b07      	cmp	r3, #7
 800175c:	d9f1      	bls.n	8001742 <OneWire_SelectWithPointer+0x18>
	}	
}
 800175e:	bf00      	nop
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]
 8001776:	e00a      	b.n	800178e <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	6839      	ldr	r1, [r7, #0]
 800177e:	440b      	add	r3, r1
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	440a      	add	r2, r1
 8001784:	7a52      	ldrb	r2, [r2, #9]
 8001786:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	3301      	adds	r3, #1
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b07      	cmp	r3, #7
 8001792:	d9f1      	bls.n	8001778 <OneWire_GetFullROM+0x10>
	}
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 80017ac:	2300      	movs	r3, #0
 80017ae:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 80017b0:	e022      	b.n	80017f8 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80017bc:	2308      	movs	r3, #8
 80017be:	737b      	strb	r3, [r7, #13]
 80017c0:	e017      	b.n	80017f2 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	7bbb      	ldrb	r3, [r7, #14]
 80017c6:	4053      	eors	r3, r2
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	085b      	lsrs	r3, r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 80017d6:	7b3b      	ldrb	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d004      	beq.n	80017e6 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 80017e2:	43db      	mvns	r3, r3
 80017e4:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
 80017e8:	085b      	lsrs	r3, r3, #1
 80017ea:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80017ec:	7b7b      	ldrb	r3, [r7, #13]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	737b      	strb	r3, [r7, #13]
 80017f2:	7b7b      	ldrb	r3, [r7, #13]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1e4      	bne.n	80017c2 <OneWire_CRC8+0x22>
	while (len--) {
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	1e5a      	subs	r2, r3, #1
 80017fc:	70fa      	strb	r2, [r7, #3]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1d7      	bne.n	80017b2 <OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <SSD1306_InvertDisplay+0x1a>
 800181c:	22a7      	movs	r2, #167	@ 0xa7
 800181e:	2100      	movs	r1, #0
 8001820:	2078      	movs	r0, #120	@ 0x78
 8001822:	f000 fb17 	bl	8001e54 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 8001826:	e004      	b.n	8001832 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 8001828:	22a6      	movs	r2, #166	@ 0xa6
 800182a:	2100      	movs	r1, #0
 800182c:	2078      	movs	r0, #120	@ 0x78
 800182e:	f000 fb11 	bl	8001e54 <ssd1306_I2C_Write>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <SSD1306_DrawBitmap>:


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	60ba      	str	r2, [r7, #8]
 8001842:	461a      	mov	r2, r3
 8001844:	4603      	mov	r3, r0
 8001846:	81fb      	strh	r3, [r7, #14]
 8001848:	460b      	mov	r3, r1
 800184a:	81bb      	strh	r3, [r7, #12]
 800184c:	4613      	mov	r3, r2
 800184e:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001850:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001854:	3307      	adds	r3, #7
 8001856:	2b00      	cmp	r3, #0
 8001858:	da00      	bge.n	800185c <SSD1306_DrawBitmap+0x22>
 800185a:	3307      	adds	r3, #7
 800185c:	10db      	asrs	r3, r3, #3
 800185e:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001864:	2300      	movs	r3, #0
 8001866:	82bb      	strh	r3, [r7, #20]
 8001868:	e044      	b.n	80018f4 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800186a:	2300      	movs	r3, #0
 800186c:	827b      	strh	r3, [r7, #18]
 800186e:	e02f      	b.n	80018d0 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001870:	8a7b      	ldrh	r3, [r7, #18]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	75fb      	strb	r3, [r7, #23]
 8001880:	e012      	b.n	80018a8 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001882:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001886:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800188a:	fb03 f202 	mul.w	r2, r3, r2
 800188e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001892:	2b00      	cmp	r3, #0
 8001894:	da00      	bge.n	8001898 <SSD1306_DrawBitmap+0x5e>
 8001896:	3307      	adds	r3, #7
 8001898:	10db      	asrs	r3, r3, #3
 800189a:	b21b      	sxth	r3, r3
 800189c:	4413      	add	r3, r2
 800189e:	461a      	mov	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4413      	add	r3, r2
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80018a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	da09      	bge.n	80018c4 <SSD1306_DrawBitmap+0x8a>
 80018b0:	89fa      	ldrh	r2, [r7, #14]
 80018b2:	8a7b      	ldrh	r3, [r7, #18]
 80018b4:	4413      	add	r3, r2
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	89b9      	ldrh	r1, [r7, #12]
 80018ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f92e 	bl	8001b20 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80018c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	3301      	adds	r3, #1
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	827b      	strh	r3, [r7, #18]
 80018d0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80018d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbc9      	blt.n	8001870 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80018dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	3301      	adds	r3, #1
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	82bb      	strh	r3, [r7, #20]
 80018e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	3301      	adds	r3, #1
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	81bb      	strh	r3, [r7, #12]
 80018f4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80018f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbb4      	blt.n	800186a <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001912:	f000 fa25 	bl	8001d60 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&H_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001916:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800191a:	2201      	movs	r2, #1
 800191c:	2178      	movs	r1, #120	@ 0x78
 800191e:	485b      	ldr	r0, [pc, #364]	@ (8001a8c <SSD1306_Init+0x180>)
 8001920:	f002 fa38 	bl	8003d94 <HAL_I2C_IsDeviceReady>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800192a:	2300      	movs	r3, #0
 800192c:	e0a9      	b.n	8001a82 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800192e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001932:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001934:	e002      	b.n	800193c <SSD1306_Init+0x30>
		p--;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3b01      	subs	r3, #1
 800193a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f9      	bne.n	8001936 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001942:	22ae      	movs	r2, #174	@ 0xae
 8001944:	2100      	movs	r1, #0
 8001946:	2078      	movs	r0, #120	@ 0x78
 8001948:	f000 fa84 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800194c:	2220      	movs	r2, #32
 800194e:	2100      	movs	r1, #0
 8001950:	2078      	movs	r0, #120	@ 0x78
 8001952:	f000 fa7f 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001956:	2210      	movs	r2, #16
 8001958:	2100      	movs	r1, #0
 800195a:	2078      	movs	r0, #120	@ 0x78
 800195c:	f000 fa7a 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001960:	22b0      	movs	r2, #176	@ 0xb0
 8001962:	2100      	movs	r1, #0
 8001964:	2078      	movs	r0, #120	@ 0x78
 8001966:	f000 fa75 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800196a:	22c8      	movs	r2, #200	@ 0xc8
 800196c:	2100      	movs	r1, #0
 800196e:	2078      	movs	r0, #120	@ 0x78
 8001970:	f000 fa70 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001974:	2200      	movs	r2, #0
 8001976:	2100      	movs	r1, #0
 8001978:	2078      	movs	r0, #120	@ 0x78
 800197a:	f000 fa6b 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800197e:	2210      	movs	r2, #16
 8001980:	2100      	movs	r1, #0
 8001982:	2078      	movs	r0, #120	@ 0x78
 8001984:	f000 fa66 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001988:	2240      	movs	r2, #64	@ 0x40
 800198a:	2100      	movs	r1, #0
 800198c:	2078      	movs	r0, #120	@ 0x78
 800198e:	f000 fa61 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001992:	2281      	movs	r2, #129	@ 0x81
 8001994:	2100      	movs	r1, #0
 8001996:	2078      	movs	r0, #120	@ 0x78
 8001998:	f000 fa5c 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800199c:	22ff      	movs	r2, #255	@ 0xff
 800199e:	2100      	movs	r1, #0
 80019a0:	2078      	movs	r0, #120	@ 0x78
 80019a2:	f000 fa57 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80019a6:	22a1      	movs	r2, #161	@ 0xa1
 80019a8:	2100      	movs	r1, #0
 80019aa:	2078      	movs	r0, #120	@ 0x78
 80019ac:	f000 fa52 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80019b0:	22a6      	movs	r2, #166	@ 0xa6
 80019b2:	2100      	movs	r1, #0
 80019b4:	2078      	movs	r0, #120	@ 0x78
 80019b6:	f000 fa4d 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80019ba:	22a8      	movs	r2, #168	@ 0xa8
 80019bc:	2100      	movs	r1, #0
 80019be:	2078      	movs	r0, #120	@ 0x78
 80019c0:	f000 fa48 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80019c4:	223f      	movs	r2, #63	@ 0x3f
 80019c6:	2100      	movs	r1, #0
 80019c8:	2078      	movs	r0, #120	@ 0x78
 80019ca:	f000 fa43 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019ce:	22a4      	movs	r2, #164	@ 0xa4
 80019d0:	2100      	movs	r1, #0
 80019d2:	2078      	movs	r0, #120	@ 0x78
 80019d4:	f000 fa3e 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80019d8:	22d3      	movs	r2, #211	@ 0xd3
 80019da:	2100      	movs	r1, #0
 80019dc:	2078      	movs	r0, #120	@ 0x78
 80019de:	f000 fa39 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	2078      	movs	r0, #120	@ 0x78
 80019e8:	f000 fa34 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80019ec:	22d5      	movs	r2, #213	@ 0xd5
 80019ee:	2100      	movs	r1, #0
 80019f0:	2078      	movs	r0, #120	@ 0x78
 80019f2:	f000 fa2f 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80019f6:	22f0      	movs	r2, #240	@ 0xf0
 80019f8:	2100      	movs	r1, #0
 80019fa:	2078      	movs	r0, #120	@ 0x78
 80019fc:	f000 fa2a 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001a00:	22d9      	movs	r2, #217	@ 0xd9
 8001a02:	2100      	movs	r1, #0
 8001a04:	2078      	movs	r0, #120	@ 0x78
 8001a06:	f000 fa25 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001a0a:	2222      	movs	r2, #34	@ 0x22
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2078      	movs	r0, #120	@ 0x78
 8001a10:	f000 fa20 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001a14:	22da      	movs	r2, #218	@ 0xda
 8001a16:	2100      	movs	r1, #0
 8001a18:	2078      	movs	r0, #120	@ 0x78
 8001a1a:	f000 fa1b 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001a1e:	2212      	movs	r2, #18
 8001a20:	2100      	movs	r1, #0
 8001a22:	2078      	movs	r0, #120	@ 0x78
 8001a24:	f000 fa16 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001a28:	22db      	movs	r2, #219	@ 0xdb
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2078      	movs	r0, #120	@ 0x78
 8001a2e:	f000 fa11 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001a32:	2220      	movs	r2, #32
 8001a34:	2100      	movs	r1, #0
 8001a36:	2078      	movs	r0, #120	@ 0x78
 8001a38:	f000 fa0c 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001a3c:	228d      	movs	r2, #141	@ 0x8d
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2078      	movs	r0, #120	@ 0x78
 8001a42:	f000 fa07 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001a46:	2214      	movs	r2, #20
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2078      	movs	r0, #120	@ 0x78
 8001a4c:	f000 fa02 	bl	8001e54 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001a50:	22af      	movs	r2, #175	@ 0xaf
 8001a52:	2100      	movs	r1, #0
 8001a54:	2078      	movs	r0, #120	@ 0x78
 8001a56:	f000 f9fd 	bl	8001e54 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001a5a:	222e      	movs	r2, #46	@ 0x2e
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2078      	movs	r0, #120	@ 0x78
 8001a60:	f000 f9f8 	bl	8001e54 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001a64:	2000      	movs	r0, #0
 8001a66:	f000 f843 	bl	8001af0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001a6a:	f000 f813 	bl	8001a94 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <SSD1306_Init+0x184>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <SSD1306_Init+0x184>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001a7a:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <SSD1306_Init+0x184>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001a80:	2301      	movs	r3, #1
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000660 	.word	0x20000660
 8001a90:	20000628 	.word	0x20000628

08001a94 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	71fb      	strb	r3, [r7, #7]
 8001a9e:	e01d      	b.n	8001adc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	3b50      	subs	r3, #80	@ 0x50
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2078      	movs	r0, #120	@ 0x78
 8001aac:	f000 f9d2 	bl	8001e54 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2078      	movs	r0, #120	@ 0x78
 8001ab6:	f000 f9cd 	bl	8001e54 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001aba:	2210      	movs	r2, #16
 8001abc:	2100      	movs	r1, #0
 8001abe:	2078      	movs	r0, #120	@ 0x78
 8001ac0:	f000 f9c8 	bl	8001e54 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	01db      	lsls	r3, r3, #7
 8001ac8:	4a08      	ldr	r2, [pc, #32]	@ (8001aec <SSD1306_UpdateScreen+0x58>)
 8001aca:	441a      	add	r2, r3
 8001acc:	2380      	movs	r3, #128	@ 0x80
 8001ace:	2140      	movs	r1, #64	@ 0x40
 8001ad0:	2078      	movs	r0, #120	@ 0x78
 8001ad2:	f000 f959 	bl	8001d88 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	71fb      	strb	r3, [r7, #7]
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b07      	cmp	r3, #7
 8001ae0:	d9de      	bls.n	8001aa0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000228 	.word	0x20000228

08001af0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <SSD1306_Fill+0x14>
 8001b00:	2300      	movs	r3, #0
 8001b02:	e000      	b.n	8001b06 <SSD1306_Fill+0x16>
 8001b04:	23ff      	movs	r3, #255	@ 0xff
 8001b06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4803      	ldr	r0, [pc, #12]	@ (8001b1c <SSD1306_Fill+0x2c>)
 8001b0e:	f004 ff5b 	bl	80069c8 <memset>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000228 	.word	0x20000228

08001b20 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	80fb      	strh	r3, [r7, #6]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	80bb      	strh	r3, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	70fb      	strb	r3, [r7, #3]
	if (
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b36:	d848      	bhi.n	8001bca <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001b38:	88bb      	ldrh	r3, [r7, #4]
 8001b3a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b3c:	d845      	bhi.n	8001bca <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001b3e:	4b25      	ldr	r3, [pc, #148]	@ (8001bd4 <SSD1306_DrawPixel+0xb4>)
 8001b40:	791b      	ldrb	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d006      	beq.n	8001b54 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2301      	moveq	r3, #1
 8001b4e:	2300      	movne	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d11a      	bne.n	8001b90 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b5a:	88fa      	ldrh	r2, [r7, #6]
 8001b5c:	88bb      	ldrh	r3, [r7, #4]
 8001b5e:	08db      	lsrs	r3, r3, #3
 8001b60:	b298      	uxth	r0, r3
 8001b62:	4603      	mov	r3, r0
 8001b64:	01db      	lsls	r3, r3, #7
 8001b66:	4413      	add	r3, r2
 8001b68:	4a1b      	ldr	r2, [pc, #108]	@ (8001bd8 <SSD1306_DrawPixel+0xb8>)
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	b25a      	sxtb	r2, r3
 8001b6e:	88bb      	ldrh	r3, [r7, #4]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	2101      	movs	r1, #1
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	b25b      	sxtb	r3, r3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b259      	sxtb	r1, r3
 8001b80:	88fa      	ldrh	r2, [r7, #6]
 8001b82:	4603      	mov	r3, r0
 8001b84:	01db      	lsls	r3, r3, #7
 8001b86:	4413      	add	r3, r2
 8001b88:	b2c9      	uxtb	r1, r1
 8001b8a:	4a13      	ldr	r2, [pc, #76]	@ (8001bd8 <SSD1306_DrawPixel+0xb8>)
 8001b8c:	54d1      	strb	r1, [r2, r3]
 8001b8e:	e01d      	b.n	8001bcc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b90:	88fa      	ldrh	r2, [r7, #6]
 8001b92:	88bb      	ldrh	r3, [r7, #4]
 8001b94:	08db      	lsrs	r3, r3, #3
 8001b96:	b298      	uxth	r0, r3
 8001b98:	4603      	mov	r3, r0
 8001b9a:	01db      	lsls	r3, r3, #7
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd8 <SSD1306_DrawPixel+0xb8>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	b25a      	sxtb	r2, r3
 8001ba4:	88bb      	ldrh	r3, [r7, #4]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	2101      	movs	r1, #1
 8001bac:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb0:	b25b      	sxtb	r3, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	b259      	sxtb	r1, r3
 8001bba:	88fa      	ldrh	r2, [r7, #6]
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	01db      	lsls	r3, r3, #7
 8001bc0:	4413      	add	r3, r2
 8001bc2:	b2c9      	uxtb	r1, r1
 8001bc4:	4a04      	ldr	r2, [pc, #16]	@ (8001bd8 <SSD1306_DrawPixel+0xb8>)
 8001bc6:	54d1      	strb	r1, [r2, r3]
 8001bc8:	e000      	b.n	8001bcc <SSD1306_DrawPixel+0xac>
		return;
 8001bca:	bf00      	nop
	}
}
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	20000628 	.word	0x20000628
 8001bd8:	20000228 	.word	0x20000228

08001bdc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	460a      	mov	r2, r1
 8001be6:	80fb      	strh	r3, [r7, #6]
 8001be8:	4613      	mov	r3, r2
 8001bea:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001bec:	4a05      	ldr	r2, [pc, #20]	@ (8001c04 <SSD1306_GotoXY+0x28>)
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	@ (8001c04 <SSD1306_GotoXY+0x28>)
 8001bf4:	88bb      	ldrh	r3, [r7, #4]
 8001bf6:	8053      	strh	r3, [r2, #2]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000628 	.word	0x20000628

08001c08 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	71fb      	strb	r3, [r7, #7]
 8001c14:	4613      	mov	r3, r2
 8001c16:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c18:	4b39      	ldr	r3, [pc, #228]	@ (8001d00 <SSD1306_Putc+0xf8>)
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	4413      	add	r3, r2
	if (
 8001c24:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c26:	dc07      	bgt.n	8001c38 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001c28:	4b35      	ldr	r3, [pc, #212]	@ (8001d00 <SSD1306_Putc+0xf8>)
 8001c2a:	885b      	ldrh	r3, [r3, #2]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	785b      	ldrb	r3, [r3, #1]
 8001c32:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c34:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c36:	dd01      	ble.n	8001c3c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e05d      	b.n	8001cf8 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	e04b      	b.n	8001cda <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	3b20      	subs	r3, #32
 8001c4a:	6839      	ldr	r1, [r7, #0]
 8001c4c:	7849      	ldrb	r1, [r1, #1]
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	440b      	add	r3, r1
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	e030      	b.n	8001cc8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d010      	beq.n	8001c98 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001c76:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <SSD1306_Putc+0xf8>)
 8001c78:	881a      	ldrh	r2, [r3, #0]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	b298      	uxth	r0, r3
 8001c82:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <SSD1306_Putc+0xf8>)
 8001c84:	885a      	ldrh	r2, [r3, #2]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	79ba      	ldrb	r2, [r7, #6]
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7ff ff45 	bl	8001b20 <SSD1306_DrawPixel>
 8001c96:	e014      	b.n	8001cc2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001c98:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <SSD1306_Putc+0xf8>)
 8001c9a:	881a      	ldrh	r2, [r3, #0]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b298      	uxth	r0, r3
 8001ca4:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <SSD1306_Putc+0xf8>)
 8001ca6:	885a      	ldrh	r2, [r3, #2]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	b299      	uxth	r1, r3
 8001cb0:	79bb      	ldrb	r3, [r7, #6]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	bf0c      	ite	eq
 8001cb6:	2301      	moveq	r3, #1
 8001cb8:	2300      	movne	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f7ff ff2f 	bl	8001b20 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d3c8      	bcc.n	8001c66 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	785b      	ldrb	r3, [r3, #1]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d3ad      	bcc.n	8001c42 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <SSD1306_Putc+0xf8>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <SSD1306_Putc+0xf8>)
 8001cf4:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000628 	.word	0x20000628

08001d04 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001d12:	e012      	b.n	8001d3a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	79fa      	ldrb	r2, [r7, #7]
 8001d1a:	68b9      	ldr	r1, [r7, #8]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff73 	bl	8001c08 <SSD1306_Putc>
 8001d22:	4603      	mov	r3, r0
 8001d24:	461a      	mov	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d002      	beq.n	8001d34 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	e008      	b.n	8001d46 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3301      	adds	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1e8      	bne.n	8001d14 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	781b      	ldrb	r3, [r3, #0]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f7ff fecc 	bl	8001af0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001d58:	f7ff fe9c 	bl	8001a94 <SSD1306_UpdateScreen>
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001d66:	4b07      	ldr	r3, [pc, #28]	@ (8001d84 <ssd1306_I2C_Init+0x24>)
 8001d68:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d6a:	e002      	b.n	8001d72 <ssd1306_I2C_Init+0x12>
		p--;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f9      	bne.n	8001d6c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&H_I2C);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	0003d090 	.word	0x0003d090

08001d88 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b0c7      	sub	sp, #284	@ 0x11c
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	4604      	mov	r4, r0
 8001d90:	4608      	mov	r0, r1
 8001d92:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001d96:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001d9a:	600a      	str	r2, [r1, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001da2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001da6:	4622      	mov	r2, r4
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dae:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001db2:	4602      	mov	r2, r0
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dbe:	460a      	mov	r2, r1
 8001dc0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001dc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001dc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001dca:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001dce:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001dd2:	7812      	ldrb	r2, [r2, #0]
 8001dd4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001ddc:	e015      	b.n	8001e0a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001dde:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001de2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001de6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	441a      	add	r2, r3
 8001dee:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001df2:	3301      	adds	r3, #1
 8001df4:	7811      	ldrb	r1, [r2, #0]
 8001df6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001dfa:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001dfe:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001e00:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001e04:	3301      	adds	r3, #1
 8001e06:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001e0a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001e14:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001e18:	8812      	ldrh	r2, [r2, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d8df      	bhi.n	8001dde <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&H_I2C, address, dt, count+1, 10);
 8001e1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e22:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	b299      	uxth	r1, r3
 8001e2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001e2e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	3301      	adds	r3, #1
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	f107 020c 	add.w	r2, r7, #12
 8001e3c:	200a      	movs	r0, #10
 8001e3e:	9000      	str	r0, [sp, #0]
 8001e40:	4803      	ldr	r0, [pc, #12]	@ (8001e50 <ssd1306_I2C_WriteMulti+0xc8>)
 8001e42:	f001 fea9 	bl	8003b98 <HAL_I2C_Master_Transmit>
}
 8001e46:	bf00      	nop
 8001e48:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd90      	pop	{r4, r7, pc}
 8001e50:	20000660 	.word	0x20000660

08001e54 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af02      	add	r7, sp, #8
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	71bb      	strb	r3, [r7, #6]
 8001e62:	4613      	mov	r3, r2
 8001e64:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001e66:	79bb      	ldrb	r3, [r7, #6]
 8001e68:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001e6a:	797b      	ldrb	r3, [r7, #5]
 8001e6c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&H_I2C, address, dt, 2, 10);
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	b299      	uxth	r1, r3
 8001e72:	f107 020c 	add.w	r2, r7, #12
 8001e76:	230a      	movs	r3, #10
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	4803      	ldr	r0, [pc, #12]	@ (8001e8c <ssd1306_I2C_Write+0x38>)
 8001e7e:	f001 fe8b 	bl	8003b98 <HAL_I2C_Master_Transmit>
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000660 	.word	0x20000660

08001e90 <checkButton>:
#include "oledController.h"
#include "heaterController.h"

int count = 0;

void checkButton() {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	if (g_f_sw_up) {
 8001e94:	4b15      	ldr	r3, [pc, #84]	@ (8001eec <checkButton+0x5c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d009      	beq.n	8001eb0 <checkButton+0x20>
		g_f_sw_up = 0;
 8001e9c:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <checkButton+0x5c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
		count++;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <checkButton+0x60>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	4a11      	ldr	r2, [pc, #68]	@ (8001ef0 <checkButton+0x60>)
 8001eaa:	6013      	str	r3, [r2, #0]
		temper_up();
 8001eac:	f000 f9ac 	bl	8002208 <temper_up>
	}

	if (g_f_sw_down) {
 8001eb0:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <checkButton+0x64>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d004      	beq.n	8001ec2 <checkButton+0x32>
		g_f_sw_down = 0;
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <checkButton+0x64>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
		temper_down();
 8001ebe:	f000 f9bb 	bl	8002238 <temper_down>
	}

	if (g_f_sw_fix) {
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <checkButton+0x68>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d006      	beq.n	8001ed8 <checkButton+0x48>
		g_f_sw_fix = 0;
 8001eca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <checkButton+0x68>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
		startToggle();
 8001ed0:	f000 fdb0 	bl	8002a34 <startToggle>
		setFixedTemper();
 8001ed4:	f000 f9c8 	bl	8002268 <setFixedTemper>
	}

	if (g_f_sw_on) {
 8001ed8:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <checkButton+0x6c>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <checkButton+0x56>
		g_f_sw_on = 0;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <checkButton+0x6c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
	}
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000065a 	.word	0x2000065a
 8001ef0:	20000630 	.word	0x20000630
 8001ef4:	2000065b 	.word	0x2000065b
 8001ef8:	2000065c 	.word	0x2000065c
 8001efc:	2000065d 	.word	0x2000065d

08001f00 <getSwState>:


ON_OFF_t getSwState(){		// 전원 스위치
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(PB12_START_SW_PIN_GPIO_Port_GPIO_Port, PB12_START_SW_PIN_GPIO_Port_Pin)) {
 8001f04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f08:	4805      	ldr	r0, [pc, #20]	@ (8001f20 <getSwState+0x20>)
 8001f0a:	f001 fcaf 	bl	800386c <HAL_GPIO_ReadPin>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <getSwState+0x18>
		return OFF_t;	// High일 경우 전원 OFF
 8001f14:	2300      	movs	r3, #0
 8001f16:	e000      	b.n	8001f1a <getSwState+0x1a>
	} else {
		return ON_t;	// Low일 경우 전원 ON
 8001f18:	2301      	movs	r3, #1
	}
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40010c00 	.word	0x40010c00

08001f24 <init_fnd>:
#include "fnd_controller.h"

uint8_t _LED_0F[29];
static SPI_HandleTypeDef * m_hspi;

void init_fnd(SPI_HandleTypeDef * hspi) {
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

	_LED_0F[0] = 0xC0; //0
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001fec <init_fnd+0xc8>)
 8001f2e:	22c0      	movs	r2, #192	@ 0xc0
 8001f30:	701a      	strb	r2, [r3, #0]
	_LED_0F[1] = 0xF9; //1
 8001f32:	4b2e      	ldr	r3, [pc, #184]	@ (8001fec <init_fnd+0xc8>)
 8001f34:	22f9      	movs	r2, #249	@ 0xf9
 8001f36:	705a      	strb	r2, [r3, #1]
	_LED_0F[2] = 0xA4; //2
 8001f38:	4b2c      	ldr	r3, [pc, #176]	@ (8001fec <init_fnd+0xc8>)
 8001f3a:	22a4      	movs	r2, #164	@ 0xa4
 8001f3c:	709a      	strb	r2, [r3, #2]
	_LED_0F[3] = 0xB0; //3
 8001f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001fec <init_fnd+0xc8>)
 8001f40:	22b0      	movs	r2, #176	@ 0xb0
 8001f42:	70da      	strb	r2, [r3, #3]
	_LED_0F[4] = 0x99; //4
 8001f44:	4b29      	ldr	r3, [pc, #164]	@ (8001fec <init_fnd+0xc8>)
 8001f46:	2299      	movs	r2, #153	@ 0x99
 8001f48:	711a      	strb	r2, [r3, #4]
	_LED_0F[5] = 0x92; //5
 8001f4a:	4b28      	ldr	r3, [pc, #160]	@ (8001fec <init_fnd+0xc8>)
 8001f4c:	2292      	movs	r2, #146	@ 0x92
 8001f4e:	715a      	strb	r2, [r3, #5]
	_LED_0F[6] = 0x82; //6
 8001f50:	4b26      	ldr	r3, [pc, #152]	@ (8001fec <init_fnd+0xc8>)
 8001f52:	2282      	movs	r2, #130	@ 0x82
 8001f54:	719a      	strb	r2, [r3, #6]
	_LED_0F[7] = 0xF8; //7
 8001f56:	4b25      	ldr	r3, [pc, #148]	@ (8001fec <init_fnd+0xc8>)
 8001f58:	22f8      	movs	r2, #248	@ 0xf8
 8001f5a:	71da      	strb	r2, [r3, #7]
	_LED_0F[8] = 0x80; //8
 8001f5c:	4b23      	ldr	r3, [pc, #140]	@ (8001fec <init_fnd+0xc8>)
 8001f5e:	2280      	movs	r2, #128	@ 0x80
 8001f60:	721a      	strb	r2, [r3, #8]
	_LED_0F[9] = 0x90; //9
 8001f62:	4b22      	ldr	r3, [pc, #136]	@ (8001fec <init_fnd+0xc8>)
 8001f64:	2290      	movs	r2, #144	@ 0x90
 8001f66:	725a      	strb	r2, [r3, #9]
	_LED_0F[10] = 0x88; //A
 8001f68:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <init_fnd+0xc8>)
 8001f6a:	2288      	movs	r2, #136	@ 0x88
 8001f6c:	729a      	strb	r2, [r3, #10]
	_LED_0F[11] = 0x83; //b
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fec <init_fnd+0xc8>)
 8001f70:	2283      	movs	r2, #131	@ 0x83
 8001f72:	72da      	strb	r2, [r3, #11]
	_LED_0F[12] = 0xC6; //C
 8001f74:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <init_fnd+0xc8>)
 8001f76:	22c6      	movs	r2, #198	@ 0xc6
 8001f78:	731a      	strb	r2, [r3, #12]
	_LED_0F[13] = 0xA1; //d
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fec <init_fnd+0xc8>)
 8001f7c:	22a1      	movs	r2, #161	@ 0xa1
 8001f7e:	735a      	strb	r2, [r3, #13]
	_LED_0F[14] = 0x86; //E
 8001f80:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <init_fnd+0xc8>)
 8001f82:	2286      	movs	r2, #134	@ 0x86
 8001f84:	739a      	strb	r2, [r3, #14]
	_LED_0F[15] = 0x8E; //F
 8001f86:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <init_fnd+0xc8>)
 8001f88:	228e      	movs	r2, #142	@ 0x8e
 8001f8a:	73da      	strb	r2, [r3, #15]
	_LED_0F[16] = 0xC2; //G
 8001f8c:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <init_fnd+0xc8>)
 8001f8e:	22c2      	movs	r2, #194	@ 0xc2
 8001f90:	741a      	strb	r2, [r3, #16]
	_LED_0F[17] = 0x89; //H
 8001f92:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <init_fnd+0xc8>)
 8001f94:	2289      	movs	r2, #137	@ 0x89
 8001f96:	745a      	strb	r2, [r3, #17]
	_LED_0F[18] = 0xF9; //I
 8001f98:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <init_fnd+0xc8>)
 8001f9a:	22f9      	movs	r2, #249	@ 0xf9
 8001f9c:	749a      	strb	r2, [r3, #18]
	_LED_0F[19] = 0xF1; //J
 8001f9e:	4b13      	ldr	r3, [pc, #76]	@ (8001fec <init_fnd+0xc8>)
 8001fa0:	22f1      	movs	r2, #241	@ 0xf1
 8001fa2:	74da      	strb	r2, [r3, #19]
	_LED_0F[20] = 0xC3; //L
 8001fa4:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <init_fnd+0xc8>)
 8001fa6:	22c3      	movs	r2, #195	@ 0xc3
 8001fa8:	751a      	strb	r2, [r3, #20]
	_LED_0F[21] = 0xA9; //n
 8001faa:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <init_fnd+0xc8>)
 8001fac:	22a9      	movs	r2, #169	@ 0xa9
 8001fae:	755a      	strb	r2, [r3, #21]
	_LED_0F[22] = 0xC0; //O
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <init_fnd+0xc8>)
 8001fb2:	22c0      	movs	r2, #192	@ 0xc0
 8001fb4:	759a      	strb	r2, [r3, #22]
	_LED_0F[23] = 0x8C; //P
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001fec <init_fnd+0xc8>)
 8001fb8:	228c      	movs	r2, #140	@ 0x8c
 8001fba:	75da      	strb	r2, [r3, #23]
	_LED_0F[24] = 0x98; //q
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <init_fnd+0xc8>)
 8001fbe:	2298      	movs	r2, #152	@ 0x98
 8001fc0:	761a      	strb	r2, [r3, #24]
	_LED_0F[25] = 0x92; //S
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <init_fnd+0xc8>)
 8001fc4:	2292      	movs	r2, #146	@ 0x92
 8001fc6:	765a      	strb	r2, [r3, #25]
	_LED_0F[26] = 0xC1; //U
 8001fc8:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <init_fnd+0xc8>)
 8001fca:	22c1      	movs	r2, #193	@ 0xc1
 8001fcc:	769a      	strb	r2, [r3, #26]
	_LED_0F[27] = 0x91; //Y
 8001fce:	4b07      	ldr	r3, [pc, #28]	@ (8001fec <init_fnd+0xc8>)
 8001fd0:	2291      	movs	r2, #145	@ 0x91
 8001fd2:	76da      	strb	r2, [r3, #27]
	_LED_0F[28] = 0xFE; //hight -
 8001fd4:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <init_fnd+0xc8>)
 8001fd6:	22fe      	movs	r2, #254	@ 0xfe
 8001fd8:	771a      	strb	r2, [r3, #28]
	m_hspi = hspi;
 8001fda:	4a05      	ldr	r2, [pc, #20]	@ (8001ff0 <init_fnd+0xcc>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000634 	.word	0x20000634
 8001ff0:	20000654 	.word	0x20000654

08001ff4 <send>:

void send(uint8_t X) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
//		X <<= 1;
//		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, LOW);
//		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, HIGH);
//	}

	HAL_SPI_Transmit(m_hspi, &X, 1, 100);
 8001ffe:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <send+0x20>)
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	1df9      	adds	r1, r7, #7
 8002004:	2364      	movs	r3, #100	@ 0x64
 8002006:	2201      	movs	r2, #1
 8002008:	f002 fee0 	bl	8004dcc <HAL_SPI_Transmit>
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000654 	.word	0x20000654

08002018 <send_port>:

void send_port(uint8_t X, uint8_t port) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	460a      	mov	r2, r1
 8002022:	71fb      	strb	r3, [r7, #7]
 8002024:	4613      	mov	r3, r2
 8002026:	71bb      	strb	r3, [r7, #6]
//	printf("2\r\n");
	send(X);		// 어떤 문자
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ffe2 	bl	8001ff4 <send>
	send(port);		// 어떤 자리에
 8002030:	79bb      	ldrb	r3, [r7, #6]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ffde 	bl	8001ff4 <send>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, LOW);		// Latch Clock 신호로 8비트 데이터를 복사
 8002038:	2200      	movs	r2, #0
 800203a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800203e:	4806      	ldr	r0, [pc, #24]	@ (8002058 <send_port+0x40>)
 8002040:	f001 fc2b 	bl	800389a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, HIGH);		// High로 올리면 데이터를 출력
 8002044:	2201      	movs	r2, #1
 8002046:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800204a:	4803      	ldr	r0, [pc, #12]	@ (8002058 <send_port+0x40>)
 800204c:	f001 fc25 	bl	800389a <HAL_GPIO_WritePin>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40010c00 	.word	0x40010c00

0800205c <digit4_temper>:
//	digit2(n, port, 0);
//}

static uint8_t m_tempercount = 0;

void digit4_temper(int temper) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	int n1, n2, n3, n4;
	n1 = (int) temper % 10;
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	4b4e      	ldr	r3, [pc, #312]	@ (80021a0 <digit4_temper+0x144>)
 8002068:	fb83 1302 	smull	r1, r3, r3, r2
 800206c:	1099      	asrs	r1, r3, #2
 800206e:	17d3      	asrs	r3, r2, #31
 8002070:	1ac9      	subs	r1, r1, r3
 8002072:	460b      	mov	r3, r1
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	617b      	str	r3, [r7, #20]
	n2 = (int) ((temper % 100)) / 10;
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4b48      	ldr	r3, [pc, #288]	@ (80021a4 <digit4_temper+0x148>)
 8002082:	fb83 1302 	smull	r1, r3, r3, r2
 8002086:	1159      	asrs	r1, r3, #5
 8002088:	17d3      	asrs	r3, r2, #31
 800208a:	1acb      	subs	r3, r1, r3
 800208c:	2164      	movs	r1, #100	@ 0x64
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	4a42      	ldr	r2, [pc, #264]	@ (80021a0 <digit4_temper+0x144>)
 8002096:	fb82 1203 	smull	r1, r2, r2, r3
 800209a:	1092      	asrs	r2, r2, #2
 800209c:	17db      	asrs	r3, r3, #31
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	613b      	str	r3, [r7, #16]
	n3 = (int) ((temper)) / 100;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a3f      	ldr	r2, [pc, #252]	@ (80021a4 <digit4_temper+0x148>)
 80020a6:	fb82 1203 	smull	r1, r2, r2, r3
 80020aa:	1152      	asrs	r2, r2, #5
 80020ac:	17db      	asrs	r3, r3, #31
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	60fb      	str	r3, [r7, #12]
	n4 = (int) ((temper)) / 1000;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a3c      	ldr	r2, [pc, #240]	@ (80021a8 <digit4_temper+0x14c>)
 80020b6:	fb82 1203 	smull	r1, r2, r2, r3
 80020ba:	1192      	asrs	r2, r2, #6
 80020bc:	17db      	asrs	r3, r3, #31
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	60bb      	str	r3, [r7, #8]
//	printf("digit4_temper\r\n");
	switch (m_tempercount) {
 80020c2:	4b3a      	ldr	r3, [pc, #232]	@ (80021ac <digit4_temper+0x150>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d838      	bhi.n	800213c <digit4_temper+0xe0>
 80020ca:	a201      	add	r2, pc, #4	@ (adr r2, 80020d0 <digit4_temper+0x74>)
 80020cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d0:	080020e1 	.word	0x080020e1
 80020d4:	080020f3 	.word	0x080020f3
 80020d8:	0800210b 	.word	0x0800210b
 80020dc:	08002123 	.word	0x08002123
	case 0:
		send_port(_LED_0F[n1], 0b0001);
 80020e0:	4a33      	ldr	r2, [pc, #204]	@ (80021b0 <digit4_temper+0x154>)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	4413      	add	r3, r2
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2101      	movs	r1, #1
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ff94 	bl	8002018 <send_port>
		break;
 80020f0:	e029      	b.n	8002146 <digit4_temper+0xea>
	case 1:
		send_port(_LED_0F[n2] & 0x7F, 0b0010);
 80020f2:	4a2f      	ldr	r2, [pc, #188]	@ (80021b0 <digit4_temper+0x154>)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2102      	movs	r1, #2
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ff88 	bl	8002018 <send_port>
		break;
 8002108:	e01d      	b.n	8002146 <digit4_temper+0xea>
	case 2:
		if (temper > 99) {
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b63      	cmp	r3, #99	@ 0x63
 800210e:	dd17      	ble.n	8002140 <digit4_temper+0xe4>
			send_port(_LED_0F[n3], 0b0100);
 8002110:	4a27      	ldr	r2, [pc, #156]	@ (80021b0 <digit4_temper+0x154>)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4413      	add	r3, r2
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2104      	movs	r1, #4
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ff7c 	bl	8002018 <send_port>
		}
		break;
 8002120:	e00e      	b.n	8002140 <digit4_temper+0xe4>
	case 3:
		if (temper > 999) {
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002128:	db0c      	blt.n	8002144 <digit4_temper+0xe8>
			send_port(_LED_0F[n4], 0b1000);
 800212a:	4a21      	ldr	r2, [pc, #132]	@ (80021b0 <digit4_temper+0x154>)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4413      	add	r3, r2
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2108      	movs	r1, #8
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff6f 	bl	8002018 <send_port>
		}
		break;
 800213a:	e003      	b.n	8002144 <digit4_temper+0xe8>
	default:
		break;
 800213c:	bf00      	nop
 800213e:	e002      	b.n	8002146 <digit4_temper+0xea>
		break;
 8002140:	bf00      	nop
 8002142:	e000      	b.n	8002146 <digit4_temper+0xea>
		break;
 8002144:	bf00      	nop
	}
	m_tempercount++;
 8002146:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <digit4_temper+0x150>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4b17      	ldr	r3, [pc, #92]	@ (80021ac <digit4_temper+0x150>)
 8002150:	701a      	strb	r2, [r3, #0]
	if (temper > 999 && m_tempercount >= 4) {
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002158:	db07      	blt.n	800216a <digit4_temper+0x10e>
 800215a:	4b14      	ldr	r3, [pc, #80]	@ (80021ac <digit4_temper+0x150>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d903      	bls.n	800216a <digit4_temper+0x10e>
		m_tempercount = 0;
 8002162:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <digit4_temper+0x150>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	e015      	b.n	8002196 <digit4_temper+0x13a>
	} else if (temper > 99 && m_tempercount >= 3) {
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b63      	cmp	r3, #99	@ 0x63
 800216e:	dd07      	ble.n	8002180 <digit4_temper+0x124>
 8002170:	4b0e      	ldr	r3, [pc, #56]	@ (80021ac <digit4_temper+0x150>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d903      	bls.n	8002180 <digit4_temper+0x124>
		m_tempercount = 0;
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <digit4_temper+0x150>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
 800217e:	e00a      	b.n	8002196 <digit4_temper+0x13a>
	} else if (temper <= 99 && m_tempercount >= 2) {
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b63      	cmp	r3, #99	@ 0x63
 8002184:	dc07      	bgt.n	8002196 <digit4_temper+0x13a>
 8002186:	4b09      	ldr	r3, [pc, #36]	@ (80021ac <digit4_temper+0x150>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d903      	bls.n	8002196 <digit4_temper+0x13a>
		m_tempercount = 0;
 800218e:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <digit4_temper+0x150>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
	}
}
 8002194:	e7ff      	b.n	8002196 <digit4_temper+0x13a>
 8002196:	bf00      	nop
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	66666667 	.word	0x66666667
 80021a4:	51eb851f 	.word	0x51eb851f
 80021a8:	10624dd3 	.word	0x10624dd3
 80021ac:	20000658 	.word	0x20000658
 80021b0:	20000634 	.word	0x20000634

080021b4 <heaterControl>:
void initHeater(){
	m_state=0;
	heaterOnOff(OFF_t);
}

void heaterControl(float temper){		// 오차범위만큼 미리 온도 계산하여 히터 On/Off 조절
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

	if(m_state){
 80021bc:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <heaterControl+0x4c>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00c      	beq.n	80021de <heaterControl+0x2a>

		if((int)temper >= (m_fixed_temper - GOING_UP_GAP)){
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7fe fe21 	bl	8000e0c <__aeabi_f2iz>
 80021ca:	4602      	mov	r2, r0
 80021cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <heaterControl+0x50>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	429a      	cmp	r2, r3
 80021d4:	db0f      	blt.n	80021f6 <heaterControl+0x42>
				heaterOnOff(OFF_t);
 80021d6:	2000      	movs	r0, #0
 80021d8:	f000 f85e 	bl	8002298 <heaterOnOff>
	}else{
		if((int)temper <  m_fixed_temper - GOING_DOWN_GAP){
			heaterOnOff(ON_t);
		}
	}
}
 80021dc:	e00b      	b.n	80021f6 <heaterControl+0x42>
		if((int)temper <  m_fixed_temper - GOING_DOWN_GAP){
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fe14 	bl	8000e0c <__aeabi_f2iz>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <heaterControl+0x50>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	3b03      	subs	r3, #3
 80021ec:	429a      	cmp	r2, r3
 80021ee:	da02      	bge.n	80021f6 <heaterControl+0x42>
			heaterOnOff(ON_t);
 80021f0:	2001      	movs	r0, #1
 80021f2:	f000 f851 	bl	8002298 <heaterOnOff>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000659 	.word	0x20000659
 8002204:	2000000c 	.word	0x2000000c

08002208 <temper_up>:

void temper_up(){		// 설정 온도 상승
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0

	m_desired_temper++;		// 버튼을 눌렀을 때 설정 온도를 올림
 800220c:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <temper_up+0x2c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	4a08      	ldr	r2, [pc, #32]	@ (8002234 <temper_up+0x2c>)
 8002214:	6013      	str	r3, [r2, #0]
	if(m_desired_temper > 99){	// 설정 온도값이 99도를 넘을 시
 8002216:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <temper_up+0x2c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b63      	cmp	r3, #99	@ 0x63
 800221c:	dd02      	ble.n	8002224 <temper_up+0x1c>
		m_desired_temper = 0;		// 0으로 변경
 800221e:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <temper_up+0x2c>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
	}
	printTemper(m_desired_temper);		// 설정 온도 출력
 8002224:	4b03      	ldr	r3, [pc, #12]	@ (8002234 <temper_up+0x2c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f000 fcb7 	bl	8002b9c <printTemper>
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000008 	.word	0x20000008

08002238 <temper_down>:

void temper_down(){		// 설정 온도 하강
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0

	m_desired_temper--;		// 버튼을 눌렀을 때 온도를 내림
 800223c:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <temper_down+0x2c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3b01      	subs	r3, #1
 8002242:	4a08      	ldr	r2, [pc, #32]	@ (8002264 <temper_down+0x2c>)
 8002244:	6013      	str	r3, [r2, #0]
	if(m_desired_temper < 0){		// 설정 온도값이 0도를 이하라면
 8002246:	4b07      	ldr	r3, [pc, #28]	@ (8002264 <temper_down+0x2c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	da02      	bge.n	8002254 <temper_down+0x1c>
		m_desired_temper = 99;		// 99로 변경
 800224e:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <temper_down+0x2c>)
 8002250:	2263      	movs	r2, #99	@ 0x63
 8002252:	601a      	str	r2, [r3, #0]
	}
	printTemper(m_desired_temper);		// 설정 온도 출력
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <temper_down+0x2c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f000 fc9f 	bl	8002b9c <printTemper>
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000008 	.word	0x20000008

08002268 <setFixedTemper>:

void setFixedTemper(){		// 온도 설정
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
	m_fixed_temper = m_desired_temper;
 800226c:	4b03      	ldr	r3, [pc, #12]	@ (800227c <setFixedTemper+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a03      	ldr	r2, [pc, #12]	@ (8002280 <setFixedTemper+0x18>)
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	20000008 	.word	0x20000008
 8002280:	2000000c 	.word	0x2000000c

08002284 <getFixedTemper>:

int getFixedTemper(void){
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
	return m_desired_temper;
 8002288:	4b02      	ldr	r3, [pc, #8]	@ (8002294 <getFixedTemper+0x10>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	20000008 	.word	0x20000008

08002298 <heaterOnOff>:


void heaterOnOff(uint8_t onOff){		// 히터 동작 릴레이
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin,onOff);
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	461a      	mov	r2, r3
 80022a6:	2120      	movs	r1, #32
 80022a8:	480c      	ldr	r0, [pc, #48]	@ (80022dc <heaterOnOff+0x44>)
 80022aa:	f001 faf6 	bl	800389a <HAL_GPIO_WritePin>
	m_state = onOff;
 80022ae:	4a0c      	ldr	r2, [pc, #48]	@ (80022e0 <heaterOnOff+0x48>)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	7013      	strb	r3, [r2, #0]

	if(onOff == ON_t){	// 히터가 켜져있으면
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d106      	bne.n	80022c8 <heaterOnOff+0x30>
		led2OnOff(ON_t);	// LED를 켜라
 80022ba:	2001      	movs	r0, #1
 80022bc:	f000 f838 	bl	8002330 <led2OnOff>
		printHeaterState(ON_t);
 80022c0:	2001      	movs	r0, #1
 80022c2:	f000 fc95 	bl	8002bf0 <printHeaterState>
	}else{
		led2OnOff(OFF_t);
		printHeaterState(OFF_t);
	}

}
 80022c6:	e005      	b.n	80022d4 <heaterOnOff+0x3c>
		led2OnOff(OFF_t);
 80022c8:	2000      	movs	r0, #0
 80022ca:	f000 f831 	bl	8002330 <led2OnOff>
		printHeaterState(OFF_t);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f000 fc8e 	bl	8002bf0 <printHeaterState>
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40010c00 	.word	0x40010c00
 80022e0:	20000659 	.word	0x20000659

080022e4 <getHeaterState>:


uint8_t getHeaterState() {
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
	return m_state;
 80022e8:	4b02      	ldr	r3, [pc, #8]	@ (80022f4 <getHeaterState+0x10>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	20000659 	.word	0x20000659

080022f8 <led1OnOff>:
#include "ledController.h"


void led1OnOff(ON_OFF_t on_off) {		// 스위치가 켜져있는지
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]

	if (on_off == ON_t) {	// LED를 키라는 명령이 있었으면, 실질적으로 WritePin을 통해 High상태를 만들며 불이 켜진다.
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <led1OnOff+0x1c>
		HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 1);
 8002308:	2201      	movs	r2, #1
 800230a:	2140      	movs	r1, #64	@ 0x40
 800230c:	4807      	ldr	r0, [pc, #28]	@ (800232c <led1OnOff+0x34>)
 800230e:	f001 fac4 	bl	800389a <HAL_GPIO_WritePin>
	} else if (on_off == OFF_t) {	// LED를 끄라는 명령이 있었으면, 실직적으로 WritePin을 통해 Low상태를 만들며 불이 꺼진다.
		HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 0);
	}
}
 8002312:	e007      	b.n	8002324 <led1OnOff+0x2c>
	} else if (on_off == OFF_t) {	// LED를 끄라는 명령이 있었으면, 실직적으로 WritePin을 통해 Low상태를 만들며 불이 꺼진다.
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d104      	bne.n	8002324 <led1OnOff+0x2c>
		HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2140      	movs	r1, #64	@ 0x40
 800231e:	4803      	ldr	r0, [pc, #12]	@ (800232c <led1OnOff+0x34>)
 8002320:	f001 fabb 	bl	800389a <HAL_GPIO_WritePin>
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40010c00 	.word	0x40010c00

08002330 <led2OnOff>:


void led2OnOff(ON_OFF_t on_off) {		// 드라이기가 작동하는지
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]

	if (on_off == ON_t) {
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <led2OnOff+0x1c>
		HAL_GPIO_WritePin(PB7_LED1_GPIO_Port, PB7_LED1_Pin, 1);
 8002340:	2201      	movs	r2, #1
 8002342:	2180      	movs	r1, #128	@ 0x80
 8002344:	4807      	ldr	r0, [pc, #28]	@ (8002364 <led2OnOff+0x34>)
 8002346:	f001 faa8 	bl	800389a <HAL_GPIO_WritePin>
	} else if (on_off == OFF_t) {
		HAL_GPIO_WritePin(PB7_LED1_GPIO_Port, PB7_LED1_Pin, 0);
	}
}
 800234a:	e007      	b.n	800235c <led2OnOff+0x2c>
	} else if (on_off == OFF_t) {
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d104      	bne.n	800235c <led2OnOff+0x2c>
		HAL_GPIO_WritePin(PB7_LED1_GPIO_Port, PB7_LED1_Pin, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2180      	movs	r1, #128	@ 0x80
 8002356:	4803      	ldr	r0, [pc, #12]	@ (8002364 <led2OnOff+0x34>)
 8002358:	f001 fa9f 	bl	800389a <HAL_GPIO_WritePin>
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40010c00 	.word	0x40010c00

08002368 <_write>:
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
int _write(int file, char *p, int len) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) p, len, 10);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	b29a      	uxth	r2, r3
 8002378:	230a      	movs	r3, #10
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	4803      	ldr	r0, [pc, #12]	@ (800238c <_write+0x24>)
 800237e:	f003 fbb5 	bl	8005aec <HAL_UART_Transmit>
	return len;
 8002382:	687b      	ldr	r3, [r7, #4]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	2000079c 	.word	0x2000079c

08002390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	float temper =0.0;
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800239c:	f000 ff4e 	bl	800323c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023a0:	f000 f85c 	bl	800245c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023a4:	f000 f9c6 	bl	8002734 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80023a8:	f000 f99a 	bl	80026e0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80023ac:	f000 f900 	bl	80025b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80023b0:	f000 f94a 	bl	8002648 <MX_TIM3_Init>
  MX_I2C2_Init();
 80023b4:	f000 f898 	bl	80024e8 <MX_I2C2_Init>
  MX_SPI2_Init();
 80023b8:	f000 f8c4 	bl	8002544 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	SSD1306_Init();
 80023bc:	f7ff faa6 	bl	800190c <SSD1306_Init>
	opening();
 80023c0:	f000 fa98 	bl	80028f4 <opening>

	init_fnd(&hspi2);
 80023c4:	4821      	ldr	r0, [pc, #132]	@ (800244c <main+0xbc>)
 80023c6:	f7ff fdad 	bl	8001f24 <init_fnd>

	HAL_TIM_Base_Start_IT(&htim3);
 80023ca:	4821      	ldr	r0, [pc, #132]	@ (8002450 <main+0xc0>)
 80023cc:	f002 ff94 	bl	80052f8 <HAL_TIM_Base_Start_IT>

	Ds18b20_Init_Simple();
 80023d0:	f7fe fd5e 	bl	8000e90 <Ds18b20_Init_Simple>
	static int m_first = 0;

	while (1)
	  {

		checkButton();		// 버튼 상태 반영위해 호출
 80023d4:	f7ff fd5c 	bl	8001e90 <checkButton>

		  if((m_count > 100) || !m_first){	// 첫 실행이라면
 80023d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <main+0xc4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b64      	cmp	r3, #100	@ 0x64
 80023de:	dc03      	bgt.n	80023e8 <main+0x58>
 80023e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002458 <main+0xc8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d127      	bne.n	8002438 <main+0xa8>
			  if(!isConverting()){		// 변환을 안했으면 시작
 80023e8:	f7fe fd48 	bl	8000e7c <isConverting>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <main+0x66>
					  StartConverting();
 80023f2:	f7fe fd91 	bl	8000f18 <StartConverting>
				  }

				  checkConverting();
 80023f6:	f7fe fda5 	bl	8000f44 <checkConverting>

				  if(!isConverting()){
 80023fa:	f7fe fd3f 	bl	8000e7c <isConverting>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d119      	bne.n	8002438 <main+0xa8>
					  temper = getTemper();	// 온도 읽어와서 temper에 저장
 8002404:	f7fe fdba 	bl	8000f7c <getTemper>
 8002408:	6078      	str	r0, [r7, #4]
					  if(getSwState() == ON_t){		// 전원 스위치가 켜져 있으면
 800240a:	f7ff fd79 	bl	8001f00 <getSwState>
 800240e:	4603      	mov	r3, r0
 8002410:	2b01      	cmp	r3, #1
 8002412:	d103      	bne.n	800241c <main+0x8c>
						  heaterControl(temper);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff fecd 	bl	80021b4 <heaterControl>
 800241a:	e007      	b.n	800242c <main+0x9c>
					  }else{	// 전원이 꺼져있으면
						  if(getHeaterState() == ON_t){	// 히터가 켜져있어도 끔
 800241c:	f7ff ff62 	bl	80022e4 <getHeaterState>
 8002420:	4603      	mov	r3, r0
 8002422:	2b01      	cmp	r3, #1
 8002424:	d102      	bne.n	800242c <main+0x9c>
							  heaterOnOff(OFF_t);
 8002426:	2000      	movs	r0, #0
 8002428:	f7ff ff36 	bl	8002298 <heaterOnOff>
						  }
					  }
					  m_count = 0;
 800242c:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <main+0xc4>)
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
					  m_first = 1;
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <main+0xc8>)
 8002434:	2201      	movs	r2, #1
 8002436:	601a      	str	r2, [r3, #0]
				  }
		  }

		  m_count++;
 8002438:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <main+0xc4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3301      	adds	r3, #1
 800243e:	4a05      	ldr	r2, [pc, #20]	@ (8002454 <main+0xc4>)
 8002440:	6013      	str	r3, [r2, #0]
		  HAL_Delay(10);
 8002442:	200a      	movs	r0, #10
 8002444:	f000 ff5c 	bl	8003300 <HAL_Delay>
		checkButton();		// 버튼 상태 반영위해 호출
 8002448:	e7c4      	b.n	80023d4 <main+0x44>
 800244a:	bf00      	nop
 800244c:	200006b4 	.word	0x200006b4
 8002450:	20000754 	.word	0x20000754
 8002454:	200007e4 	.word	0x200007e4
 8002458:	200007e8 	.word	0x200007e8

0800245c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b090      	sub	sp, #64	@ 0x40
 8002460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002462:	f107 0318 	add.w	r3, r7, #24
 8002466:	2228      	movs	r2, #40	@ 0x28
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f004 faac 	bl	80069c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
 800247c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800247e:	2301      	movs	r3, #1
 8002480:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002482:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002486:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002488:	2300      	movs	r3, #0
 800248a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800248c:	2301      	movs	r3, #1
 800248e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002490:	2302      	movs	r3, #2
 8002492:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002494:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002498:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800249a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800249e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024a0:	f107 0318 	add.w	r3, r7, #24
 80024a4:	4618      	mov	r0, r3
 80024a6:	f001 fffd 	bl	80044a4 <HAL_RCC_OscConfig>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80024b0:	f000 fa1a 	bl	80028e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024b4:	230f      	movs	r3, #15
 80024b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024b8:	2302      	movs	r3, #2
 80024ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024ca:	1d3b      	adds	r3, r7, #4
 80024cc:	2102      	movs	r1, #2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 fa6a 	bl	80049a8 <HAL_RCC_ClockConfig>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80024da:	f000 fa05 	bl	80028e8 <Error_Handler>
  }
}
 80024de:	bf00      	nop
 80024e0:	3740      	adds	r7, #64	@ 0x40
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024ec:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <MX_I2C2_Init+0x50>)
 80024ee:	4a13      	ldr	r2, [pc, #76]	@ (800253c <MX_I2C2_Init+0x54>)
 80024f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80024f2:	4b11      	ldr	r3, [pc, #68]	@ (8002538 <MX_I2C2_Init+0x50>)
 80024f4:	4a12      	ldr	r2, [pc, #72]	@ (8002540 <MX_I2C2_Init+0x58>)
 80024f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002538 <MX_I2C2_Init+0x50>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80024fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002538 <MX_I2C2_Init+0x50>)
 8002500:	2200      	movs	r2, #0
 8002502:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002504:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <MX_I2C2_Init+0x50>)
 8002506:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800250a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800250c:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <MX_I2C2_Init+0x50>)
 800250e:	2200      	movs	r2, #0
 8002510:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <MX_I2C2_Init+0x50>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002518:	4b07      	ldr	r3, [pc, #28]	@ (8002538 <MX_I2C2_Init+0x50>)
 800251a:	2200      	movs	r2, #0
 800251c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800251e:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <MX_I2C2_Init+0x50>)
 8002520:	2200      	movs	r2, #0
 8002522:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002524:	4804      	ldr	r0, [pc, #16]	@ (8002538 <MX_I2C2_Init+0x50>)
 8002526:	f001 f9f3 	bl	8003910 <HAL_I2C_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002530:	f000 f9da 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000660 	.word	0x20000660
 800253c:	40005800 	.word	0x40005800
 8002540:	00061a80 	.word	0x00061a80

08002544 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002548:	4b17      	ldr	r3, [pc, #92]	@ (80025a8 <MX_SPI2_Init+0x64>)
 800254a:	4a18      	ldr	r2, [pc, #96]	@ (80025ac <MX_SPI2_Init+0x68>)
 800254c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800254e:	4b16      	ldr	r3, [pc, #88]	@ (80025a8 <MX_SPI2_Init+0x64>)
 8002550:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002554:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002556:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <MX_SPI2_Init+0x64>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800255c:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <MX_SPI2_Init+0x64>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002562:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <MX_SPI2_Init+0x64>)
 8002564:	2202      	movs	r2, #2
 8002566:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002568:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <MX_SPI2_Init+0x64>)
 800256a:	2201      	movs	r2, #1
 800256c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800256e:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <MX_SPI2_Init+0x64>)
 8002570:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002574:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002576:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <MX_SPI2_Init+0x64>)
 8002578:	2220      	movs	r2, #32
 800257a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800257c:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <MX_SPI2_Init+0x64>)
 800257e:	2200      	movs	r2, #0
 8002580:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002582:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <MX_SPI2_Init+0x64>)
 8002584:	2200      	movs	r2, #0
 8002586:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002588:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <MX_SPI2_Init+0x64>)
 800258a:	2200      	movs	r2, #0
 800258c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <MX_SPI2_Init+0x64>)
 8002590:	220a      	movs	r2, #10
 8002592:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002594:	4804      	ldr	r0, [pc, #16]	@ (80025a8 <MX_SPI2_Init+0x64>)
 8002596:	f002 fb95 	bl	8004cc4 <HAL_SPI_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80025a0:	f000 f9a2 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	200006b4 	.word	0x200006b4
 80025ac:	40003800 	.word	0x40003800

080025b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c4:	463b      	mov	r3, r7
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002644 <MX_TIM2_Init+0x94>)
 80025ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002644 <MX_TIM2_Init+0x94>)
 80025d6:	2247      	movs	r2, #71	@ 0x47
 80025d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025da:	4b1a      	ldr	r3, [pc, #104]	@ (8002644 <MX_TIM2_Init+0x94>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 80025e0:	4b18      	ldr	r3, [pc, #96]	@ (8002644 <MX_TIM2_Init+0x94>)
 80025e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e8:	4b16      	ldr	r3, [pc, #88]	@ (8002644 <MX_TIM2_Init+0x94>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ee:	4b15      	ldr	r3, [pc, #84]	@ (8002644 <MX_TIM2_Init+0x94>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025f4:	4813      	ldr	r0, [pc, #76]	@ (8002644 <MX_TIM2_Init+0x94>)
 80025f6:	f002 fde6 	bl	80051c6 <HAL_TIM_Base_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002600:	f000 f972 	bl	80028e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002604:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002608:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800260a:	f107 0308 	add.w	r3, r7, #8
 800260e:	4619      	mov	r1, r3
 8002610:	480c      	ldr	r0, [pc, #48]	@ (8002644 <MX_TIM2_Init+0x94>)
 8002612:	f002 ffb3 	bl	800557c <HAL_TIM_ConfigClockSource>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800261c:	f000 f964 	bl	80028e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002620:	2300      	movs	r3, #0
 8002622:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002624:	2300      	movs	r3, #0
 8002626:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002628:	463b      	mov	r3, r7
 800262a:	4619      	mov	r1, r3
 800262c:	4805      	ldr	r0, [pc, #20]	@ (8002644 <MX_TIM2_Init+0x94>)
 800262e:	f003 f99d 	bl	800596c <HAL_TIMEx_MasterConfigSynchronization>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002638:	f000 f956 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800263c:	bf00      	nop
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	2000070c 	.word	0x2000070c

08002648 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800264e:	f107 0308 	add.w	r3, r7, #8
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265c:	463b      	mov	r3, r7
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002664:	4b1c      	ldr	r3, [pc, #112]	@ (80026d8 <MX_TIM3_Init+0x90>)
 8002666:	4a1d      	ldr	r2, [pc, #116]	@ (80026dc <MX_TIM3_Init+0x94>)
 8002668:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800266a:	4b1b      	ldr	r3, [pc, #108]	@ (80026d8 <MX_TIM3_Init+0x90>)
 800266c:	2247      	movs	r2, #71	@ 0x47
 800266e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002670:	4b19      	ldr	r3, [pc, #100]	@ (80026d8 <MX_TIM3_Init+0x90>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8002676:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <MX_TIM3_Init+0x90>)
 8002678:	2231      	movs	r2, #49	@ 0x31
 800267a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800267c:	4b16      	ldr	r3, [pc, #88]	@ (80026d8 <MX_TIM3_Init+0x90>)
 800267e:	2200      	movs	r2, #0
 8002680:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002682:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <MX_TIM3_Init+0x90>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002688:	4813      	ldr	r0, [pc, #76]	@ (80026d8 <MX_TIM3_Init+0x90>)
 800268a:	f002 fd9c 	bl	80051c6 <HAL_TIM_Base_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002694:	f000 f928 	bl	80028e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002698:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800269c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800269e:	f107 0308 	add.w	r3, r7, #8
 80026a2:	4619      	mov	r1, r3
 80026a4:	480c      	ldr	r0, [pc, #48]	@ (80026d8 <MX_TIM3_Init+0x90>)
 80026a6:	f002 ff69 	bl	800557c <HAL_TIM_ConfigClockSource>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80026b0:	f000 f91a 	bl	80028e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b4:	2300      	movs	r3, #0
 80026b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026bc:	463b      	mov	r3, r7
 80026be:	4619      	mov	r1, r3
 80026c0:	4805      	ldr	r0, [pc, #20]	@ (80026d8 <MX_TIM3_Init+0x90>)
 80026c2:	f003 f953 	bl	800596c <HAL_TIMEx_MasterConfigSynchronization>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80026cc:	f000 f90c 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026d0:	bf00      	nop
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000754 	.word	0x20000754
 80026dc:	40000400 	.word	0x40000400

080026e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026e4:	4b11      	ldr	r3, [pc, #68]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 80026e6:	4a12      	ldr	r2, [pc, #72]	@ (8002730 <MX_USART1_UART_Init+0x50>)
 80026e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026ea:	4b10      	ldr	r3, [pc, #64]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 80026ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002704:	4b09      	ldr	r3, [pc, #36]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 8002706:	220c      	movs	r2, #12
 8002708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270a:	4b08      	ldr	r3, [pc, #32]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002716:	4805      	ldr	r0, [pc, #20]	@ (800272c <MX_USART1_UART_Init+0x4c>)
 8002718:	f003 f998 	bl	8005a4c <HAL_UART_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002722:	f000 f8e1 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	2000079c 	.word	0x2000079c
 8002730:	40013800 	.word	0x40013800

08002734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273a:	f107 0310 	add.w	r3, r7, #16
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	60da      	str	r2, [r3, #12]

//	  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002748:	4b62      	ldr	r3, [pc, #392]	@ (80028d4 <MX_GPIO_Init+0x1a0>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	4a61      	ldr	r2, [pc, #388]	@ (80028d4 <MX_GPIO_Init+0x1a0>)
 800274e:	f043 0310 	orr.w	r3, r3, #16
 8002752:	6193      	str	r3, [r2, #24]
 8002754:	4b5f      	ldr	r3, [pc, #380]	@ (80028d4 <MX_GPIO_Init+0x1a0>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002760:	4b5c      	ldr	r3, [pc, #368]	@ (80028d4 <MX_GPIO_Init+0x1a0>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	4a5b      	ldr	r2, [pc, #364]	@ (80028d4 <MX_GPIO_Init+0x1a0>)
 8002766:	f043 0320 	orr.w	r3, r3, #32
 800276a:	6193      	str	r3, [r2, #24]
 800276c:	4b59      	ldr	r3, [pc, #356]	@ (80028d4 <MX_GPIO_Init+0x1a0>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002778:	4b56      	ldr	r3, [pc, #344]	@ (80028d4 <MX_GPIO_Init+0x1a0>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	4a55      	ldr	r2, [pc, #340]	@ (80028d4 <MX_GPIO_Init+0x1a0>)
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	6193      	str	r3, [r2, #24]
 8002784:	4b53      	ldr	r3, [pc, #332]	@ (80028d4 <MX_GPIO_Init+0x1a0>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002790:	4b50      	ldr	r3, [pc, #320]	@ (80028d4 <MX_GPIO_Init+0x1a0>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	4a4f      	ldr	r2, [pc, #316]	@ (80028d4 <MX_GPIO_Init+0x1a0>)
 8002796:	f043 0308 	orr.w	r3, r3, #8
 800279a:	6193      	str	r3, [r2, #24]
 800279c:	4b4d      	ldr	r3, [pc, #308]	@ (80028d4 <MX_GPIO_Init+0x1a0>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 80027a8:	2201      	movs	r2, #1
 80027aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027ae:	484a      	ldr	r0, [pc, #296]	@ (80028d8 <MX_GPIO_Init+0x1a4>)
 80027b0:	f001 f873 	bl	800389a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA2_TEMP_DATA_Pin|PA3_TEMP_DATA_Pin, GPIO_PIN_SET);
 80027b4:	2201      	movs	r2, #1
 80027b6:	210c      	movs	r1, #12
 80027b8:	4848      	ldr	r0, [pc, #288]	@ (80028dc <MX_GPIO_Init+0x1a8>)
 80027ba:	f001 f86e 	bl	800389a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|PB6_LED1_Pin, GPIO_PIN_SET);
 80027be:	2201      	movs	r2, #1
 80027c0:	f244 0140 	movw	r1, #16448	@ 0x4040
 80027c4:	4846      	ldr	r0, [pc, #280]	@ (80028e0 <MX_GPIO_Init+0x1ac>)
 80027c6:	f001 f868 	bl	800389a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, PB7_LED1_Pin, GPIO_PIN_RESET);
 80027ca:	2200      	movs	r2, #0
 80027cc:	2180      	movs	r1, #128	@ 0x80
 80027ce:	4844      	ldr	r0, [pc, #272]	@ (80028e0 <MX_GPIO_Init+0x1ac>)
 80027d0:	f001 f863 	bl	800389a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, GPIO_PIN_RESET);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2120      	movs	r1, #32
 80027d8:	4841      	ldr	r0, [pc, #260]	@ (80028e0 <MX_GPIO_Init+0x1ac>)
 80027da:	f001 f85e 	bl	800389a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 80027de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e4:	2301      	movs	r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027e8:	2302      	movs	r3, #2
 80027ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ec:	2303      	movs	r3, #3
 80027ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 80027f0:	f107 0310 	add.w	r3, r7, #16
 80027f4:	4619      	mov	r1, r3
 80027f6:	4838      	ldr	r0, [pc, #224]	@ (80028d8 <MX_GPIO_Init+0x1a4>)
 80027f8:	f000 feb4 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_Pin;
 80027fc:	2301      	movs	r3, #1
 80027fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002804:	2301      	movs	r3, #1
 8002806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_SW_GPIO_Port, &GPIO_InitStruct);
 8002808:	f107 0310 	add.w	r3, r7, #16
 800280c:	4619      	mov	r1, r3
 800280e:	4833      	ldr	r0, [pc, #204]	@ (80028dc <MX_GPIO_Init+0x1a8>)
 8002810:	f000 fea8 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2_TEMP_DATA_Pin PA3_TEMP_DATA_Pin */
  GPIO_InitStruct.Pin = PA2_TEMP_DATA_Pin|PA3_TEMP_DATA_Pin;
 8002814:	230c      	movs	r3, #12
 8002816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002818:	2301      	movs	r3, #1
 800281a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800281c:	2301      	movs	r3, #1
 800281e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002820:	2303      	movs	r3, #3
 8002822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002824:	f107 0310 	add.w	r3, r7, #16
 8002828:	4619      	mov	r1, r3
 800282a:	482c      	ldr	r0, [pc, #176]	@ (80028dc <MX_GPIO_Init+0x1a8>)
 800282c:	f000 fe9a 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0_TEMP_SET_UP_Pin PB1_TEMP_SET_FIX_Pin PB2_TEMP_SET_DOWN_Pin */
  GPIO_InitStruct.Pin = PB0_TEMP_SET_UP_Pin|PB1_TEMP_SET_FIX_Pin|PB2_TEMP_SET_DOWN_Pin;
 8002830:	2307      	movs	r3, #7
 8002832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002834:	4b2b      	ldr	r3, [pc, #172]	@ (80028e4 <MX_GPIO_Init+0x1b0>)
 8002836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002838:	2301      	movs	r3, #1
 800283a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283c:	f107 0310 	add.w	r3, r7, #16
 8002840:	4619      	mov	r1, r3
 8002842:	4827      	ldr	r0, [pc, #156]	@ (80028e0 <MX_GPIO_Init+0x1ac>)
 8002844:	f000 fe8e 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12_START_SW_PIN_GPIO_Port_Pin */
  GPIO_InitStruct.Pin = PB12_START_SW_PIN_GPIO_Port_Pin;
 8002848:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800284c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002852:	2301      	movs	r3, #1
 8002854:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PB12_START_SW_PIN_GPIO_Port_GPIO_Port, &GPIO_InitStruct);
 8002856:	f107 0310 	add.w	r3, r7, #16
 800285a:	4619      	mov	r1, r3
 800285c:	4820      	ldr	r0, [pc, #128]	@ (80028e0 <MX_GPIO_Init+0x1ac>)
 800285e:	f000 fe81 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_RCLK_Pin PB6_LED1_Pin PB7_LED1_Pin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|PB6_LED1_Pin|PB7_LED1_Pin;
 8002862:	f244 03c0 	movw	r3, #16576	@ 0x40c0
 8002866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002868:	2301      	movs	r3, #1
 800286a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800286c:	2301      	movs	r3, #1
 800286e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002874:	f107 0310 	add.w	r3, r7, #16
 8002878:	4619      	mov	r1, r3
 800287a:	4819      	ldr	r0, [pc, #100]	@ (80028e0 <MX_GPIO_Init+0x1ac>)
 800287c:	f000 fe72 	bl	8003564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5_RELAY_ON_OFF_CTRL_Pin */
  GPIO_InitStruct.Pin = PB5_RELAY_ON_OFF_CTRL_Pin;
 8002880:	2320      	movs	r3, #32
 8002882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002884:	2301      	movs	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002888:	2302      	movs	r3, #2
 800288a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800288c:	2303      	movs	r3, #3
 800288e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002890:	f107 0310 	add.w	r3, r7, #16
 8002894:	4619      	mov	r1, r3
 8002896:	4812      	ldr	r0, [pc, #72]	@ (80028e0 <MX_GPIO_Init+0x1ac>)
 8002898:	f000 fe64 	bl	8003564 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 9, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2109      	movs	r1, #9
 80028a0:	2006      	movs	r0, #6
 80028a2:	f000 fe28 	bl	80034f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80028a6:	2006      	movs	r0, #6
 80028a8:	f000 fe41 	bl	800352e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 9, 0);
 80028ac:	2200      	movs	r2, #0
 80028ae:	2109      	movs	r1, #9
 80028b0:	2007      	movs	r0, #7
 80028b2:	f000 fe20 	bl	80034f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80028b6:	2007      	movs	r0, #7
 80028b8:	f000 fe39 	bl	800352e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 9, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	2109      	movs	r1, #9
 80028c0:	2008      	movs	r0, #8
 80028c2:	f000 fe18 	bl	80034f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80028c6:	2008      	movs	r0, #8
 80028c8:	f000 fe31 	bl	800352e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028cc:	bf00      	nop
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40011000 	.word	0x40011000
 80028dc:	40010800 	.word	0x40010800
 80028e0:	40010c00 	.word	0x40010c00
 80028e4:	10210000 	.word	0x10210000

080028e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028ec:	b672      	cpsid	i
}
 80028ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <Error_Handler+0x8>

080028f4 <opening>:
static uint8_t m_toggle = 0;
static uint8_t m_toggle_count = 0;

void printTemperNoUpdate(int temper);

void opening() {		// 온도값 나오기전 시작화면
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af02      	add	r7, sp, #8

	SSD1306_GotoXY(0, 0);
 80028fa:	2100      	movs	r1, #0
 80028fc:	2000      	movs	r0, #0
 80028fe:	f7ff f96d 	bl	8001bdc <SSD1306_GotoXY>
	SSD1306_Puts("Start!", &Font_11x18, 1);
 8002902:	2201      	movs	r2, #1
 8002904:	492c      	ldr	r1, [pc, #176]	@ (80029b8 <opening+0xc4>)
 8002906:	482d      	ldr	r0, [pc, #180]	@ (80029bc <opening+0xc8>)
 8002908:	f7ff f9fc 	bl	8001d04 <SSD1306_Puts>
	SSD1306_GotoXY(10, 20);
 800290c:	2114      	movs	r1, #20
 800290e:	200a      	movs	r0, #10
 8002910:	f7ff f964 	bl	8001bdc <SSD1306_GotoXY>
	SSD1306_Puts("  Pepper :)", &Font_11x18, 1);
 8002914:	2201      	movs	r2, #1
 8002916:	4928      	ldr	r1, [pc, #160]	@ (80029b8 <opening+0xc4>)
 8002918:	4829      	ldr	r0, [pc, #164]	@ (80029c0 <opening+0xcc>)
 800291a:	f7ff f9f3 	bl	8001d04 <SSD1306_Puts>
	SSD1306_GotoXY(22, 40);
 800291e:	2128      	movs	r1, #40	@ 0x28
 8002920:	2016      	movs	r0, #22
 8002922:	f7ff f95b 	bl	8001bdc <SSD1306_GotoXY>
	SSD1306_Puts("dryer!!)", &Font_11x18, 1);
 8002926:	2201      	movs	r2, #1
 8002928:	4923      	ldr	r1, [pc, #140]	@ (80029b8 <opening+0xc4>)
 800292a:	4826      	ldr	r0, [pc, #152]	@ (80029c4 <opening+0xd0>)
 800292c:	f7ff f9ea 	bl	8001d04 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // Start, Pepper, dryer를 한번에 갱신
 8002930:	f7ff f8b0 	bl	8001a94 <SSD1306_UpdateScreen>
	HAL_Delay(5000);
 8002934:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002938:	f000 fce2 	bl	8003300 <HAL_Delay>
	SSD1306_InvertDisplay(1);	// 디스플레이 반전(흑백)
 800293c:	2001      	movs	r0, #1
 800293e:	f7fe ff66 	bl	800180e <SSD1306_InvertDisplay>

	SSD1306_Clear();
 8002942:	f7ff fa04 	bl	8001d4e <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ojtubelog1, 128, 64, 1);	// 비트맵에 로고 그리기
 8002946:	2301      	movs	r3, #1
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	2340      	movs	r3, #64	@ 0x40
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	2380      	movs	r3, #128	@ 0x80
 8002950:	4a1d      	ldr	r2, [pc, #116]	@ (80029c8 <opening+0xd4>)
 8002952:	2100      	movs	r1, #0
 8002954:	2000      	movs	r0, #0
 8002956:	f7fe ff70 	bl	800183a <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();	// 갱신
 800295a:	f7ff f89b 	bl	8001a94 <SSD1306_UpdateScreen>
	HAL_Delay(300);
 800295e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002962:	f000 fccd 	bl	8003300 <HAL_Delay>

	SSD1306_Clear();
 8002966:	f7ff f9f2 	bl	8001d4e <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ojtubelog2, 128, 64, 1);	// 비트맵에 로고 그리기
 800296a:	2301      	movs	r3, #1
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	2340      	movs	r3, #64	@ 0x40
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2380      	movs	r3, #128	@ 0x80
 8002974:	4a15      	ldr	r2, [pc, #84]	@ (80029cc <opening+0xd8>)
 8002976:	2100      	movs	r1, #0
 8002978:	2000      	movs	r0, #0
 800297a:	f7fe ff5e 	bl	800183a <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();	// 갱신
 800297e:	f7ff f889 	bl	8001a94 <SSD1306_UpdateScreen>
	HAL_Delay(300);
 8002982:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002986:	f000 fcbb 	bl	8003300 <HAL_Delay>

	SSD1306_Clear();
 800298a:	f7ff f9e0 	bl	8001d4e <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, ojtubelog3, 128, 64, 1);	// 비트맵에 로고 그리기
 800298e:	2301      	movs	r3, #1
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	2340      	movs	r3, #64	@ 0x40
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	2380      	movs	r3, #128	@ 0x80
 8002998:	4a0d      	ldr	r2, [pc, #52]	@ (80029d0 <opening+0xdc>)
 800299a:	2100      	movs	r1, #0
 800299c:	2000      	movs	r0, #0
 800299e:	f7fe ff4c 	bl	800183a <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();	// 갱신
 80029a2:	f7ff f877 	bl	8001a94 <SSD1306_UpdateScreen>
	HAL_Delay(5000);
 80029a6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80029aa:	f000 fca9 	bl	8003300 <HAL_Delay>
	printfDefault();		// 세팅온도값이 나오는 화면
 80029ae:	f000 f851 	bl	8002a54 <printfDefault>
}
 80029b2:	bf00      	nop
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000000 	.word	0x20000000
 80029bc:	08008c08 	.word	0x08008c08
 80029c0:	08008c10 	.word	0x08008c10
 80029c4:	08008c1c 	.word	0x08008c1c
 80029c8:	080099b4 	.word	0x080099b4
 80029cc:	08009db4 	.word	0x08009db4
 80029d0:	0800a1b4 	.word	0x0800a1b4

080029d4 <toggleScreen>:

void toggleScreen() {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0

	if(m_toggle_count > 0) {
 80029d8:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <toggleScreen+0x58>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d019      	beq.n	8002a14 <toggleScreen+0x40>
		if (!m_toggle) {
 80029e0:	4b13      	ldr	r3, [pc, #76]	@ (8002a30 <toggleScreen+0x5c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d107      	bne.n	80029f8 <toggleScreen+0x24>
			SSD1306_Clear();
 80029e8:	f7ff f9b1 	bl	8001d4e <SSD1306_Clear>
			SSD1306_UpdateScreen();
 80029ec:	f7ff f852 	bl	8001a94 <SSD1306_UpdateScreen>
			m_toggle = 1;
 80029f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a30 <toggleScreen+0x5c>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e00d      	b.n	8002a14 <toggleScreen+0x40>
		} else {	// 화면이 켜져있으면
			printfBackground();
 80029f8:	f000 f886 	bl	8002b08 <printfBackground>
			printTemperNoUpdate(getFixedTemper());
 80029fc:	f7ff fc42 	bl	8002284 <getFixedTemper>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 f8a2 	bl	8002b4c <printTemperNoUpdate>
			printHeaterState(OFF_t);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f000 f8f1 	bl	8002bf0 <printHeaterState>
			m_toggle = 0;
 8002a0e:	4b08      	ldr	r3, [pc, #32]	@ (8002a30 <toggleScreen+0x5c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
		}
	}
	if (m_toggle_count > 0) {
 8002a14:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <toggleScreen+0x58>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <toggleScreen+0x54>
		m_toggle_count--;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	@ (8002a2c <toggleScreen+0x58>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	4b01      	ldr	r3, [pc, #4]	@ (8002a2c <toggleScreen+0x58>)
 8002a26:	701a      	strb	r2, [r3, #0]
	}
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	200007ed 	.word	0x200007ed
 8002a30:	200007ec 	.word	0x200007ec

08002a34 <startToggle>:

void startToggle() {		// 세팅 버튼 눌렀을때 2회 토글
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
	if (m_toggle_count == 0) {
 8002a38:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <startToggle+0x1c>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d102      	bne.n	8002a46 <startToggle+0x12>
		m_toggle_count = 4;		// On -> Off -> On -> Off (실제로 2번깜빡임)
 8002a40:	4b03      	ldr	r3, [pc, #12]	@ (8002a50 <startToggle+0x1c>)
 8002a42:	2204      	movs	r2, #4
 8002a44:	701a      	strb	r2, [r3, #0]
	}
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	200007ed 	.word	0x200007ed

08002a54 <printfDefault>:

void printfDefault() {		// 세팅온도값이 나오는 화면
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b09a      	sub	sp, #104	@ 0x68
 8002a58:	af00      	add	r7, sp, #0
	SSD1306_InvertDisplay(0);	//반전 해제
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7fe fed7 	bl	800180e <SSD1306_InvertDisplay>
	SSD1306_Clear();
 8002a60:	f7ff f975 	bl	8001d4e <SSD1306_Clear>
	SSD1306_GotoXY(1, 0);
 8002a64:	2100      	movs	r1, #0
 8002a66:	2001      	movs	r0, #1
 8002a68:	f7ff f8b8 	bl	8001bdc <SSD1306_GotoXY>
	SSD1306_Puts("Temper Work", &Font_11x18, 1);
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	4921      	ldr	r1, [pc, #132]	@ (8002af4 <printfDefault+0xa0>)
 8002a70:	4821      	ldr	r0, [pc, #132]	@ (8002af8 <printfDefault+0xa4>)
 8002a72:	f7ff f947 	bl	8001d04 <SSD1306_Puts>
	SSD1306_GotoXY(0, 15);
 8002a76:	210f      	movs	r1, #15
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7ff f8af 	bl	8001bdc <SSD1306_GotoXY>
	SSD1306_Puts("---------", &Font_11x18, 1);
 8002a7e:	2201      	movs	r2, #1
 8002a80:	491c      	ldr	r1, [pc, #112]	@ (8002af4 <printfDefault+0xa0>)
 8002a82:	481e      	ldr	r0, [pc, #120]	@ (8002afc <printfDefault+0xa8>)
 8002a84:	f7ff f93e 	bl	8001d04 <SSD1306_Puts>
	SSD1306_GotoXY(14, 38);
 8002a88:	2126      	movs	r1, #38	@ 0x26
 8002a8a:	200e      	movs	r0, #14
 8002a8c:	f7ff f8a6 	bl	8001bdc <SSD1306_GotoXY>

	char temper_str[100] = "";
 8002a90:	2300      	movs	r3, #0
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	f107 0308 	add.w	r3, r7, #8
 8002a98:	2260      	movs	r2, #96	@ 0x60
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f003 ff93 	bl	80069c8 <memset>
	itoa(DEFAULT_TEMPER, temper_str, 10);
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	220a      	movs	r2, #10
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	2019      	movs	r0, #25
 8002aaa:	f003 fa0b 	bl	8005ec4 <itoa>
	strcat(temper_str, ".0");		// 온도 뒤에 소수점 표시
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fb4d 	bl	8000150 <strlen>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	461a      	mov	r2, r3
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	4413      	add	r3, r2
 8002abe:	4a10      	ldr	r2, [pc, #64]	@ (8002b00 <printfDefault+0xac>)
 8002ac0:	8811      	ldrh	r1, [r2, #0]
 8002ac2:	7892      	ldrb	r2, [r2, #2]
 8002ac4:	8019      	strh	r1, [r3, #0]
 8002ac6:	709a      	strb	r2, [r3, #2]
	SSD1306_Puts(temper_str, &Font_11x18, 1);
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	2201      	movs	r2, #1
 8002acc:	4909      	ldr	r1, [pc, #36]	@ (8002af4 <printfDefault+0xa0>)
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff f918 	bl	8001d04 <SSD1306_Puts>
	SSD1306_GotoXY(81, 38);
 8002ad4:	2126      	movs	r1, #38	@ 0x26
 8002ad6:	2051      	movs	r0, #81	@ 0x51
 8002ad8:	f7ff f880 	bl	8001bdc <SSD1306_GotoXY>
	SSD1306_Puts("off", &Font_11x18, 1);
 8002adc:	2201      	movs	r2, #1
 8002ade:	4905      	ldr	r1, [pc, #20]	@ (8002af4 <printfDefault+0xa0>)
 8002ae0:	4808      	ldr	r0, [pc, #32]	@ (8002b04 <printfDefault+0xb0>)
 8002ae2:	f7ff f90f 	bl	8001d04 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002ae6:	f7fe ffd5 	bl	8001a94 <SSD1306_UpdateScreen>

}
 8002aea:	bf00      	nop
 8002aec:	3768      	adds	r7, #104	@ 0x68
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000000 	.word	0x20000000
 8002af8:	08008c28 	.word	0x08008c28
 8002afc:	08008c34 	.word	0x08008c34
 8002b00:	08008c40 	.word	0x08008c40
 8002b04:	08008c44 	.word	0x08008c44

08002b08 <printfBackground>:

void printfBackground() {	// 온도 값을 변경할때 틀은 유지
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
	SSD1306_InvertDisplay(0);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7fe fe7e 	bl	800180e <SSD1306_InvertDisplay>
	SSD1306_Clear();
 8002b12:	f7ff f91c 	bl	8001d4e <SSD1306_Clear>
	SSD1306_GotoXY(1, 0);
 8002b16:	2100      	movs	r1, #0
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f7ff f85f 	bl	8001bdc <SSD1306_GotoXY>
	SSD1306_Puts("Temper Work", &Font_11x18, 1);
 8002b1e:	2201      	movs	r2, #1
 8002b20:	4907      	ldr	r1, [pc, #28]	@ (8002b40 <printfBackground+0x38>)
 8002b22:	4808      	ldr	r0, [pc, #32]	@ (8002b44 <printfBackground+0x3c>)
 8002b24:	f7ff f8ee 	bl	8001d04 <SSD1306_Puts>
	SSD1306_GotoXY(0, 15);
 8002b28:	210f      	movs	r1, #15
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7ff f856 	bl	8001bdc <SSD1306_GotoXY>
	SSD1306_Puts("---------", &Font_11x18, 1);
 8002b30:	2201      	movs	r2, #1
 8002b32:	4903      	ldr	r1, [pc, #12]	@ (8002b40 <printfBackground+0x38>)
 8002b34:	4804      	ldr	r0, [pc, #16]	@ (8002b48 <printfBackground+0x40>)
 8002b36:	f7ff f8e5 	bl	8001d04 <SSD1306_Puts>
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000000 	.word	0x20000000
 8002b44:	08008c28 	.word	0x08008c28
 8002b48:	08008c34 	.word	0x08008c34

08002b4c <printTemperNoUpdate>:

void printTemperNoUpdate(int temper) {	// 위 틀은 유지하고 설정 온도값만 변경
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b09c      	sub	sp, #112	@ 0x70
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
	SSD1306_GotoXY(14, 38);
 8002b54:	2126      	movs	r1, #38	@ 0x26
 8002b56:	200e      	movs	r0, #14
 8002b58:	f7ff f840 	bl	8001bdc <SSD1306_GotoXY>
	char temper_str[100] = "";
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	f107 0310 	add.w	r3, r7, #16
 8002b64:	2260      	movs	r2, #96	@ 0x60
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f003 ff2d 	bl	80069c8 <memset>
	sprintf(temper_str, "%2d.0",temper);
 8002b6e:	f107 030c 	add.w	r3, r7, #12
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	4907      	ldr	r1, [pc, #28]	@ (8002b94 <printTemperNoUpdate+0x48>)
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 fe02 	bl	8006780 <siprintf>
	SSD1306_Puts(temper_str, &Font_11x18, 1);
 8002b7c:	f107 030c 	add.w	r3, r7, #12
 8002b80:	2201      	movs	r2, #1
 8002b82:	4905      	ldr	r1, [pc, #20]	@ (8002b98 <printTemperNoUpdate+0x4c>)
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff f8bd 	bl	8001d04 <SSD1306_Puts>
}
 8002b8a:	bf00      	nop
 8002b8c:	3770      	adds	r7, #112	@ 0x70
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	08008c48 	.word	0x08008c48
 8002b98:	20000000 	.word	0x20000000

08002b9c <printTemper>:

void printTemper(int temper) {		// 설정 온도 출력하는 부분
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b09c      	sub	sp, #112	@ 0x70
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	SSD1306_GotoXY(14, 38);
 8002ba4:	2126      	movs	r1, #38	@ 0x26
 8002ba6:	200e      	movs	r0, #14
 8002ba8:	f7ff f818 	bl	8001bdc <SSD1306_GotoXY>
	char temper_str[100] = "";
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	f107 0310 	add.w	r3, r7, #16
 8002bb4:	2260      	movs	r2, #96	@ 0x60
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 ff05 	bl	80069c8 <memset>
	sprintf(temper_str, "%2d.0",temper);
 8002bbe:	f107 030c 	add.w	r3, r7, #12
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4908      	ldr	r1, [pc, #32]	@ (8002be8 <printTemper+0x4c>)
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 fdda 	bl	8006780 <siprintf>
	SSD1306_Puts(temper_str, &Font_11x18, 1);
 8002bcc:	f107 030c 	add.w	r3, r7, #12
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	4906      	ldr	r1, [pc, #24]	@ (8002bec <printTemper+0x50>)
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff f895 	bl	8001d04 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002bda:	f7fe ff5b 	bl	8001a94 <SSD1306_UpdateScreen>
}
 8002bde:	bf00      	nop
 8002be0:	3770      	adds	r7, #112	@ 0x70
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	08008c48 	.word	0x08008c48
 8002bec:	20000000 	.word	0x20000000

08002bf0 <printHeaterState>:

void printHeaterState(ON_OFF_t onOff) {		// 히터 상태 표시
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
	SSD1306_GotoXY(81, 38);
 8002bfa:	2126      	movs	r1, #38	@ 0x26
 8002bfc:	2051      	movs	r0, #81	@ 0x51
 8002bfe:	f7fe ffed 	bl	8001bdc <SSD1306_GotoXY>
	if (onOff == ON_t) {
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <printHeaterState+0x24>
		SSD1306_Puts("On ", &Font_11x18, 1);
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4908      	ldr	r1, [pc, #32]	@ (8002c2c <printHeaterState+0x3c>)
 8002c0c:	4808      	ldr	r0, [pc, #32]	@ (8002c30 <printHeaterState+0x40>)
 8002c0e:	f7ff f879 	bl	8001d04 <SSD1306_Puts>
 8002c12:	e004      	b.n	8002c1e <printHeaterState+0x2e>
	} else {
		SSD1306_Puts("Off", &Font_11x18, 1);
 8002c14:	2201      	movs	r2, #1
 8002c16:	4905      	ldr	r1, [pc, #20]	@ (8002c2c <printHeaterState+0x3c>)
 8002c18:	4806      	ldr	r0, [pc, #24]	@ (8002c34 <printHeaterState+0x44>)
 8002c1a:	f7ff f873 	bl	8001d04 <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 8002c1e:	f7fe ff39 	bl	8001a94 <SSD1306_UpdateScreen>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	08008c50 	.word	0x08008c50
 8002c34:	08008c54 	.word	0x08008c54

08002c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c3e:	4b15      	ldr	r3, [pc, #84]	@ (8002c94 <HAL_MspInit+0x5c>)
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	4a14      	ldr	r2, [pc, #80]	@ (8002c94 <HAL_MspInit+0x5c>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6193      	str	r3, [r2, #24]
 8002c4a:	4b12      	ldr	r3, [pc, #72]	@ (8002c94 <HAL_MspInit+0x5c>)
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	4b0f      	ldr	r3, [pc, #60]	@ (8002c94 <HAL_MspInit+0x5c>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c94 <HAL_MspInit+0x5c>)
 8002c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c60:	61d3      	str	r3, [r2, #28]
 8002c62:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <HAL_MspInit+0x5c>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <HAL_MspInit+0x60>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	4a04      	ldr	r2, [pc, #16]	@ (8002c98 <HAL_MspInit+0x60>)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40010000 	.word	0x40010000

08002c9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 0310 	add.w	r3, r7, #16
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a16      	ldr	r2, [pc, #88]	@ (8002d10 <HAL_I2C_MspInit+0x74>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d124      	bne.n	8002d06 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbc:	4b15      	ldr	r3, [pc, #84]	@ (8002d14 <HAL_I2C_MspInit+0x78>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	4a14      	ldr	r2, [pc, #80]	@ (8002d14 <HAL_I2C_MspInit+0x78>)
 8002cc2:	f043 0308 	orr.w	r3, r3, #8
 8002cc6:	6193      	str	r3, [r2, #24]
 8002cc8:	4b12      	ldr	r3, [pc, #72]	@ (8002d14 <HAL_I2C_MspInit+0x78>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002cd4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002cd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cda:	2312      	movs	r3, #18
 8002cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce2:	f107 0310 	add.w	r3, r7, #16
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	480b      	ldr	r0, [pc, #44]	@ (8002d18 <HAL_I2C_MspInit+0x7c>)
 8002cea:	f000 fc3b 	bl	8003564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002cee:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <HAL_I2C_MspInit+0x78>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	4a08      	ldr	r2, [pc, #32]	@ (8002d14 <HAL_I2C_MspInit+0x78>)
 8002cf4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cf8:	61d3      	str	r3, [r2, #28]
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <HAL_I2C_MspInit+0x78>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d06:	bf00      	nop
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40005800 	.word	0x40005800
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40010c00 	.word	0x40010c00

08002d1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d24:	f107 0310 	add.w	r3, r7, #16
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a16      	ldr	r2, [pc, #88]	@ (8002d90 <HAL_SPI_MspInit+0x74>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d124      	bne.n	8002d86 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d3c:	4b15      	ldr	r3, [pc, #84]	@ (8002d94 <HAL_SPI_MspInit+0x78>)
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	4a14      	ldr	r2, [pc, #80]	@ (8002d94 <HAL_SPI_MspInit+0x78>)
 8002d42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d46:	61d3      	str	r3, [r2, #28]
 8002d48:	4b12      	ldr	r3, [pc, #72]	@ (8002d94 <HAL_SPI_MspInit+0x78>)
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d54:	4b0f      	ldr	r3, [pc, #60]	@ (8002d94 <HAL_SPI_MspInit+0x78>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	4a0e      	ldr	r2, [pc, #56]	@ (8002d94 <HAL_SPI_MspInit+0x78>)
 8002d5a:	f043 0308 	orr.w	r3, r3, #8
 8002d5e:	6193      	str	r3, [r2, #24]
 8002d60:	4b0c      	ldr	r3, [pc, #48]	@ (8002d94 <HAL_SPI_MspInit+0x78>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = FND_SCLK_Pin|FND_DIO_Pin;
 8002d6c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002d70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d76:	2303      	movs	r3, #3
 8002d78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7a:	f107 0310 	add.w	r3, r7, #16
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4805      	ldr	r0, [pc, #20]	@ (8002d98 <HAL_SPI_MspInit+0x7c>)
 8002d82:	f000 fbef 	bl	8003564 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002d86:	bf00      	nop
 8002d88:	3720      	adds	r7, #32
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40003800 	.word	0x40003800
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40010c00 	.word	0x40010c00

08002d9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dac:	d114      	bne.n	8002dd8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dae:	4b19      	ldr	r3, [pc, #100]	@ (8002e14 <HAL_TIM_Base_MspInit+0x78>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	4a18      	ldr	r2, [pc, #96]	@ (8002e14 <HAL_TIM_Base_MspInit+0x78>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	61d3      	str	r3, [r2, #28]
 8002dba:	4b16      	ldr	r3, [pc, #88]	@ (8002e14 <HAL_TIM_Base_MspInit+0x78>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2100      	movs	r1, #0
 8002dca:	201c      	movs	r0, #28
 8002dcc:	f000 fb93 	bl	80034f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002dd0:	201c      	movs	r0, #28
 8002dd2:	f000 fbac 	bl	800352e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002dd6:	e018      	b.n	8002e0a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0e      	ldr	r2, [pc, #56]	@ (8002e18 <HAL_TIM_Base_MspInit+0x7c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d113      	bne.n	8002e0a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002de2:	4b0c      	ldr	r3, [pc, #48]	@ (8002e14 <HAL_TIM_Base_MspInit+0x78>)
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	4a0b      	ldr	r2, [pc, #44]	@ (8002e14 <HAL_TIM_Base_MspInit+0x78>)
 8002de8:	f043 0302 	orr.w	r3, r3, #2
 8002dec:	61d3      	str	r3, [r2, #28]
 8002dee:	4b09      	ldr	r3, [pc, #36]	@ (8002e14 <HAL_TIM_Base_MspInit+0x78>)
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	210a      	movs	r1, #10
 8002dfe:	201d      	movs	r0, #29
 8002e00:	f000 fb79 	bl	80034f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e04:	201d      	movs	r0, #29
 8002e06:	f000 fb92 	bl	800352e <HAL_NVIC_EnableIRQ>
}
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40000400 	.word	0x40000400

08002e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	f107 0310 	add.w	r3, r7, #16
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea8 <HAL_UART_MspInit+0x8c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d131      	bne.n	8002ea0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <HAL_UART_MspInit+0x90>)
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	4a1a      	ldr	r2, [pc, #104]	@ (8002eac <HAL_UART_MspInit+0x90>)
 8002e42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e46:	6193      	str	r3, [r2, #24]
 8002e48:	4b18      	ldr	r3, [pc, #96]	@ (8002eac <HAL_UART_MspInit+0x90>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e54:	4b15      	ldr	r3, [pc, #84]	@ (8002eac <HAL_UART_MspInit+0x90>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	4a14      	ldr	r2, [pc, #80]	@ (8002eac <HAL_UART_MspInit+0x90>)
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	6193      	str	r3, [r2, #24]
 8002e60:	4b12      	ldr	r3, [pc, #72]	@ (8002eac <HAL_UART_MspInit+0x90>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e76:	2303      	movs	r3, #3
 8002e78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7a:	f107 0310 	add.w	r3, r7, #16
 8002e7e:	4619      	mov	r1, r3
 8002e80:	480b      	ldr	r0, [pc, #44]	@ (8002eb0 <HAL_UART_MspInit+0x94>)
 8002e82:	f000 fb6f 	bl	8003564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e94:	f107 0310 	add.w	r3, r7, #16
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4805      	ldr	r0, [pc, #20]	@ (8002eb0 <HAL_UART_MspInit+0x94>)
 8002e9c:	f000 fb62 	bl	8003564 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ea0:	bf00      	nop
 8002ea2:	3720      	adds	r7, #32
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40013800 	.word	0x40013800
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40010800 	.word	0x40010800

08002eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002eb8:	bf00      	nop
 8002eba:	e7fd      	b.n	8002eb8 <NMI_Handler+0x4>

08002ebc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <HardFault_Handler+0x4>

08002ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <MemManage_Handler+0x4>

08002ecc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <BusFault_Handler+0x4>

08002ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed8:	bf00      	nop
 8002eda:	e7fd      	b.n	8002ed8 <UsageFault_Handler+0x4>

08002edc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f04:	f000 f9e0 	bl	80032c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)	// 디바운스 처리(온도 Up)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_TEMP_SET_UP_Pin);
 8002f10:	2001      	movs	r0, #1
 8002f12:	f000 fcdb 	bl	80038cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	if ((HAL_GetTick() - m_button_before_time) > BUTTON_GAP) {		// 버튼 누른 시간간격이 최소 0.2초 이상이여야함
 8002f16:	f000 f9e9 	bl	80032ec <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f48 <EXTI0_IRQHandler+0x3c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2bc8      	cmp	r3, #200	@ 0xc8
 8002f24:	d90e      	bls.n	8002f44 <EXTI0_IRQHandler+0x38>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8002f26:	2101      	movs	r1, #1
 8002f28:	4808      	ldr	r0, [pc, #32]	@ (8002f4c <EXTI0_IRQHandler+0x40>)
 8002f2a:	f000 fc9f 	bl	800386c <HAL_GPIO_ReadPin>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d107      	bne.n	8002f44 <EXTI0_IRQHandler+0x38>
		g_f_sw_up = 1;		// 플래그 :사용자가 온도 UP 버튼을 누름
 8002f34:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <EXTI0_IRQHandler+0x44>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
		m_button_before_time = HAL_GetTick();
 8002f3a:	f000 f9d7 	bl	80032ec <HAL_GetTick>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4a01      	ldr	r2, [pc, #4]	@ (8002f48 <EXTI0_IRQHandler+0x3c>)
 8002f42:	6013      	str	r3, [r2, #0]
	}
	}
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002f44:	bf00      	nop
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	200007f0 	.word	0x200007f0
 8002f4c:	40010c00 	.word	0x40010c00
 8002f50:	2000065a 	.word	0x2000065a

08002f54 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)	// 디바운스 처리(온도 세팅)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB1_TEMP_SET_FIX_Pin);
 8002f58:	2002      	movs	r0, #2
 8002f5a:	f000 fcb7 	bl	80038cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	if ((HAL_GetTick() - m_button_before_time) > BUTTON_GAP) {
 8002f5e:	f000 f9c5 	bl	80032ec <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	4b0a      	ldr	r3, [pc, #40]	@ (8002f90 <EXTI1_IRQHandler+0x3c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2bc8      	cmp	r3, #200	@ 0xc8
 8002f6c:	d90e      	bls.n	8002f8c <EXTI1_IRQHandler+0x38>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET) {
 8002f6e:	2102      	movs	r1, #2
 8002f70:	4808      	ldr	r0, [pc, #32]	@ (8002f94 <EXTI1_IRQHandler+0x40>)
 8002f72:	f000 fc7b 	bl	800386c <HAL_GPIO_ReadPin>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d107      	bne.n	8002f8c <EXTI1_IRQHandler+0x38>
			g_f_sw_fix = 1;		// 플래그 : 사용자가 온도 설정 버튼을 누름
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <EXTI1_IRQHandler+0x44>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	701a      	strb	r2, [r3, #0]
			m_button_before_time = HAL_GetTick();
 8002f82:	f000 f9b3 	bl	80032ec <HAL_GetTick>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4a01      	ldr	r2, [pc, #4]	@ (8002f90 <EXTI1_IRQHandler+0x3c>)
 8002f8a:	6013      	str	r3, [r2, #0]
		}

	}
  /* USER CODE END EXTI1_IRQn 1 */
}
 8002f8c:	bf00      	nop
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	200007f0 	.word	0x200007f0
 8002f94:	40010c00 	.word	0x40010c00
 8002f98:	2000065c 	.word	0x2000065c

08002f9c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)	// 디바운스 처리(온도 Down)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB2_TEMP_SET_DOWN_Pin);
 8002fa0:	2004      	movs	r0, #4
 8002fa2:	f000 fc93 	bl	80038cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  if((HAL_GetTick() - m_button_before_time) > BUTTON_GAP) {
 8002fa6:	f000 f9a1 	bl	80032ec <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd8 <EXTI2_IRQHandler+0x3c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2bc8      	cmp	r3, #200	@ 0xc8
 8002fb4:	d90e      	bls.n	8002fd4 <EXTI2_IRQHandler+0x38>
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) {
 8002fb6:	2104      	movs	r1, #4
 8002fb8:	4808      	ldr	r0, [pc, #32]	@ (8002fdc <EXTI2_IRQHandler+0x40>)
 8002fba:	f000 fc57 	bl	800386c <HAL_GPIO_ReadPin>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d107      	bne.n	8002fd4 <EXTI2_IRQHandler+0x38>
		  	g_f_sw_down = 1;		// 플래그 : 사용자가 온도 DOWN 버튼을 누름
 8002fc4:	4b06      	ldr	r3, [pc, #24]	@ (8002fe0 <EXTI2_IRQHandler+0x44>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]
		  	m_button_before_time = HAL_GetTick();
 8002fca:	f000 f98f 	bl	80032ec <HAL_GetTick>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4a01      	ldr	r2, [pc, #4]	@ (8002fd8 <EXTI2_IRQHandler+0x3c>)
 8002fd2:	6013      	str	r3, [r2, #0]
	  }
  }
  /* USER CODE END EXTI2_IRQn 1 */
}
 8002fd4:	bf00      	nop
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	200007f0 	.word	0x200007f0
 8002fdc:	40010c00 	.word	0x40010c00
 8002fe0:	2000065b 	.word	0x2000065b

08002fe4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fe8:	4802      	ldr	r0, [pc, #8]	@ (8002ff4 <TIM2_IRQHandler+0x10>)
 8002fea:	f002 f9d7 	bl	800539c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	2000070c 	.word	0x2000070c

08002ff8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	if (m_power_sw_timer > POWER_SW_CHECK_TIME) {
 8002ffc:	4b22      	ldr	r3, [pc, #136]	@ (8003088 <TIM3_IRQHandler+0x90>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b64      	cmp	r3, #100	@ 0x64
 8003002:	d90e      	bls.n	8003022 <TIM3_IRQHandler+0x2a>
		if (getSwState() == ON_t) {
 8003004:	f7fe ff7c 	bl	8001f00 <getSwState>
 8003008:	4603      	mov	r3, r0
 800300a:	2b01      	cmp	r3, #1
 800300c:	d103      	bne.n	8003016 <TIM3_IRQHandler+0x1e>
			led1OnOff(ON_t);
 800300e:	2001      	movs	r0, #1
 8003010:	f7ff f972 	bl	80022f8 <led1OnOff>
 8003014:	e002      	b.n	800301c <TIM3_IRQHandler+0x24>
		} else {
			led1OnOff(OFF_t);
 8003016:	2000      	movs	r0, #0
 8003018:	f7ff f96e 	bl	80022f8 <led1OnOff>
		}
		m_power_sw_timer = 0;
 800301c:	4b1a      	ldr	r3, [pc, #104]	@ (8003088 <TIM3_IRQHandler+0x90>)
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
	}

	if (m_toggle_timer > TOGGLE_TIME) {
 8003022:	4b1a      	ldr	r3, [pc, #104]	@ (800308c <TIM3_IRQHandler+0x94>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f242 7210 	movw	r2, #10000	@ 0x2710
 800302a:	4293      	cmp	r3, r2
 800302c:	d904      	bls.n	8003038 <TIM3_IRQHandler+0x40>
		toggleScreen();
 800302e:	f7ff fcd1 	bl	80029d4 <toggleScreen>
		m_toggle_timer = 0;
 8003032:	4b16      	ldr	r3, [pc, #88]	@ (800308c <TIM3_IRQHandler+0x94>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
	}

	m_toggle_timer++;
 8003038:	4b14      	ldr	r3, [pc, #80]	@ (800308c <TIM3_IRQHandler+0x94>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	4a13      	ldr	r2, [pc, #76]	@ (800308c <TIM3_IRQHandler+0x94>)
 8003040:	6013      	str	r3, [r2, #0]
	m_power_sw_timer++;
 8003042:	4b11      	ldr	r3, [pc, #68]	@ (8003088 <TIM3_IRQHandler+0x90>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3301      	adds	r3, #1
 8003048:	4a0f      	ldr	r2, [pc, #60]	@ (8003088 <TIM3_IRQHandler+0x90>)
 800304a:	6013      	str	r3, [r2, #0]
	if (isTemperSensorInit() && !isBusy()) {
 800304c:	f7fd ff04 	bl	8000e58 <isTemperSensorInit>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d013      	beq.n	800307e <TIM3_IRQHandler+0x86>
 8003056:	f7fd ff09 	bl	8000e6c <isBusy>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10e      	bne.n	800307e <TIM3_IRQHandler+0x86>
		digit4_temper((int)(getCurrentTemper() *10));
 8003060:	f7fe f9b2 	bl	80013c8 <getCurrentTemper>
 8003064:	4603      	mov	r3, r0
 8003066:	490a      	ldr	r1, [pc, #40]	@ (8003090 <TIM3_IRQHandler+0x98>)
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd f879 	bl	8000160 <__aeabi_fmul>
 800306e:	4603      	mov	r3, r0
 8003070:	4618      	mov	r0, r3
 8003072:	f7fd fecb 	bl	8000e0c <__aeabi_f2iz>
 8003076:	4603      	mov	r3, r0
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe ffef 	bl	800205c <digit4_temper>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800307e:	4805      	ldr	r0, [pc, #20]	@ (8003094 <TIM3_IRQHandler+0x9c>)
 8003080:	f002 f98c 	bl	800539c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}
 8003088:	200007f4 	.word	0x200007f4
 800308c:	200007f8 	.word	0x200007f8
 8003090:	41200000 	.word	0x41200000
 8003094:	20000754 	.word	0x20000754

08003098 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return 1;
 800309c:	2301      	movs	r3, #1
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <_kill>:

int _kill(int pid, int sig)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030b0:	f003 fc96 	bl	80069e0 <__errno>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2216      	movs	r2, #22
 80030b8:	601a      	str	r2, [r3, #0]
  return -1;
 80030ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <_exit>:

void _exit (int status)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030ce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ffe7 	bl	80030a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030d8:	bf00      	nop
 80030da:	e7fd      	b.n	80030d8 <_exit+0x12>

080030dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	e00a      	b.n	8003104 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030ee:	f3af 8000 	nop.w
 80030f2:	4601      	mov	r1, r0
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	60ba      	str	r2, [r7, #8]
 80030fa:	b2ca      	uxtb	r2, r1
 80030fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	3301      	adds	r3, #1
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	429a      	cmp	r2, r3
 800310a:	dbf0      	blt.n	80030ee <_read+0x12>
  }

  return len;
 800310c:	687b      	ldr	r3, [r7, #4]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800311e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800313c:	605a      	str	r2, [r3, #4]
  return 0;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <_isatty>:

int _isatty(int file)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003152:	2301      	movs	r3, #1
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800315e:	b480      	push	{r7}
 8003160:	b085      	sub	sp, #20
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
	...

08003178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003180:	4a14      	ldr	r2, [pc, #80]	@ (80031d4 <_sbrk+0x5c>)
 8003182:	4b15      	ldr	r3, [pc, #84]	@ (80031d8 <_sbrk+0x60>)
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800318c:	4b13      	ldr	r3, [pc, #76]	@ (80031dc <_sbrk+0x64>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003194:	4b11      	ldr	r3, [pc, #68]	@ (80031dc <_sbrk+0x64>)
 8003196:	4a12      	ldr	r2, [pc, #72]	@ (80031e0 <_sbrk+0x68>)
 8003198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800319a:	4b10      	ldr	r3, [pc, #64]	@ (80031dc <_sbrk+0x64>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d207      	bcs.n	80031b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031a8:	f003 fc1a 	bl	80069e0 <__errno>
 80031ac:	4603      	mov	r3, r0
 80031ae:	220c      	movs	r2, #12
 80031b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031b6:	e009      	b.n	80031cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031b8:	4b08      	ldr	r3, [pc, #32]	@ (80031dc <_sbrk+0x64>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031be:	4b07      	ldr	r3, [pc, #28]	@ (80031dc <_sbrk+0x64>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	4a05      	ldr	r2, [pc, #20]	@ (80031dc <_sbrk+0x64>)
 80031c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ca:	68fb      	ldr	r3, [r7, #12]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20005000 	.word	0x20005000
 80031d8:	00000400 	.word	0x00000400
 80031dc:	200007fc 	.word	0x200007fc
 80031e0:	20000950 	.word	0x20000950

080031e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031f0:	f7ff fff8 	bl	80031e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031f4:	480b      	ldr	r0, [pc, #44]	@ (8003224 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80031f6:	490c      	ldr	r1, [pc, #48]	@ (8003228 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80031f8:	4a0c      	ldr	r2, [pc, #48]	@ (800322c <LoopFillZerobss+0x16>)
  movs r3, #0
 80031fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031fc:	e002      	b.n	8003204 <LoopCopyDataInit>

080031fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003202:	3304      	adds	r3, #4

08003204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003208:	d3f9      	bcc.n	80031fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800320a:	4a09      	ldr	r2, [pc, #36]	@ (8003230 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800320c:	4c09      	ldr	r4, [pc, #36]	@ (8003234 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800320e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003210:	e001      	b.n	8003216 <LoopFillZerobss>

08003212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003214:	3204      	adds	r2, #4

08003216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003218:	d3fb      	bcc.n	8003212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800321a:	f003 fbe7 	bl	80069ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800321e:	f7ff f8b7 	bl	8002390 <main>
  bx lr
 8003222:	4770      	bx	lr
  ldr r0, =_sdata
 8003224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003228:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800322c:	0800a988 	.word	0x0800a988
  ldr r2, =_sbss
 8003230:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003234:	20000950 	.word	0x20000950

08003238 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003238:	e7fe      	b.n	8003238 <ADC1_2_IRQHandler>
	...

0800323c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003240:	4b08      	ldr	r3, [pc, #32]	@ (8003264 <HAL_Init+0x28>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a07      	ldr	r2, [pc, #28]	@ (8003264 <HAL_Init+0x28>)
 8003246:	f043 0310 	orr.w	r3, r3, #16
 800324a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800324c:	2003      	movs	r0, #3
 800324e:	f000 f947 	bl	80034e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003252:	200f      	movs	r0, #15
 8003254:	f000 f808 	bl	8003268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003258:	f7ff fcee 	bl	8002c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40022000 	.word	0x40022000

08003268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003270:	4b12      	ldr	r3, [pc, #72]	@ (80032bc <HAL_InitTick+0x54>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	4b12      	ldr	r3, [pc, #72]	@ (80032c0 <HAL_InitTick+0x58>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	4619      	mov	r1, r3
 800327a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800327e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003282:	fbb2 f3f3 	udiv	r3, r2, r3
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f95f 	bl	800354a <HAL_SYSTICK_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e00e      	b.n	80032b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b0f      	cmp	r3, #15
 800329a:	d80a      	bhi.n	80032b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800329c:	2200      	movs	r2, #0
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032a4:	f000 f927 	bl	80034f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032a8:	4a06      	ldr	r2, [pc, #24]	@ (80032c4 <HAL_InitTick+0x5c>)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	e000      	b.n	80032b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20000010 	.word	0x20000010
 80032c0:	20000018 	.word	0x20000018
 80032c4:	20000014 	.word	0x20000014

080032c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032cc:	4b05      	ldr	r3, [pc, #20]	@ (80032e4 <HAL_IncTick+0x1c>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <HAL_IncTick+0x20>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4413      	add	r3, r2
 80032d8:	4a03      	ldr	r2, [pc, #12]	@ (80032e8 <HAL_IncTick+0x20>)
 80032da:	6013      	str	r3, [r2, #0]
}
 80032dc:	bf00      	nop
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr
 80032e4:	20000018 	.word	0x20000018
 80032e8:	20000800 	.word	0x20000800

080032ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  return uwTick;
 80032f0:	4b02      	ldr	r3, [pc, #8]	@ (80032fc <HAL_GetTick+0x10>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	20000800 	.word	0x20000800

08003300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7ff fff0 	bl	80032ec <HAL_GetTick>
 800330c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003318:	d005      	beq.n	8003326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800331a:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <HAL_Delay+0x44>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003326:	bf00      	nop
 8003328:	f7ff ffe0 	bl	80032ec <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	429a      	cmp	r2, r3
 8003336:	d8f7      	bhi.n	8003328 <HAL_Delay+0x28>
  {
  }
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000018 	.word	0x20000018

08003348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003358:	4b0c      	ldr	r3, [pc, #48]	@ (800338c <__NVIC_SetPriorityGrouping+0x44>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003364:	4013      	ands	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003370:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800337a:	4a04      	ldr	r2, [pc, #16]	@ (800338c <__NVIC_SetPriorityGrouping+0x44>)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	60d3      	str	r3, [r2, #12]
}
 8003380:	bf00      	nop
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	e000ed00 	.word	0xe000ed00

08003390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003394:	4b04      	ldr	r3, [pc, #16]	@ (80033a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 0307 	and.w	r3, r3, #7
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	db0b      	blt.n	80033d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	f003 021f 	and.w	r2, r3, #31
 80033c4:	4906      	ldr	r1, [pc, #24]	@ (80033e0 <__NVIC_EnableIRQ+0x34>)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	2001      	movs	r0, #1
 80033ce:	fa00 f202 	lsl.w	r2, r0, r2
 80033d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr
 80033e0:	e000e100 	.word	0xe000e100

080033e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	db0a      	blt.n	800340e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	490c      	ldr	r1, [pc, #48]	@ (8003430 <__NVIC_SetPriority+0x4c>)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	0112      	lsls	r2, r2, #4
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	440b      	add	r3, r1
 8003408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800340c:	e00a      	b.n	8003424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4908      	ldr	r1, [pc, #32]	@ (8003434 <__NVIC_SetPriority+0x50>)
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	3b04      	subs	r3, #4
 800341c:	0112      	lsls	r2, r2, #4
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	440b      	add	r3, r1
 8003422:	761a      	strb	r2, [r3, #24]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000e100 	.word	0xe000e100
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003438:	b480      	push	{r7}
 800343a:	b089      	sub	sp, #36	@ 0x24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f1c3 0307 	rsb	r3, r3, #7
 8003452:	2b04      	cmp	r3, #4
 8003454:	bf28      	it	cs
 8003456:	2304      	movcs	r3, #4
 8003458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3304      	adds	r3, #4
 800345e:	2b06      	cmp	r3, #6
 8003460:	d902      	bls.n	8003468 <NVIC_EncodePriority+0x30>
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3b03      	subs	r3, #3
 8003466:	e000      	b.n	800346a <NVIC_EncodePriority+0x32>
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43da      	mvns	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	401a      	ands	r2, r3
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003480:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	43d9      	mvns	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	4313      	orrs	r3, r2
         );
}
 8003492:	4618      	mov	r0, r3
 8003494:	3724      	adds	r7, #36	@ 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034ac:	d301      	bcc.n	80034b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ae:	2301      	movs	r3, #1
 80034b0:	e00f      	b.n	80034d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b2:	4a0a      	ldr	r2, [pc, #40]	@ (80034dc <SysTick_Config+0x40>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ba:	210f      	movs	r1, #15
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034c0:	f7ff ff90 	bl	80033e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c4:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <SysTick_Config+0x40>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ca:	4b04      	ldr	r3, [pc, #16]	@ (80034dc <SysTick_Config+0x40>)
 80034cc:	2207      	movs	r2, #7
 80034ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	e000e010 	.word	0xe000e010

080034e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ff2d 	bl	8003348 <__NVIC_SetPriorityGrouping>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003508:	f7ff ff42 	bl	8003390 <__NVIC_GetPriorityGrouping>
 800350c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	6978      	ldr	r0, [r7, #20]
 8003514:	f7ff ff90 	bl	8003438 <NVIC_EncodePriority>
 8003518:	4602      	mov	r2, r0
 800351a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff5f 	bl	80033e4 <__NVIC_SetPriority>
}
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ff35 	bl	80033ac <__NVIC_EnableIRQ>
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ffa2 	bl	800349c <SysTick_Config>
 8003558:	4603      	mov	r3, r0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003564:	b480      	push	{r7}
 8003566:	b08b      	sub	sp, #44	@ 0x2c
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003572:	2300      	movs	r3, #0
 8003574:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003576:	e169      	b.n	800384c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003578:	2201      	movs	r2, #1
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	429a      	cmp	r2, r3
 8003592:	f040 8158 	bne.w	8003846 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4a9a      	ldr	r2, [pc, #616]	@ (8003804 <HAL_GPIO_Init+0x2a0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d05e      	beq.n	800365e <HAL_GPIO_Init+0xfa>
 80035a0:	4a98      	ldr	r2, [pc, #608]	@ (8003804 <HAL_GPIO_Init+0x2a0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d875      	bhi.n	8003692 <HAL_GPIO_Init+0x12e>
 80035a6:	4a98      	ldr	r2, [pc, #608]	@ (8003808 <HAL_GPIO_Init+0x2a4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d058      	beq.n	800365e <HAL_GPIO_Init+0xfa>
 80035ac:	4a96      	ldr	r2, [pc, #600]	@ (8003808 <HAL_GPIO_Init+0x2a4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d86f      	bhi.n	8003692 <HAL_GPIO_Init+0x12e>
 80035b2:	4a96      	ldr	r2, [pc, #600]	@ (800380c <HAL_GPIO_Init+0x2a8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d052      	beq.n	800365e <HAL_GPIO_Init+0xfa>
 80035b8:	4a94      	ldr	r2, [pc, #592]	@ (800380c <HAL_GPIO_Init+0x2a8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d869      	bhi.n	8003692 <HAL_GPIO_Init+0x12e>
 80035be:	4a94      	ldr	r2, [pc, #592]	@ (8003810 <HAL_GPIO_Init+0x2ac>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d04c      	beq.n	800365e <HAL_GPIO_Init+0xfa>
 80035c4:	4a92      	ldr	r2, [pc, #584]	@ (8003810 <HAL_GPIO_Init+0x2ac>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d863      	bhi.n	8003692 <HAL_GPIO_Init+0x12e>
 80035ca:	4a92      	ldr	r2, [pc, #584]	@ (8003814 <HAL_GPIO_Init+0x2b0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d046      	beq.n	800365e <HAL_GPIO_Init+0xfa>
 80035d0:	4a90      	ldr	r2, [pc, #576]	@ (8003814 <HAL_GPIO_Init+0x2b0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d85d      	bhi.n	8003692 <HAL_GPIO_Init+0x12e>
 80035d6:	2b12      	cmp	r3, #18
 80035d8:	d82a      	bhi.n	8003630 <HAL_GPIO_Init+0xcc>
 80035da:	2b12      	cmp	r3, #18
 80035dc:	d859      	bhi.n	8003692 <HAL_GPIO_Init+0x12e>
 80035de:	a201      	add	r2, pc, #4	@ (adr r2, 80035e4 <HAL_GPIO_Init+0x80>)
 80035e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e4:	0800365f 	.word	0x0800365f
 80035e8:	08003639 	.word	0x08003639
 80035ec:	0800364b 	.word	0x0800364b
 80035f0:	0800368d 	.word	0x0800368d
 80035f4:	08003693 	.word	0x08003693
 80035f8:	08003693 	.word	0x08003693
 80035fc:	08003693 	.word	0x08003693
 8003600:	08003693 	.word	0x08003693
 8003604:	08003693 	.word	0x08003693
 8003608:	08003693 	.word	0x08003693
 800360c:	08003693 	.word	0x08003693
 8003610:	08003693 	.word	0x08003693
 8003614:	08003693 	.word	0x08003693
 8003618:	08003693 	.word	0x08003693
 800361c:	08003693 	.word	0x08003693
 8003620:	08003693 	.word	0x08003693
 8003624:	08003693 	.word	0x08003693
 8003628:	08003641 	.word	0x08003641
 800362c:	08003655 	.word	0x08003655
 8003630:	4a79      	ldr	r2, [pc, #484]	@ (8003818 <HAL_GPIO_Init+0x2b4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003636:	e02c      	b.n	8003692 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	623b      	str	r3, [r7, #32]
          break;
 800363e:	e029      	b.n	8003694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	3304      	adds	r3, #4
 8003646:	623b      	str	r3, [r7, #32]
          break;
 8003648:	e024      	b.n	8003694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	3308      	adds	r3, #8
 8003650:	623b      	str	r3, [r7, #32]
          break;
 8003652:	e01f      	b.n	8003694 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	330c      	adds	r3, #12
 800365a:	623b      	str	r3, [r7, #32]
          break;
 800365c:	e01a      	b.n	8003694 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d102      	bne.n	800366c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003666:	2304      	movs	r3, #4
 8003668:	623b      	str	r3, [r7, #32]
          break;
 800366a:	e013      	b.n	8003694 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d105      	bne.n	8003680 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003674:	2308      	movs	r3, #8
 8003676:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	611a      	str	r2, [r3, #16]
          break;
 800367e:	e009      	b.n	8003694 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003680:	2308      	movs	r3, #8
 8003682:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	615a      	str	r2, [r3, #20]
          break;
 800368a:	e003      	b.n	8003694 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800368c:	2300      	movs	r3, #0
 800368e:	623b      	str	r3, [r7, #32]
          break;
 8003690:	e000      	b.n	8003694 <HAL_GPIO_Init+0x130>
          break;
 8003692:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2bff      	cmp	r3, #255	@ 0xff
 8003698:	d801      	bhi.n	800369e <HAL_GPIO_Init+0x13a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	e001      	b.n	80036a2 <HAL_GPIO_Init+0x13e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3304      	adds	r3, #4
 80036a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2bff      	cmp	r3, #255	@ 0xff
 80036a8:	d802      	bhi.n	80036b0 <HAL_GPIO_Init+0x14c>
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	e002      	b.n	80036b6 <HAL_GPIO_Init+0x152>
 80036b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b2:	3b08      	subs	r3, #8
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	210f      	movs	r1, #15
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	fa01 f303 	lsl.w	r3, r1, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	401a      	ands	r2, r3
 80036c8:	6a39      	ldr	r1, [r7, #32]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	fa01 f303 	lsl.w	r3, r1, r3
 80036d0:	431a      	orrs	r2, r3
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80b1 	beq.w	8003846 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036e4:	4b4d      	ldr	r3, [pc, #308]	@ (800381c <HAL_GPIO_Init+0x2b8>)
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	4a4c      	ldr	r2, [pc, #304]	@ (800381c <HAL_GPIO_Init+0x2b8>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6193      	str	r3, [r2, #24]
 80036f0:	4b4a      	ldr	r3, [pc, #296]	@ (800381c <HAL_GPIO_Init+0x2b8>)
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036fc:	4a48      	ldr	r2, [pc, #288]	@ (8003820 <HAL_GPIO_Init+0x2bc>)
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	3302      	adds	r3, #2
 8003704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003708:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800370a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	220f      	movs	r2, #15
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4013      	ands	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a40      	ldr	r2, [pc, #256]	@ (8003824 <HAL_GPIO_Init+0x2c0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d013      	beq.n	8003750 <HAL_GPIO_Init+0x1ec>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3f      	ldr	r2, [pc, #252]	@ (8003828 <HAL_GPIO_Init+0x2c4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00d      	beq.n	800374c <HAL_GPIO_Init+0x1e8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a3e      	ldr	r2, [pc, #248]	@ (800382c <HAL_GPIO_Init+0x2c8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d007      	beq.n	8003748 <HAL_GPIO_Init+0x1e4>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a3d      	ldr	r2, [pc, #244]	@ (8003830 <HAL_GPIO_Init+0x2cc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d101      	bne.n	8003744 <HAL_GPIO_Init+0x1e0>
 8003740:	2303      	movs	r3, #3
 8003742:	e006      	b.n	8003752 <HAL_GPIO_Init+0x1ee>
 8003744:	2304      	movs	r3, #4
 8003746:	e004      	b.n	8003752 <HAL_GPIO_Init+0x1ee>
 8003748:	2302      	movs	r3, #2
 800374a:	e002      	b.n	8003752 <HAL_GPIO_Init+0x1ee>
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <HAL_GPIO_Init+0x1ee>
 8003750:	2300      	movs	r3, #0
 8003752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003754:	f002 0203 	and.w	r2, r2, #3
 8003758:	0092      	lsls	r2, r2, #2
 800375a:	4093      	lsls	r3, r2
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003762:	492f      	ldr	r1, [pc, #188]	@ (8003820 <HAL_GPIO_Init+0x2bc>)
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	089b      	lsrs	r3, r3, #2
 8003768:	3302      	adds	r3, #2
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d006      	beq.n	800378a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800377c:	4b2d      	ldr	r3, [pc, #180]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	492c      	ldr	r1, [pc, #176]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	4313      	orrs	r3, r2
 8003786:	608b      	str	r3, [r1, #8]
 8003788:	e006      	b.n	8003798 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800378a:	4b2a      	ldr	r3, [pc, #168]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	43db      	mvns	r3, r3
 8003792:	4928      	ldr	r1, [pc, #160]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 8003794:	4013      	ands	r3, r2
 8003796:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d006      	beq.n	80037b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037a4:	4b23      	ldr	r3, [pc, #140]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	4922      	ldr	r1, [pc, #136]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60cb      	str	r3, [r1, #12]
 80037b0:	e006      	b.n	80037c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037b2:	4b20      	ldr	r3, [pc, #128]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	491e      	ldr	r1, [pc, #120]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 80037bc:	4013      	ands	r3, r2
 80037be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d006      	beq.n	80037da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80037cc:	4b19      	ldr	r3, [pc, #100]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	4918      	ldr	r1, [pc, #96]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
 80037d8:	e006      	b.n	80037e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037da:	4b16      	ldr	r3, [pc, #88]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	4914      	ldr	r1, [pc, #80]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d021      	beq.n	8003838 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	490e      	ldr	r1, [pc, #56]	@ (8003834 <HAL_GPIO_Init+0x2d0>)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]
 8003800:	e021      	b.n	8003846 <HAL_GPIO_Init+0x2e2>
 8003802:	bf00      	nop
 8003804:	10320000 	.word	0x10320000
 8003808:	10310000 	.word	0x10310000
 800380c:	10220000 	.word	0x10220000
 8003810:	10210000 	.word	0x10210000
 8003814:	10120000 	.word	0x10120000
 8003818:	10110000 	.word	0x10110000
 800381c:	40021000 	.word	0x40021000
 8003820:	40010000 	.word	0x40010000
 8003824:	40010800 	.word	0x40010800
 8003828:	40010c00 	.word	0x40010c00
 800382c:	40011000 	.word	0x40011000
 8003830:	40011400 	.word	0x40011400
 8003834:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003838:	4b0b      	ldr	r3, [pc, #44]	@ (8003868 <HAL_GPIO_Init+0x304>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	43db      	mvns	r3, r3
 8003840:	4909      	ldr	r1, [pc, #36]	@ (8003868 <HAL_GPIO_Init+0x304>)
 8003842:	4013      	ands	r3, r2
 8003844:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	3301      	adds	r3, #1
 800384a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003852:	fa22 f303 	lsr.w	r3, r2, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	f47f ae8e 	bne.w	8003578 <HAL_GPIO_Init+0x14>
  }
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	372c      	adds	r7, #44	@ 0x2c
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	40010400 	.word	0x40010400

0800386c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	887b      	ldrh	r3, [r7, #2]
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003884:	2301      	movs	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
 8003888:	e001      	b.n	800388e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800388e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	807b      	strh	r3, [r7, #2]
 80038a6:	4613      	mov	r3, r2
 80038a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038aa:	787b      	ldrb	r3, [r7, #1]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038b0:	887a      	ldrh	r2, [r7, #2]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038b6:	e003      	b.n	80038c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038b8:	887b      	ldrh	r3, [r7, #2]
 80038ba:	041a      	lsls	r2, r3, #16
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	611a      	str	r2, [r3, #16]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038d6:	4b08      	ldr	r3, [pc, #32]	@ (80038f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	4013      	ands	r3, r2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d006      	beq.n	80038f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038e2:	4a05      	ldr	r2, [pc, #20]	@ (80038f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f806 	bl	80038fc <HAL_GPIO_EXTI_Callback>
  }
}
 80038f0:	bf00      	nop
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40010400 	.word	0x40010400

080038fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e12b      	b.n	8003b7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff f9b0 	bl	8002c9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2224      	movs	r2, #36	@ 0x24
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003962:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003972:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003974:	f001 f960 	bl	8004c38 <HAL_RCC_GetPCLK1Freq>
 8003978:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	4a81      	ldr	r2, [pc, #516]	@ (8003b84 <HAL_I2C_Init+0x274>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d807      	bhi.n	8003994 <HAL_I2C_Init+0x84>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a80      	ldr	r2, [pc, #512]	@ (8003b88 <HAL_I2C_Init+0x278>)
 8003988:	4293      	cmp	r3, r2
 800398a:	bf94      	ite	ls
 800398c:	2301      	movls	r3, #1
 800398e:	2300      	movhi	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	e006      	b.n	80039a2 <HAL_I2C_Init+0x92>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4a7d      	ldr	r2, [pc, #500]	@ (8003b8c <HAL_I2C_Init+0x27c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	bf94      	ite	ls
 800399c:	2301      	movls	r3, #1
 800399e:	2300      	movhi	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e0e7      	b.n	8003b7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4a78      	ldr	r2, [pc, #480]	@ (8003b90 <HAL_I2C_Init+0x280>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	0c9b      	lsrs	r3, r3, #18
 80039b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	4a6a      	ldr	r2, [pc, #424]	@ (8003b84 <HAL_I2C_Init+0x274>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d802      	bhi.n	80039e4 <HAL_I2C_Init+0xd4>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	3301      	adds	r3, #1
 80039e2:	e009      	b.n	80039f8 <HAL_I2C_Init+0xe8>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	4a69      	ldr	r2, [pc, #420]	@ (8003b94 <HAL_I2C_Init+0x284>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	099b      	lsrs	r3, r3, #6
 80039f6:	3301      	adds	r3, #1
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	495c      	ldr	r1, [pc, #368]	@ (8003b84 <HAL_I2C_Init+0x274>)
 8003a14:	428b      	cmp	r3, r1
 8003a16:	d819      	bhi.n	8003a4c <HAL_I2C_Init+0x13c>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	1e59      	subs	r1, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a26:	1c59      	adds	r1, r3, #1
 8003a28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a2c:	400b      	ands	r3, r1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_I2C_Init+0x138>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1e59      	subs	r1, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a40:	3301      	adds	r3, #1
 8003a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a46:	e051      	b.n	8003aec <HAL_I2C_Init+0x1dc>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	e04f      	b.n	8003aec <HAL_I2C_Init+0x1dc>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d111      	bne.n	8003a78 <HAL_I2C_Init+0x168>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1e58      	subs	r0, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6859      	ldr	r1, [r3, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	440b      	add	r3, r1
 8003a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	e012      	b.n	8003a9e <HAL_I2C_Init+0x18e>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1e58      	subs	r0, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6859      	ldr	r1, [r3, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	0099      	lsls	r1, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a8e:	3301      	adds	r3, #1
 8003a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf0c      	ite	eq
 8003a98:	2301      	moveq	r3, #1
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_I2C_Init+0x196>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e022      	b.n	8003aec <HAL_I2C_Init+0x1dc>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10e      	bne.n	8003acc <HAL_I2C_Init+0x1bc>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1e58      	subs	r0, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6859      	ldr	r1, [r3, #4]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	440b      	add	r3, r1
 8003abc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aca:	e00f      	b.n	8003aec <HAL_I2C_Init+0x1dc>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	1e58      	subs	r0, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	0099      	lsls	r1, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	6809      	ldr	r1, [r1, #0]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69da      	ldr	r2, [r3, #28]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6911      	ldr	r1, [r2, #16]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68d2      	ldr	r2, [r2, #12]
 8003b26:	4311      	orrs	r1, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	000186a0 	.word	0x000186a0
 8003b88:	001e847f 	.word	0x001e847f
 8003b8c:	003d08ff 	.word	0x003d08ff
 8003b90:	431bde83 	.word	0x431bde83
 8003b94:	10624dd3 	.word	0x10624dd3

08003b98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	607a      	str	r2, [r7, #4]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	817b      	strh	r3, [r7, #10]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bac:	f7ff fb9e 	bl	80032ec <HAL_GetTick>
 8003bb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	f040 80e0 	bne.w	8003d80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	2319      	movs	r3, #25
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	4970      	ldr	r1, [pc, #448]	@ (8003d8c <HAL_I2C_Master_Transmit+0x1f4>)
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fa92 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e0d3      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_I2C_Master_Transmit+0x50>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e0cc      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x1ea>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d007      	beq.n	8003c0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0201 	orr.w	r2, r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2221      	movs	r2, #33	@ 0x21
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2210      	movs	r2, #16
 8003c2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	893a      	ldrh	r2, [r7, #8]
 8003c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a50      	ldr	r2, [pc, #320]	@ (8003d90 <HAL_I2C_Master_Transmit+0x1f8>)
 8003c4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c50:	8979      	ldrh	r1, [r7, #10]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	6a3a      	ldr	r2, [r7, #32]
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 f9ca 	bl	8003ff0 <I2C_MasterRequestWrite>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e08d      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003c7c:	e066      	b.n	8003d4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	6a39      	ldr	r1, [r7, #32]
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 fb50 	bl	8004328 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00d      	beq.n	8003caa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d107      	bne.n	8003ca6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ca4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e06b      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	781a      	ldrb	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d11b      	bne.n	8003d20 <HAL_I2C_Master_Transmit+0x188>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d017      	beq.n	8003d20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf4:	781a      	ldrb	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	6a39      	ldr	r1, [r7, #32]
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fb47 	bl	80043b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00d      	beq.n	8003d4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d107      	bne.n	8003d48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e01a      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d194      	bne.n	8003c7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e000      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003d80:	2302      	movs	r3, #2
  }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	00100002 	.word	0x00100002
 8003d90:	ffff0000 	.word	0xffff0000

08003d94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08a      	sub	sp, #40	@ 0x28
 8003d98:	af02      	add	r7, sp, #8
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	460b      	mov	r3, r1
 8003da2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003da4:	f7ff faa2 	bl	80032ec <HAL_GetTick>
 8003da8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	f040 8111 	bne.w	8003fde <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	2319      	movs	r3, #25
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	4988      	ldr	r1, [pc, #544]	@ (8003fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f994 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e104      	b.n	8003fe0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_I2C_IsDeviceReady+0x50>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e0fd      	b.n	8003fe0 <HAL_I2C_IsDeviceReady+0x24c>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d007      	beq.n	8003e0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0201 	orr.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2224      	movs	r2, #36	@ 0x24
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4a70      	ldr	r2, [pc, #448]	@ (8003fec <HAL_I2C_IsDeviceReady+0x258>)
 8003e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 f952 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00d      	beq.n	8003e72 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e64:	d103      	bne.n	8003e6e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e6c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e0b6      	b.n	8003fe0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e72:	897b      	ldrh	r3, [r7, #10]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e80:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e82:	f7ff fa33 	bl	80032ec <HAL_GetTick>
 8003e86:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eac:	bf0c      	ite	eq
 8003eae:	2301      	moveq	r3, #1
 8003eb0:	2300      	movne	r3, #0
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003eb6:	e025      	b.n	8003f04 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003eb8:	f7ff fa18 	bl	80032ec <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d302      	bcc.n	8003ece <HAL_I2C_IsDeviceReady+0x13a>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	22a0      	movs	r2, #160	@ 0xa0
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f0e:	d005      	beq.n	8003f1c <HAL_I2C_IsDeviceReady+0x188>
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d102      	bne.n	8003f1c <HAL_I2C_IsDeviceReady+0x188>
 8003f16:	7dbb      	ldrb	r3, [r7, #22]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0cd      	beq.n	8003eb8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d129      	bne.n	8003f86 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f40:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f42:	2300      	movs	r3, #0
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2319      	movs	r3, #25
 8003f5e:	2201      	movs	r2, #1
 8003f60:	4921      	ldr	r1, [pc, #132]	@ (8003fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f8c6 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e036      	b.n	8003fe0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e02c      	b.n	8003fe0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f94:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f9e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	2319      	movs	r3, #25
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	490f      	ldr	r1, [pc, #60]	@ (8003fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 f8a2 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e012      	b.n	8003fe0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	f4ff af32 	bcc.w	8003e2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003fde:	2302      	movs	r3, #2
  }
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3720      	adds	r7, #32
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	00100002 	.word	0x00100002
 8003fec:	ffff0000 	.word	0xffff0000

08003ff0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004004:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d006      	beq.n	800401a <I2C_MasterRequestWrite+0x2a>
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d003      	beq.n	800401a <I2C_MasterRequestWrite+0x2a>
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004018:	d108      	bne.n	800402c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	e00b      	b.n	8004044 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004030:	2b12      	cmp	r3, #18
 8004032:	d107      	bne.n	8004044 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004042:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f84f 	bl	80040f4 <I2C_WaitOnFlagUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00d      	beq.n	8004078 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800406a:	d103      	bne.n	8004074 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004072:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e035      	b.n	80040e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004080:	d108      	bne.n	8004094 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004082:	897b      	ldrh	r3, [r7, #10]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004090:	611a      	str	r2, [r3, #16]
 8004092:	e01b      	b.n	80040cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004094:	897b      	ldrh	r3, [r7, #10]
 8004096:	11db      	asrs	r3, r3, #7
 8004098:	b2db      	uxtb	r3, r3
 800409a:	f003 0306 	and.w	r3, r3, #6
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	f063 030f 	orn	r3, r3, #15
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	490e      	ldr	r1, [pc, #56]	@ (80040ec <I2C_MasterRequestWrite+0xfc>)
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f898 	bl	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e010      	b.n	80040e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040c2:	897b      	ldrh	r3, [r7, #10]
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4907      	ldr	r1, [pc, #28]	@ (80040f0 <I2C_MasterRequestWrite+0x100>)
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f888 	bl	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	00010008 	.word	0x00010008
 80040f0:	00010002 	.word	0x00010002

080040f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004104:	e048      	b.n	8004198 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800410c:	d044      	beq.n	8004198 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410e:	f7ff f8ed 	bl	80032ec <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d139      	bne.n	8004198 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	0c1b      	lsrs	r3, r3, #16
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b01      	cmp	r3, #1
 800412c:	d10d      	bne.n	800414a <I2C_WaitOnFlagUntilTimeout+0x56>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	43da      	mvns	r2, r3
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4013      	ands	r3, r2
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	e00c      	b.n	8004164 <I2C_WaitOnFlagUntilTimeout+0x70>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	43da      	mvns	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4013      	ands	r3, r2
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	429a      	cmp	r2, r3
 8004168:	d116      	bne.n	8004198 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e023      	b.n	80041e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	0c1b      	lsrs	r3, r3, #16
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d10d      	bne.n	80041be <I2C_WaitOnFlagUntilTimeout+0xca>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	43da      	mvns	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4013      	ands	r3, r2
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	e00c      	b.n	80041d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	43da      	mvns	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4013      	ands	r3, r2
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	bf0c      	ite	eq
 80041d0:	2301      	moveq	r3, #1
 80041d2:	2300      	movne	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d093      	beq.n	8004106 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041f6:	e071      	b.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004206:	d123      	bne.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004216:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423c:	f043 0204 	orr.w	r2, r3, #4
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e067      	b.n	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004256:	d041      	beq.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004258:	f7ff f848 	bl	80032ec <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	d302      	bcc.n	800426e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d136      	bne.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	d10c      	bne.n	8004292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf14      	ite	ne
 800428a:	2301      	movne	r3, #1
 800428c:	2300      	moveq	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	e00b      	b.n	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	43da      	mvns	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4013      	ands	r3, r2
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf14      	ite	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	2300      	moveq	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	f043 0220 	orr.w	r2, r3, #32
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e021      	b.n	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	0c1b      	lsrs	r3, r3, #16
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d10c      	bne.n	8004300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	43da      	mvns	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4013      	ands	r3, r2
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bf14      	ite	ne
 80042f8:	2301      	movne	r3, #1
 80042fa:	2300      	moveq	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	e00b      	b.n	8004318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	43da      	mvns	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4013      	ands	r3, r2
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	bf14      	ite	ne
 8004312:	2301      	movne	r3, #1
 8004314:	2300      	moveq	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	f47f af6d 	bne.w	80041f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004334:	e034      	b.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f886 	bl	8004448 <I2C_IsAcknowledgeFailed>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e034      	b.n	80043b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800434c:	d028      	beq.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434e:	f7fe ffcd 	bl	80032ec <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	429a      	cmp	r2, r3
 800435c:	d302      	bcc.n	8004364 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d11d      	bne.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436e:	2b80      	cmp	r3, #128	@ 0x80
 8004370:	d016      	beq.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e007      	b.n	80043b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043aa:	2b80      	cmp	r3, #128	@ 0x80
 80043ac:	d1c3      	bne.n	8004336 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043c4:	e034      	b.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f83e 	bl	8004448 <I2C_IsAcknowledgeFailed>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e034      	b.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043dc:	d028      	beq.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043de:	f7fe ff85 	bl	80032ec <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d302      	bcc.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d11d      	bne.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d016      	beq.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e007      	b.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b04      	cmp	r3, #4
 800443c:	d1c3      	bne.n	80043c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800445a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800445e:	d11b      	bne.n	8004498 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004468:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004484:	f043 0204 	orr.w	r2, r3, #4
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e272      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 8087 	beq.w	80045d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044c4:	4b92      	ldr	r3, [pc, #584]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 030c 	and.w	r3, r3, #12
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d00c      	beq.n	80044ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044d0:	4b8f      	ldr	r3, [pc, #572]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 030c 	and.w	r3, r3, #12
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d112      	bne.n	8004502 <HAL_RCC_OscConfig+0x5e>
 80044dc:	4b8c      	ldr	r3, [pc, #560]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e8:	d10b      	bne.n	8004502 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ea:	4b89      	ldr	r3, [pc, #548]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d06c      	beq.n	80045d0 <HAL_RCC_OscConfig+0x12c>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d168      	bne.n	80045d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e24c      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800450a:	d106      	bne.n	800451a <HAL_RCC_OscConfig+0x76>
 800450c:	4b80      	ldr	r3, [pc, #512]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a7f      	ldr	r2, [pc, #508]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 8004512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	e02e      	b.n	8004578 <HAL_RCC_OscConfig+0xd4>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10c      	bne.n	800453c <HAL_RCC_OscConfig+0x98>
 8004522:	4b7b      	ldr	r3, [pc, #492]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a7a      	ldr	r2, [pc, #488]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 8004528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	4b78      	ldr	r3, [pc, #480]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a77      	ldr	r2, [pc, #476]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 8004534:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e01d      	b.n	8004578 <HAL_RCC_OscConfig+0xd4>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004544:	d10c      	bne.n	8004560 <HAL_RCC_OscConfig+0xbc>
 8004546:	4b72      	ldr	r3, [pc, #456]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a71      	ldr	r2, [pc, #452]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 800454c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	4b6f      	ldr	r3, [pc, #444]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a6e      	ldr	r2, [pc, #440]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 8004558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	e00b      	b.n	8004578 <HAL_RCC_OscConfig+0xd4>
 8004560:	4b6b      	ldr	r3, [pc, #428]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a6a      	ldr	r2, [pc, #424]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 8004566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	4b68      	ldr	r3, [pc, #416]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a67      	ldr	r2, [pc, #412]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 8004572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004576:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d013      	beq.n	80045a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fe feb4 	bl	80032ec <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004588:	f7fe feb0 	bl	80032ec <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	@ 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e200      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459a:	4b5d      	ldr	r3, [pc, #372]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0xe4>
 80045a6:	e014      	b.n	80045d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fe fea0 	bl	80032ec <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fe fe9c 	bl	80032ec <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	@ 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e1ec      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c2:	4b53      	ldr	r3, [pc, #332]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x10c>
 80045ce:	e000      	b.n	80045d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d063      	beq.n	80046a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045de:	4b4c      	ldr	r3, [pc, #304]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f003 030c 	and.w	r3, r3, #12
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00b      	beq.n	8004602 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045ea:	4b49      	ldr	r3, [pc, #292]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d11c      	bne.n	8004630 <HAL_RCC_OscConfig+0x18c>
 80045f6:	4b46      	ldr	r3, [pc, #280]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d116      	bne.n	8004630 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004602:	4b43      	ldr	r3, [pc, #268]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <HAL_RCC_OscConfig+0x176>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d001      	beq.n	800461a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e1c0      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461a:	4b3d      	ldr	r3, [pc, #244]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4939      	ldr	r1, [pc, #228]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 800462a:	4313      	orrs	r3, r2
 800462c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462e:	e03a      	b.n	80046a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d020      	beq.n	800467a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004638:	4b36      	ldr	r3, [pc, #216]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 800463a:	2201      	movs	r2, #1
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463e:	f7fe fe55 	bl	80032ec <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004646:	f7fe fe51 	bl	80032ec <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e1a1      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004658:	4b2d      	ldr	r3, [pc, #180]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004664:	4b2a      	ldr	r3, [pc, #168]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	4927      	ldr	r1, [pc, #156]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 8004674:	4313      	orrs	r3, r2
 8004676:	600b      	str	r3, [r1, #0]
 8004678:	e015      	b.n	80046a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800467a:	4b26      	ldr	r3, [pc, #152]	@ (8004714 <HAL_RCC_OscConfig+0x270>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004680:	f7fe fe34 	bl	80032ec <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004688:	f7fe fe30 	bl	80032ec <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e180      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469a:	4b1d      	ldr	r3, [pc, #116]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d03a      	beq.n	8004728 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d019      	beq.n	80046ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ba:	4b17      	ldr	r3, [pc, #92]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 80046bc:	2201      	movs	r2, #1
 80046be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c0:	f7fe fe14 	bl	80032ec <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c8:	f7fe fe10 	bl	80032ec <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e160      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046da:	4b0d      	ldr	r3, [pc, #52]	@ (8004710 <HAL_RCC_OscConfig+0x26c>)
 80046dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0f0      	beq.n	80046c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046e6:	2001      	movs	r0, #1
 80046e8:	f000 face 	bl	8004c88 <RCC_Delay>
 80046ec:	e01c      	b.n	8004728 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004718 <HAL_RCC_OscConfig+0x274>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f4:	f7fe fdfa 	bl	80032ec <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046fa:	e00f      	b.n	800471c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046fc:	f7fe fdf6 	bl	80032ec <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d908      	bls.n	800471c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e146      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000
 8004714:	42420000 	.word	0x42420000
 8004718:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800471c:	4b92      	ldr	r3, [pc, #584]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e9      	bne.n	80046fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 80a6 	beq.w	8004882 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004736:	2300      	movs	r3, #0
 8004738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800473a:	4b8b      	ldr	r3, [pc, #556]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10d      	bne.n	8004762 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004746:	4b88      	ldr	r3, [pc, #544]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	4a87      	ldr	r2, [pc, #540]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 800474c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004750:	61d3      	str	r3, [r2, #28]
 8004752:	4b85      	ldr	r3, [pc, #532]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475e:	2301      	movs	r3, #1
 8004760:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004762:	4b82      	ldr	r3, [pc, #520]	@ (800496c <HAL_RCC_OscConfig+0x4c8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476a:	2b00      	cmp	r3, #0
 800476c:	d118      	bne.n	80047a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800476e:	4b7f      	ldr	r3, [pc, #508]	@ (800496c <HAL_RCC_OscConfig+0x4c8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a7e      	ldr	r2, [pc, #504]	@ (800496c <HAL_RCC_OscConfig+0x4c8>)
 8004774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800477a:	f7fe fdb7 	bl	80032ec <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004782:	f7fe fdb3 	bl	80032ec <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b64      	cmp	r3, #100	@ 0x64
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e103      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004794:	4b75      	ldr	r3, [pc, #468]	@ (800496c <HAL_RCC_OscConfig+0x4c8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f0      	beq.n	8004782 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d106      	bne.n	80047b6 <HAL_RCC_OscConfig+0x312>
 80047a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	6213      	str	r3, [r2, #32]
 80047b4:	e02d      	b.n	8004812 <HAL_RCC_OscConfig+0x36e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10c      	bne.n	80047d8 <HAL_RCC_OscConfig+0x334>
 80047be:	4b6a      	ldr	r3, [pc, #424]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	4a69      	ldr	r2, [pc, #420]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	6213      	str	r3, [r2, #32]
 80047ca:	4b67      	ldr	r3, [pc, #412]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	4a66      	ldr	r2, [pc, #408]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80047d0:	f023 0304 	bic.w	r3, r3, #4
 80047d4:	6213      	str	r3, [r2, #32]
 80047d6:	e01c      	b.n	8004812 <HAL_RCC_OscConfig+0x36e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	2b05      	cmp	r3, #5
 80047de:	d10c      	bne.n	80047fa <HAL_RCC_OscConfig+0x356>
 80047e0:	4b61      	ldr	r3, [pc, #388]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	4a60      	ldr	r2, [pc, #384]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80047e6:	f043 0304 	orr.w	r3, r3, #4
 80047ea:	6213      	str	r3, [r2, #32]
 80047ec:	4b5e      	ldr	r3, [pc, #376]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	4a5d      	ldr	r2, [pc, #372]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	6213      	str	r3, [r2, #32]
 80047f8:	e00b      	b.n	8004812 <HAL_RCC_OscConfig+0x36e>
 80047fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	4a5a      	ldr	r2, [pc, #360]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 8004800:	f023 0301 	bic.w	r3, r3, #1
 8004804:	6213      	str	r3, [r2, #32]
 8004806:	4b58      	ldr	r3, [pc, #352]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	4a57      	ldr	r2, [pc, #348]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 800480c:	f023 0304 	bic.w	r3, r3, #4
 8004810:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d015      	beq.n	8004846 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481a:	f7fe fd67 	bl	80032ec <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004820:	e00a      	b.n	8004838 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fe fd63 	bl	80032ec <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004830:	4293      	cmp	r3, r2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e0b1      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004838:	4b4b      	ldr	r3, [pc, #300]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0ee      	beq.n	8004822 <HAL_RCC_OscConfig+0x37e>
 8004844:	e014      	b.n	8004870 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004846:	f7fe fd51 	bl	80032ec <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484c:	e00a      	b.n	8004864 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484e:	f7fe fd4d 	bl	80032ec <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800485c:	4293      	cmp	r3, r2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e09b      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004864:	4b40      	ldr	r3, [pc, #256]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1ee      	bne.n	800484e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004870:	7dfb      	ldrb	r3, [r7, #23]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d105      	bne.n	8004882 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004876:	4b3c      	ldr	r3, [pc, #240]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	4a3b      	ldr	r2, [pc, #236]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 800487c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004880:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 8087 	beq.w	800499a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800488c:	4b36      	ldr	r3, [pc, #216]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 030c 	and.w	r3, r3, #12
 8004894:	2b08      	cmp	r3, #8
 8004896:	d061      	beq.n	800495c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d146      	bne.n	800492e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a0:	4b33      	ldr	r3, [pc, #204]	@ (8004970 <HAL_RCC_OscConfig+0x4cc>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a6:	f7fe fd21 	bl	80032ec <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ae:	f7fe fd1d 	bl	80032ec <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e06d      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048c0:	4b29      	ldr	r3, [pc, #164]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f0      	bne.n	80048ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d4:	d108      	bne.n	80048e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048d6:	4b24      	ldr	r3, [pc, #144]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	4921      	ldr	r1, [pc, #132]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a19      	ldr	r1, [r3, #32]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	430b      	orrs	r3, r1
 80048fa:	491b      	ldr	r1, [pc, #108]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004900:	4b1b      	ldr	r3, [pc, #108]	@ (8004970 <HAL_RCC_OscConfig+0x4cc>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7fe fcf1 	bl	80032ec <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490e:	f7fe fced 	bl	80032ec <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e03d      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004920:	4b11      	ldr	r3, [pc, #68]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x46a>
 800492c:	e035      	b.n	800499a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492e:	4b10      	ldr	r3, [pc, #64]	@ (8004970 <HAL_RCC_OscConfig+0x4cc>)
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7fe fcda 	bl	80032ec <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800493c:	f7fe fcd6 	bl	80032ec <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e026      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800494e:	4b06      	ldr	r3, [pc, #24]	@ (8004968 <HAL_RCC_OscConfig+0x4c4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0x498>
 800495a:	e01e      	b.n	800499a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d107      	bne.n	8004974 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e019      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>
 8004968:	40021000 	.word	0x40021000
 800496c:	40007000 	.word	0x40007000
 8004970:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004974:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <HAL_RCC_OscConfig+0x500>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	429a      	cmp	r2, r3
 8004986:	d106      	bne.n	8004996 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d001      	beq.n	800499a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40021000 	.word	0x40021000

080049a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0d0      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004b68 <HAL_RCC_ClockConfig+0x1c0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d910      	bls.n	80049ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ca:	4b67      	ldr	r3, [pc, #412]	@ (8004b68 <HAL_RCC_ClockConfig+0x1c0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f023 0207 	bic.w	r2, r3, #7
 80049d2:	4965      	ldr	r1, [pc, #404]	@ (8004b68 <HAL_RCC_ClockConfig+0x1c0>)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049da:	4b63      	ldr	r3, [pc, #396]	@ (8004b68 <HAL_RCC_ClockConfig+0x1c0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d001      	beq.n	80049ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0b8      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d020      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a04:	4b59      	ldr	r3, [pc, #356]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4a58      	ldr	r2, [pc, #352]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004a0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a1c:	4b53      	ldr	r3, [pc, #332]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4a52      	ldr	r2, [pc, #328]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004a22:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004a26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a28:	4b50      	ldr	r3, [pc, #320]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	494d      	ldr	r1, [pc, #308]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d040      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4e:	4b47      	ldr	r3, [pc, #284]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d115      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e07f      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d107      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a66:	4b41      	ldr	r3, [pc, #260]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e073      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a76:	4b3d      	ldr	r3, [pc, #244]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e06b      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a86:	4b39      	ldr	r3, [pc, #228]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f023 0203 	bic.w	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4936      	ldr	r1, [pc, #216]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a98:	f7fe fc28 	bl	80032ec <HAL_GetTick>
 8004a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9e:	e00a      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa0:	f7fe fc24 	bl	80032ec <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e053      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f003 020c 	and.w	r2, r3, #12
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d1eb      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac8:	4b27      	ldr	r3, [pc, #156]	@ (8004b68 <HAL_RCC_ClockConfig+0x1c0>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d210      	bcs.n	8004af8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad6:	4b24      	ldr	r3, [pc, #144]	@ (8004b68 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f023 0207 	bic.w	r2, r3, #7
 8004ade:	4922      	ldr	r1, [pc, #136]	@ (8004b68 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae6:	4b20      	ldr	r3, [pc, #128]	@ (8004b68 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d001      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e032      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b04:	4b19      	ldr	r3, [pc, #100]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4916      	ldr	r1, [pc, #88]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b22:	4b12      	ldr	r3, [pc, #72]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	490e      	ldr	r1, [pc, #56]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b36:	f000 f821 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	490a      	ldr	r1, [pc, #40]	@ (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004b48:	5ccb      	ldrb	r3, [r1, r3]
 8004b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4e:	4a09      	ldr	r2, [pc, #36]	@ (8004b74 <HAL_RCC_ClockConfig+0x1cc>)
 8004b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b52:	4b09      	ldr	r3, [pc, #36]	@ (8004b78 <HAL_RCC_ClockConfig+0x1d0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fe fb86 	bl	8003268 <HAL_InitTick>

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40022000 	.word	0x40022000
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	0800a5b4 	.word	0x0800a5b4
 8004b74:	20000010 	.word	0x20000010
 8004b78:	20000014 	.word	0x20000014

08004b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	2300      	movs	r3, #0
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b96:	4b1e      	ldr	r3, [pc, #120]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d002      	beq.n	8004bac <HAL_RCC_GetSysClockFreq+0x30>
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d003      	beq.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x36>
 8004baa:	e027      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bac:	4b19      	ldr	r3, [pc, #100]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bae:	613b      	str	r3, [r7, #16]
      break;
 8004bb0:	e027      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	0c9b      	lsrs	r3, r3, #18
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	4a17      	ldr	r2, [pc, #92]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004bbc:	5cd3      	ldrb	r3, [r2, r3]
 8004bbe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d010      	beq.n	8004bec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bca:	4b11      	ldr	r3, [pc, #68]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x94>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	0c5b      	lsrs	r3, r3, #17
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	4a11      	ldr	r2, [pc, #68]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004bd6:	5cd3      	ldrb	r3, [r2, r3]
 8004bd8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bde:	fb03 f202 	mul.w	r2, r3, r2
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	e004      	b.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a0c      	ldr	r2, [pc, #48]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004bf0:	fb02 f303 	mul.w	r3, r2, r3
 8004bf4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	613b      	str	r3, [r7, #16]
      break;
 8004bfa:	e002      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bfc:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8004bfe:	613b      	str	r3, [r7, #16]
      break;
 8004c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c02:	693b      	ldr	r3, [r7, #16]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	40021000 	.word	0x40021000
 8004c14:	007a1200 	.word	0x007a1200
 8004c18:	0800a5cc 	.word	0x0800a5cc
 8004c1c:	0800a5dc 	.word	0x0800a5dc
 8004c20:	003d0900 	.word	0x003d0900

08004c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c28:	4b02      	ldr	r3, [pc, #8]	@ (8004c34 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr
 8004c34:	20000010 	.word	0x20000010

08004c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c3c:	f7ff fff2 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8004c40:	4602      	mov	r2, r0
 8004c42:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	0a1b      	lsrs	r3, r3, #8
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	4903      	ldr	r1, [pc, #12]	@ (8004c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c4e:	5ccb      	ldrb	r3, [r1, r3]
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	0800a5c4 	.word	0x0800a5c4

08004c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c64:	f7ff ffde 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	4b05      	ldr	r3, [pc, #20]	@ (8004c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	0adb      	lsrs	r3, r3, #11
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	4903      	ldr	r1, [pc, #12]	@ (8004c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c76:	5ccb      	ldrb	r3, [r1, r3]
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40021000 	.word	0x40021000
 8004c84:	0800a5c4 	.word	0x0800a5c4

08004c88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c90:	4b0a      	ldr	r3, [pc, #40]	@ (8004cbc <RCC_Delay+0x34>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc0 <RCC_Delay+0x38>)
 8004c96:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9a:	0a5b      	lsrs	r3, r3, #9
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ca2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ca4:	bf00      	nop
  }
  while (Delay --);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1e5a      	subs	r2, r3, #1
 8004caa:	60fa      	str	r2, [r7, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f9      	bne.n	8004ca4 <RCC_Delay+0x1c>
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr
 8004cbc:	20000010 	.word	0x20000010
 8004cc0:	10624dd3 	.word	0x10624dd3

08004cc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e076      	b.n	8004dc4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d108      	bne.n	8004cf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ce6:	d009      	beq.n	8004cfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	61da      	str	r2, [r3, #28]
 8004cee:	e005      	b.n	8004cfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fe f800 	bl	8002d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d44:	431a      	orrs	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d80:	ea42 0103 	orr.w	r1, r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	0c1a      	lsrs	r2, r3, #16
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f002 0204 	and.w	r2, r2, #4
 8004da2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69da      	ldr	r2, [r3, #28]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004db2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ddc:	f7fe fa86 	bl	80032ec <HAL_GetTick>
 8004de0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d001      	beq.n	8004df6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004df2:	2302      	movs	r3, #2
 8004df4:	e12a      	b.n	800504c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <HAL_SPI_Transmit+0x36>
 8004dfc:	88fb      	ldrh	r3, [r7, #6]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e122      	b.n	800504c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_SPI_Transmit+0x48>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e11b      	b.n	800504c <HAL_SPI_Transmit+0x280>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2203      	movs	r2, #3
 8004e20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	88fa      	ldrh	r2, [r7, #6]
 8004e34:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	88fa      	ldrh	r2, [r7, #6]
 8004e3a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e62:	d10f      	bne.n	8004e84 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e8e:	2b40      	cmp	r3, #64	@ 0x40
 8004e90:	d007      	beq.n	8004ea2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ea0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eaa:	d152      	bne.n	8004f52 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <HAL_SPI_Transmit+0xee>
 8004eb4:	8b7b      	ldrh	r3, [r7, #26]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d145      	bne.n	8004f46 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ebe:	881a      	ldrh	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eca:	1c9a      	adds	r2, r3, #2
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ede:	e032      	b.n	8004f46 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d112      	bne.n	8004f14 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef2:	881a      	ldrh	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efe:	1c9a      	adds	r2, r3, #2
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f12:	e018      	b.n	8004f46 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f14:	f7fe f9ea 	bl	80032ec <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d803      	bhi.n	8004f2c <HAL_SPI_Transmit+0x160>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f2a:	d102      	bne.n	8004f32 <HAL_SPI_Transmit+0x166>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e082      	b.n	800504c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1c7      	bne.n	8004ee0 <HAL_SPI_Transmit+0x114>
 8004f50:	e053      	b.n	8004ffa <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_SPI_Transmit+0x194>
 8004f5a:	8b7b      	ldrh	r3, [r7, #26]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d147      	bne.n	8004ff0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	7812      	ldrb	r2, [r2, #0]
 8004f6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f86:	e033      	b.n	8004ff0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d113      	bne.n	8004fbe <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	330c      	adds	r3, #12
 8004fa0:	7812      	ldrb	r2, [r2, #0]
 8004fa2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004fbc:	e018      	b.n	8004ff0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fbe:	f7fe f995 	bl	80032ec <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d803      	bhi.n	8004fd6 <HAL_SPI_Transmit+0x20a>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fd4:	d102      	bne.n	8004fdc <HAL_SPI_Transmit+0x210>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e02d      	b.n	800504c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1c6      	bne.n	8004f88 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	6839      	ldr	r1, [r7, #0]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 f8b0 	bl	8005164 <SPI_EndRxTxTransaction>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10a      	bne.n	800502e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800504a:	2300      	movs	r3, #0
  }
}
 800504c:	4618      	mov	r0, r3
 800504e:	3720      	adds	r7, #32
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	4613      	mov	r3, r2
 8005062:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005064:	f7fe f942 	bl	80032ec <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	4413      	add	r3, r2
 8005072:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005074:	f7fe f93a 	bl	80032ec <HAL_GetTick>
 8005078:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800507a:	4b39      	ldr	r3, [pc, #228]	@ (8005160 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	015b      	lsls	r3, r3, #5
 8005080:	0d1b      	lsrs	r3, r3, #20
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	fb02 f303 	mul.w	r3, r2, r3
 8005088:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800508a:	e054      	b.n	8005136 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005092:	d050      	beq.n	8005136 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005094:	f7fe f92a 	bl	80032ec <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d902      	bls.n	80050aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d13d      	bne.n	8005126 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050c2:	d111      	bne.n	80050e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050cc:	d004      	beq.n	80050d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d6:	d107      	bne.n	80050e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050f0:	d10f      	bne.n	8005112 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e017      	b.n	8005156 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	3b01      	subs	r3, #1
 8005134:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4013      	ands	r3, r2
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	429a      	cmp	r2, r3
 8005144:	bf0c      	ite	eq
 8005146:	2301      	moveq	r3, #1
 8005148:	2300      	movne	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	429a      	cmp	r2, r3
 8005152:	d19b      	bne.n	800508c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3720      	adds	r7, #32
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000010 	.word	0x20000010

08005164 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2201      	movs	r2, #1
 8005178:	2102      	movs	r1, #2
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7ff ff6a 	bl	8005054 <SPI_WaitFlagStateUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e013      	b.n	80051be <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2200      	movs	r2, #0
 800519e:	2180      	movs	r1, #128	@ 0x80
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f7ff ff57 	bl	8005054 <SPI_WaitFlagStateUntilTimeout>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b0:	f043 0220 	orr.w	r2, r3, #32
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e000      	b.n	80051be <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e041      	b.n	800525c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d106      	bne.n	80051f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7fd fdd5 	bl	8002d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3304      	adds	r3, #4
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f000 faad 	bl	8005764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	d001      	beq.n	800527c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e032      	b.n	80052e2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a18      	ldr	r2, [pc, #96]	@ (80052ec <HAL_TIM_Base_Start+0x88>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00e      	beq.n	80052ac <HAL_TIM_Base_Start+0x48>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005296:	d009      	beq.n	80052ac <HAL_TIM_Base_Start+0x48>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a14      	ldr	r2, [pc, #80]	@ (80052f0 <HAL_TIM_Base_Start+0x8c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d004      	beq.n	80052ac <HAL_TIM_Base_Start+0x48>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a13      	ldr	r2, [pc, #76]	@ (80052f4 <HAL_TIM_Base_Start+0x90>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d111      	bne.n	80052d0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b06      	cmp	r3, #6
 80052bc:	d010      	beq.n	80052e0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0201 	orr.w	r2, r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ce:	e007      	b.n	80052e0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	40012c00 	.word	0x40012c00
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800

080052f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	d001      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e03a      	b.n	8005386 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a18      	ldr	r2, [pc, #96]	@ (8005390 <HAL_TIM_Base_Start_IT+0x98>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00e      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x58>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533a:	d009      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x58>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a14      	ldr	r2, [pc, #80]	@ (8005394 <HAL_TIM_Base_Start_IT+0x9c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x58>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a13      	ldr	r2, [pc, #76]	@ (8005398 <HAL_TIM_Base_Start_IT+0xa0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d111      	bne.n	8005374 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b06      	cmp	r3, #6
 8005360:	d010      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0201 	orr.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005372:	e007      	b.n	8005384 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr
 8005390:	40012c00 	.word	0x40012c00
 8005394:	40000400 	.word	0x40000400
 8005398:	40000800 	.word	0x40000800

0800539c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d020      	beq.n	8005400 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01b      	beq.n	8005400 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0202 	mvn.w	r2, #2
 80053d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f9a1 	bl	800572e <HAL_TIM_IC_CaptureCallback>
 80053ec:	e005      	b.n	80053fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f994 	bl	800571c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f9a3 	bl	8005740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d020      	beq.n	800544c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01b      	beq.n	800544c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0204 	mvn.w	r2, #4
 800541c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2202      	movs	r2, #2
 8005422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f97b 	bl	800572e <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f96e 	bl	800571c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f97d 	bl	8005740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d020      	beq.n	8005498 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f003 0308 	and.w	r3, r3, #8
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01b      	beq.n	8005498 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0208 	mvn.w	r2, #8
 8005468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2204      	movs	r2, #4
 800546e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f955 	bl	800572e <HAL_TIM_IC_CaptureCallback>
 8005484:	e005      	b.n	8005492 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f948 	bl	800571c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f957 	bl	8005740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d020      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01b      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0210 	mvn.w	r2, #16
 80054b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2208      	movs	r2, #8
 80054ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f92f 	bl	800572e <HAL_TIM_IC_CaptureCallback>
 80054d0:	e005      	b.n	80054de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f922 	bl	800571c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f931 	bl	8005740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00c      	beq.n	8005508 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d007      	beq.n	8005508 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0201 	mvn.w	r2, #1
 8005500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f901 	bl	800570a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00c      	beq.n	800552c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fa87 	bl	8005a3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00c      	beq.n	8005550 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f901 	bl	8005752 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00c      	beq.n	8005574 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0220 	mvn.w	r2, #32
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fa5a 	bl	8005a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005574:	bf00      	nop
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_TIM_ConfigClockSource+0x1c>
 8005594:	2302      	movs	r3, #2
 8005596:	e0b4      	b.n	8005702 <HAL_TIM_ConfigClockSource+0x186>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055d0:	d03e      	beq.n	8005650 <HAL_TIM_ConfigClockSource+0xd4>
 80055d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055d6:	f200 8087 	bhi.w	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055de:	f000 8086 	beq.w	80056ee <HAL_TIM_ConfigClockSource+0x172>
 80055e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e6:	d87f      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 80055e8:	2b70      	cmp	r3, #112	@ 0x70
 80055ea:	d01a      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0xa6>
 80055ec:	2b70      	cmp	r3, #112	@ 0x70
 80055ee:	d87b      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 80055f0:	2b60      	cmp	r3, #96	@ 0x60
 80055f2:	d050      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0x11a>
 80055f4:	2b60      	cmp	r3, #96	@ 0x60
 80055f6:	d877      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 80055f8:	2b50      	cmp	r3, #80	@ 0x50
 80055fa:	d03c      	beq.n	8005676 <HAL_TIM_ConfigClockSource+0xfa>
 80055fc:	2b50      	cmp	r3, #80	@ 0x50
 80055fe:	d873      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005600:	2b40      	cmp	r3, #64	@ 0x40
 8005602:	d058      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0x13a>
 8005604:	2b40      	cmp	r3, #64	@ 0x40
 8005606:	d86f      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005608:	2b30      	cmp	r3, #48	@ 0x30
 800560a:	d064      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x15a>
 800560c:	2b30      	cmp	r3, #48	@ 0x30
 800560e:	d86b      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	2b20      	cmp	r3, #32
 8005612:	d060      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005614:	2b20      	cmp	r3, #32
 8005616:	d867      	bhi.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b00      	cmp	r3, #0
 800561a:	d05c      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x15a>
 800561c:	2b10      	cmp	r3, #16
 800561e:	d05a      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x15a>
 8005620:	e062      	b.n	80056e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005632:	f000 f97c 	bl	800592e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	609a      	str	r2, [r3, #8]
      break;
 800564e:	e04f      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005660:	f000 f965 	bl	800592e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005672:	609a      	str	r2, [r3, #8]
      break;
 8005674:	e03c      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005682:	461a      	mov	r2, r3
 8005684:	f000 f8dc 	bl	8005840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2150      	movs	r1, #80	@ 0x50
 800568e:	4618      	mov	r0, r3
 8005690:	f000 f933 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 8005694:	e02c      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056a2:	461a      	mov	r2, r3
 80056a4:	f000 f8fa 	bl	800589c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2160      	movs	r1, #96	@ 0x60
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 f923 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 80056b4:	e01c      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c2:	461a      	mov	r2, r3
 80056c4:	f000 f8bc 	bl	8005840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2140      	movs	r1, #64	@ 0x40
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 f913 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 80056d4:	e00c      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4619      	mov	r1, r3
 80056e0:	4610      	mov	r0, r2
 80056e2:	f000 f90a 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 80056e6:	e003      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
      break;
 80056ec:	e000      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005700:	7bfb      	ldrb	r3, [r7, #15]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr

0800571c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr

0800572e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr

08005740 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr

08005752 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr

08005764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a2f      	ldr	r2, [pc, #188]	@ (8005834 <TIM_Base_SetConfig+0xd0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00b      	beq.n	8005794 <TIM_Base_SetConfig+0x30>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005782:	d007      	beq.n	8005794 <TIM_Base_SetConfig+0x30>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a2c      	ldr	r2, [pc, #176]	@ (8005838 <TIM_Base_SetConfig+0xd4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d003      	beq.n	8005794 <TIM_Base_SetConfig+0x30>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a2b      	ldr	r2, [pc, #172]	@ (800583c <TIM_Base_SetConfig+0xd8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d108      	bne.n	80057a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800579a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a22      	ldr	r2, [pc, #136]	@ (8005834 <TIM_Base_SetConfig+0xd0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00b      	beq.n	80057c6 <TIM_Base_SetConfig+0x62>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b4:	d007      	beq.n	80057c6 <TIM_Base_SetConfig+0x62>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005838 <TIM_Base_SetConfig+0xd4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d003      	beq.n	80057c6 <TIM_Base_SetConfig+0x62>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a1e      	ldr	r2, [pc, #120]	@ (800583c <TIM_Base_SetConfig+0xd8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d108      	bne.n	80057d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a0d      	ldr	r2, [pc, #52]	@ (8005834 <TIM_Base_SetConfig+0xd0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d103      	bne.n	800580c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	691a      	ldr	r2, [r3, #16]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d005      	beq.n	800582a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f023 0201 	bic.w	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	611a      	str	r2, [r3, #16]
  }
}
 800582a:	bf00      	nop
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	bc80      	pop	{r7}
 8005832:	4770      	bx	lr
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40000400 	.word	0x40000400
 800583c:	40000800 	.word	0x40000800

08005840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	f023 0201 	bic.w	r2, r3, #1
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800586a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f023 030a 	bic.w	r3, r3, #10
 800587c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	621a      	str	r2, [r3, #32]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f023 0210 	bic.w	r2, r3, #16
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	031b      	lsls	r3, r3, #12
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	621a      	str	r2, [r3, #32]
}
 80058f0:	bf00      	nop
 80058f2:	371c      	adds	r7, #28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr

080058fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005910:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	f043 0307 	orr.w	r3, r3, #7
 800591c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	609a      	str	r2, [r3, #8]
}
 8005924:	bf00      	nop
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	bc80      	pop	{r7}
 800592c:	4770      	bx	lr

0800592e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800592e:	b480      	push	{r7}
 8005930:	b087      	sub	sp, #28
 8005932:	af00      	add	r7, sp, #0
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	607a      	str	r2, [r7, #4]
 800593a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005948:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	021a      	lsls	r2, r3, #8
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	431a      	orrs	r2, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	4313      	orrs	r3, r2
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	609a      	str	r2, [r3, #8]
}
 8005962:	bf00      	nop
 8005964:	371c      	adds	r7, #28
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr

0800596c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005980:	2302      	movs	r3, #2
 8005982:	e046      	b.n	8005a12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a16      	ldr	r2, [pc, #88]	@ (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00e      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d0:	d009      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a12      	ldr	r2, [pc, #72]	@ (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d004      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a10      	ldr	r2, [pc, #64]	@ (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d10c      	bne.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr
 8005a1c:	40012c00 	.word	0x40012c00
 8005a20:	40000400 	.word	0x40000400
 8005a24:	40000800 	.word	0x40000800

08005a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr

08005a3a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bc80      	pop	{r7}
 8005a4a:	4770      	bx	lr

08005a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e042      	b.n	8005ae4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fd f9d2 	bl	8002e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2224      	movs	r2, #36	@ 0x24
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f971 	bl	8005d78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695a      	ldr	r2, [r3, #20]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3708      	adds	r7, #8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08a      	sub	sp, #40	@ 0x28
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	4613      	mov	r3, r2
 8005afa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d175      	bne.n	8005bf8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_UART_Transmit+0x2c>
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e06e      	b.n	8005bfa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2221      	movs	r2, #33	@ 0x21
 8005b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b2a:	f7fd fbdf 	bl	80032ec <HAL_GetTick>
 8005b2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	88fa      	ldrh	r2, [r7, #6]
 8005b34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	88fa      	ldrh	r2, [r7, #6]
 8005b3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b44:	d108      	bne.n	8005b58 <HAL_UART_Transmit+0x6c>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	61bb      	str	r3, [r7, #24]
 8005b56:	e003      	b.n	8005b60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b60:	e02e      	b.n	8005bc0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	2180      	movs	r1, #128	@ 0x80
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 f848 	bl	8005c02 <UART_WaitOnFlagUntilTimeout>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e03a      	b.n	8005bfa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	3302      	adds	r3, #2
 8005b9e:	61bb      	str	r3, [r7, #24]
 8005ba0:	e007      	b.n	8005bb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	781a      	ldrb	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1cb      	bne.n	8005b62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2140      	movs	r1, #64	@ 0x40
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f814 	bl	8005c02 <UART_WaitOnFlagUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e006      	b.n	8005bfa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e000      	b.n	8005bfa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
  }
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3720      	adds	r7, #32
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b086      	sub	sp, #24
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	603b      	str	r3, [r7, #0]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c12:	e03b      	b.n	8005c8c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c1a:	d037      	beq.n	8005c8c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c1c:	f7fd fb66 	bl	80032ec <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	6a3a      	ldr	r2, [r7, #32]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d302      	bcc.n	8005c32 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e03a      	b.n	8005cac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d023      	beq.n	8005c8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b80      	cmp	r3, #128	@ 0x80
 8005c48:	d020      	beq.n	8005c8c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b40      	cmp	r3, #64	@ 0x40
 8005c4e:	d01d      	beq.n	8005c8c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b08      	cmp	r3, #8
 8005c5c:	d116      	bne.n	8005c8c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f81d 	bl	8005cb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e00f      	b.n	8005cac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4013      	ands	r3, r2
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	bf0c      	ite	eq
 8005c9c:	2301      	moveq	r3, #1
 8005c9e:	2300      	movne	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	79fb      	ldrb	r3, [r7, #7]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d0b4      	beq.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b095      	sub	sp, #84	@ 0x54
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	330c      	adds	r3, #12
 8005cda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cdc:	643a      	str	r2, [r7, #64]	@ 0x40
 8005cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ce2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e5      	bne.n	8005cbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3314      	adds	r3, #20
 8005cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	e853 3f00 	ldrex	r3, [r3]
 8005cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f023 0301 	bic.w	r3, r3, #1
 8005d06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3314      	adds	r3, #20
 8005d0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e5      	bne.n	8005cf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d119      	bne.n	8005d60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	330c      	adds	r3, #12
 8005d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f023 0310 	bic.w	r3, r3, #16
 8005d42:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	330c      	adds	r3, #12
 8005d4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d4c:	61ba      	str	r2, [r7, #24]
 8005d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	6979      	ldr	r1, [r7, #20]
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e5      	bne.n	8005d2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d6e:	bf00      	nop
 8005d70:	3754      	adds	r7, #84	@ 0x54
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bc80      	pop	{r7}
 8005d76:	4770      	bx	lr

08005d78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005db2:	f023 030c 	bic.w	r3, r3, #12
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6812      	ldr	r2, [r2, #0]
 8005dba:	68b9      	ldr	r1, [r7, #8]
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a2c      	ldr	r2, [pc, #176]	@ (8005e8c <UART_SetConfig+0x114>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d103      	bne.n	8005de8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005de0:	f7fe ff3e 	bl	8004c60 <HAL_RCC_GetPCLK2Freq>
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	e002      	b.n	8005dee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005de8:	f7fe ff26 	bl	8004c38 <HAL_RCC_GetPCLK1Freq>
 8005dec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	4613      	mov	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	009a      	lsls	r2, r3, #2
 8005df8:	441a      	add	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e04:	4a22      	ldr	r2, [pc, #136]	@ (8005e90 <UART_SetConfig+0x118>)
 8005e06:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0a:	095b      	lsrs	r3, r3, #5
 8005e0c:	0119      	lsls	r1, r3, #4
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4613      	mov	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	009a      	lsls	r2, r3, #2
 8005e18:	441a      	add	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e24:	4b1a      	ldr	r3, [pc, #104]	@ (8005e90 <UART_SetConfig+0x118>)
 8005e26:	fba3 0302 	umull	r0, r3, r3, r2
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	2064      	movs	r0, #100	@ 0x64
 8005e2e:	fb00 f303 	mul.w	r3, r0, r3
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	3332      	adds	r3, #50	@ 0x32
 8005e38:	4a15      	ldr	r2, [pc, #84]	@ (8005e90 <UART_SetConfig+0x118>)
 8005e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3e:	095b      	lsrs	r3, r3, #5
 8005e40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e44:	4419      	add	r1, r3
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009a      	lsls	r2, r3, #2
 8005e50:	441a      	add	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e90 <UART_SetConfig+0x118>)
 8005e5e:	fba3 0302 	umull	r0, r3, r3, r2
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	2064      	movs	r0, #100	@ 0x64
 8005e66:	fb00 f303 	mul.w	r3, r0, r3
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	3332      	adds	r3, #50	@ 0x32
 8005e70:	4a07      	ldr	r2, [pc, #28]	@ (8005e90 <UART_SetConfig+0x118>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	095b      	lsrs	r3, r3, #5
 8005e78:	f003 020f 	and.w	r2, r3, #15
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	440a      	add	r2, r1
 8005e82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40013800 	.word	0x40013800
 8005e90:	51eb851f 	.word	0x51eb851f

08005e94 <__itoa>:
 8005e94:	1e93      	subs	r3, r2, #2
 8005e96:	2b22      	cmp	r3, #34	@ 0x22
 8005e98:	b510      	push	{r4, lr}
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	d904      	bls.n	8005ea8 <__itoa+0x14>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	461c      	mov	r4, r3
 8005ea2:	700b      	strb	r3, [r1, #0]
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	bd10      	pop	{r4, pc}
 8005ea8:	2a0a      	cmp	r2, #10
 8005eaa:	d109      	bne.n	8005ec0 <__itoa+0x2c>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	da07      	bge.n	8005ec0 <__itoa+0x2c>
 8005eb0:	232d      	movs	r3, #45	@ 0x2d
 8005eb2:	700b      	strb	r3, [r1, #0]
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	4240      	negs	r0, r0
 8005eb8:	4421      	add	r1, r4
 8005eba:	f000 fd25 	bl	8006908 <__utoa>
 8005ebe:	e7f1      	b.n	8005ea4 <__itoa+0x10>
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	e7f9      	b.n	8005eb8 <__itoa+0x24>

08005ec4 <itoa>:
 8005ec4:	f7ff bfe6 	b.w	8005e94 <__itoa>

08005ec8 <__cvt>:
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ece:	461d      	mov	r5, r3
 8005ed0:	bfbb      	ittet	lt
 8005ed2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005ed6:	461d      	movlt	r5, r3
 8005ed8:	2300      	movge	r3, #0
 8005eda:	232d      	movlt	r3, #45	@ 0x2d
 8005edc:	b088      	sub	sp, #32
 8005ede:	4614      	mov	r4, r2
 8005ee0:	bfb8      	it	lt
 8005ee2:	4614      	movlt	r4, r2
 8005ee4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005ee6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005ee8:	7013      	strb	r3, [r2, #0]
 8005eea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005eec:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005ef0:	f023 0820 	bic.w	r8, r3, #32
 8005ef4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ef8:	d005      	beq.n	8005f06 <__cvt+0x3e>
 8005efa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005efe:	d100      	bne.n	8005f02 <__cvt+0x3a>
 8005f00:	3601      	adds	r6, #1
 8005f02:	2302      	movs	r3, #2
 8005f04:	e000      	b.n	8005f08 <__cvt+0x40>
 8005f06:	2303      	movs	r3, #3
 8005f08:	aa07      	add	r2, sp, #28
 8005f0a:	9204      	str	r2, [sp, #16]
 8005f0c:	aa06      	add	r2, sp, #24
 8005f0e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005f12:	e9cd 3600 	strd	r3, r6, [sp]
 8005f16:	4622      	mov	r2, r4
 8005f18:	462b      	mov	r3, r5
 8005f1a:	f000 fe25 	bl	8006b68 <_dtoa_r>
 8005f1e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005f22:	4607      	mov	r7, r0
 8005f24:	d119      	bne.n	8005f5a <__cvt+0x92>
 8005f26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005f28:	07db      	lsls	r3, r3, #31
 8005f2a:	d50e      	bpl.n	8005f4a <__cvt+0x82>
 8005f2c:	eb00 0906 	add.w	r9, r0, r6
 8005f30:	2200      	movs	r2, #0
 8005f32:	2300      	movs	r3, #0
 8005f34:	4620      	mov	r0, r4
 8005f36:	4629      	mov	r1, r5
 8005f38:	f7fa fdea 	bl	8000b10 <__aeabi_dcmpeq>
 8005f3c:	b108      	cbz	r0, 8005f42 <__cvt+0x7a>
 8005f3e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005f42:	2230      	movs	r2, #48	@ 0x30
 8005f44:	9b07      	ldr	r3, [sp, #28]
 8005f46:	454b      	cmp	r3, r9
 8005f48:	d31e      	bcc.n	8005f88 <__cvt+0xc0>
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	9b07      	ldr	r3, [sp, #28]
 8005f4e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005f50:	1bdb      	subs	r3, r3, r7
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	b008      	add	sp, #32
 8005f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f5a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f5e:	eb00 0906 	add.w	r9, r0, r6
 8005f62:	d1e5      	bne.n	8005f30 <__cvt+0x68>
 8005f64:	7803      	ldrb	r3, [r0, #0]
 8005f66:	2b30      	cmp	r3, #48	@ 0x30
 8005f68:	d10a      	bne.n	8005f80 <__cvt+0xb8>
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	4620      	mov	r0, r4
 8005f70:	4629      	mov	r1, r5
 8005f72:	f7fa fdcd 	bl	8000b10 <__aeabi_dcmpeq>
 8005f76:	b918      	cbnz	r0, 8005f80 <__cvt+0xb8>
 8005f78:	f1c6 0601 	rsb	r6, r6, #1
 8005f7c:	f8ca 6000 	str.w	r6, [sl]
 8005f80:	f8da 3000 	ldr.w	r3, [sl]
 8005f84:	4499      	add	r9, r3
 8005f86:	e7d3      	b.n	8005f30 <__cvt+0x68>
 8005f88:	1c59      	adds	r1, r3, #1
 8005f8a:	9107      	str	r1, [sp, #28]
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	e7d9      	b.n	8005f44 <__cvt+0x7c>

08005f90 <__exponent>:
 8005f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f92:	2900      	cmp	r1, #0
 8005f94:	bfb6      	itet	lt
 8005f96:	232d      	movlt	r3, #45	@ 0x2d
 8005f98:	232b      	movge	r3, #43	@ 0x2b
 8005f9a:	4249      	neglt	r1, r1
 8005f9c:	2909      	cmp	r1, #9
 8005f9e:	7002      	strb	r2, [r0, #0]
 8005fa0:	7043      	strb	r3, [r0, #1]
 8005fa2:	dd29      	ble.n	8005ff8 <__exponent+0x68>
 8005fa4:	f10d 0307 	add.w	r3, sp, #7
 8005fa8:	461d      	mov	r5, r3
 8005faa:	270a      	movs	r7, #10
 8005fac:	fbb1 f6f7 	udiv	r6, r1, r7
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	fb07 1416 	mls	r4, r7, r6, r1
 8005fb6:	3430      	adds	r4, #48	@ 0x30
 8005fb8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005fbc:	460c      	mov	r4, r1
 8005fbe:	2c63      	cmp	r4, #99	@ 0x63
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005fc6:	dcf1      	bgt.n	8005fac <__exponent+0x1c>
 8005fc8:	3130      	adds	r1, #48	@ 0x30
 8005fca:	1e94      	subs	r4, r2, #2
 8005fcc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005fd0:	4623      	mov	r3, r4
 8005fd2:	1c41      	adds	r1, r0, #1
 8005fd4:	42ab      	cmp	r3, r5
 8005fd6:	d30a      	bcc.n	8005fee <__exponent+0x5e>
 8005fd8:	f10d 0309 	add.w	r3, sp, #9
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	42ac      	cmp	r4, r5
 8005fe0:	bf88      	it	hi
 8005fe2:	2300      	movhi	r3, #0
 8005fe4:	3302      	adds	r3, #2
 8005fe6:	4403      	add	r3, r0
 8005fe8:	1a18      	subs	r0, r3, r0
 8005fea:	b003      	add	sp, #12
 8005fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fee:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005ff2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005ff6:	e7ed      	b.n	8005fd4 <__exponent+0x44>
 8005ff8:	2330      	movs	r3, #48	@ 0x30
 8005ffa:	3130      	adds	r1, #48	@ 0x30
 8005ffc:	7083      	strb	r3, [r0, #2]
 8005ffe:	70c1      	strb	r1, [r0, #3]
 8006000:	1d03      	adds	r3, r0, #4
 8006002:	e7f1      	b.n	8005fe8 <__exponent+0x58>

08006004 <_printf_float>:
 8006004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006008:	b091      	sub	sp, #68	@ 0x44
 800600a:	460c      	mov	r4, r1
 800600c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006010:	4616      	mov	r6, r2
 8006012:	461f      	mov	r7, r3
 8006014:	4605      	mov	r5, r0
 8006016:	f000 fcdf 	bl	80069d8 <_localeconv_r>
 800601a:	6803      	ldr	r3, [r0, #0]
 800601c:	4618      	mov	r0, r3
 800601e:	9308      	str	r3, [sp, #32]
 8006020:	f7fa f896 	bl	8000150 <strlen>
 8006024:	2300      	movs	r3, #0
 8006026:	930e      	str	r3, [sp, #56]	@ 0x38
 8006028:	f8d8 3000 	ldr.w	r3, [r8]
 800602c:	9009      	str	r0, [sp, #36]	@ 0x24
 800602e:	3307      	adds	r3, #7
 8006030:	f023 0307 	bic.w	r3, r3, #7
 8006034:	f103 0208 	add.w	r2, r3, #8
 8006038:	f894 a018 	ldrb.w	sl, [r4, #24]
 800603c:	f8d4 b000 	ldr.w	fp, [r4]
 8006040:	f8c8 2000 	str.w	r2, [r8]
 8006044:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006048:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800604c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800604e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006052:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006056:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800605a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800605e:	4b9c      	ldr	r3, [pc, #624]	@ (80062d0 <_printf_float+0x2cc>)
 8006060:	f7fa fd88 	bl	8000b74 <__aeabi_dcmpun>
 8006064:	bb70      	cbnz	r0, 80060c4 <_printf_float+0xc0>
 8006066:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800606a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800606e:	4b98      	ldr	r3, [pc, #608]	@ (80062d0 <_printf_float+0x2cc>)
 8006070:	f7fa fd62 	bl	8000b38 <__aeabi_dcmple>
 8006074:	bb30      	cbnz	r0, 80060c4 <_printf_float+0xc0>
 8006076:	2200      	movs	r2, #0
 8006078:	2300      	movs	r3, #0
 800607a:	4640      	mov	r0, r8
 800607c:	4649      	mov	r1, r9
 800607e:	f7fa fd51 	bl	8000b24 <__aeabi_dcmplt>
 8006082:	b110      	cbz	r0, 800608a <_printf_float+0x86>
 8006084:	232d      	movs	r3, #45	@ 0x2d
 8006086:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800608a:	4a92      	ldr	r2, [pc, #584]	@ (80062d4 <_printf_float+0x2d0>)
 800608c:	4b92      	ldr	r3, [pc, #584]	@ (80062d8 <_printf_float+0x2d4>)
 800608e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006092:	bf94      	ite	ls
 8006094:	4690      	movls	r8, r2
 8006096:	4698      	movhi	r8, r3
 8006098:	2303      	movs	r3, #3
 800609a:	f04f 0900 	mov.w	r9, #0
 800609e:	6123      	str	r3, [r4, #16]
 80060a0:	f02b 0304 	bic.w	r3, fp, #4
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	4633      	mov	r3, r6
 80060a8:	4621      	mov	r1, r4
 80060aa:	4628      	mov	r0, r5
 80060ac:	9700      	str	r7, [sp, #0]
 80060ae:	aa0f      	add	r2, sp, #60	@ 0x3c
 80060b0:	f000 f9d4 	bl	800645c <_printf_common>
 80060b4:	3001      	adds	r0, #1
 80060b6:	f040 8090 	bne.w	80061da <_printf_float+0x1d6>
 80060ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060be:	b011      	add	sp, #68	@ 0x44
 80060c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c4:	4642      	mov	r2, r8
 80060c6:	464b      	mov	r3, r9
 80060c8:	4640      	mov	r0, r8
 80060ca:	4649      	mov	r1, r9
 80060cc:	f7fa fd52 	bl	8000b74 <__aeabi_dcmpun>
 80060d0:	b148      	cbz	r0, 80060e6 <_printf_float+0xe2>
 80060d2:	464b      	mov	r3, r9
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	bfb8      	it	lt
 80060d8:	232d      	movlt	r3, #45	@ 0x2d
 80060da:	4a80      	ldr	r2, [pc, #512]	@ (80062dc <_printf_float+0x2d8>)
 80060dc:	bfb8      	it	lt
 80060de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80060e2:	4b7f      	ldr	r3, [pc, #508]	@ (80062e0 <_printf_float+0x2dc>)
 80060e4:	e7d3      	b.n	800608e <_printf_float+0x8a>
 80060e6:	6863      	ldr	r3, [r4, #4]
 80060e8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	d13f      	bne.n	8006170 <_printf_float+0x16c>
 80060f0:	2306      	movs	r3, #6
 80060f2:	6063      	str	r3, [r4, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80060fa:	6023      	str	r3, [r4, #0]
 80060fc:	9206      	str	r2, [sp, #24]
 80060fe:	aa0e      	add	r2, sp, #56	@ 0x38
 8006100:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006104:	aa0d      	add	r2, sp, #52	@ 0x34
 8006106:	9203      	str	r2, [sp, #12]
 8006108:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800610c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006110:	6863      	ldr	r3, [r4, #4]
 8006112:	4642      	mov	r2, r8
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	4628      	mov	r0, r5
 8006118:	464b      	mov	r3, r9
 800611a:	910a      	str	r1, [sp, #40]	@ 0x28
 800611c:	f7ff fed4 	bl	8005ec8 <__cvt>
 8006120:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006122:	4680      	mov	r8, r0
 8006124:	2947      	cmp	r1, #71	@ 0x47
 8006126:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006128:	d128      	bne.n	800617c <_printf_float+0x178>
 800612a:	1cc8      	adds	r0, r1, #3
 800612c:	db02      	blt.n	8006134 <_printf_float+0x130>
 800612e:	6863      	ldr	r3, [r4, #4]
 8006130:	4299      	cmp	r1, r3
 8006132:	dd40      	ble.n	80061b6 <_printf_float+0x1b2>
 8006134:	f1aa 0a02 	sub.w	sl, sl, #2
 8006138:	fa5f fa8a 	uxtb.w	sl, sl
 800613c:	4652      	mov	r2, sl
 800613e:	3901      	subs	r1, #1
 8006140:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006144:	910d      	str	r1, [sp, #52]	@ 0x34
 8006146:	f7ff ff23 	bl	8005f90 <__exponent>
 800614a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800614c:	4681      	mov	r9, r0
 800614e:	1813      	adds	r3, r2, r0
 8006150:	2a01      	cmp	r2, #1
 8006152:	6123      	str	r3, [r4, #16]
 8006154:	dc02      	bgt.n	800615c <_printf_float+0x158>
 8006156:	6822      	ldr	r2, [r4, #0]
 8006158:	07d2      	lsls	r2, r2, #31
 800615a:	d501      	bpl.n	8006160 <_printf_float+0x15c>
 800615c:	3301      	adds	r3, #1
 800615e:	6123      	str	r3, [r4, #16]
 8006160:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006164:	2b00      	cmp	r3, #0
 8006166:	d09e      	beq.n	80060a6 <_printf_float+0xa2>
 8006168:	232d      	movs	r3, #45	@ 0x2d
 800616a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800616e:	e79a      	b.n	80060a6 <_printf_float+0xa2>
 8006170:	2947      	cmp	r1, #71	@ 0x47
 8006172:	d1bf      	bne.n	80060f4 <_printf_float+0xf0>
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1bd      	bne.n	80060f4 <_printf_float+0xf0>
 8006178:	2301      	movs	r3, #1
 800617a:	e7ba      	b.n	80060f2 <_printf_float+0xee>
 800617c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006180:	d9dc      	bls.n	800613c <_printf_float+0x138>
 8006182:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006186:	d118      	bne.n	80061ba <_printf_float+0x1b6>
 8006188:	2900      	cmp	r1, #0
 800618a:	6863      	ldr	r3, [r4, #4]
 800618c:	dd0b      	ble.n	80061a6 <_printf_float+0x1a2>
 800618e:	6121      	str	r1, [r4, #16]
 8006190:	b913      	cbnz	r3, 8006198 <_printf_float+0x194>
 8006192:	6822      	ldr	r2, [r4, #0]
 8006194:	07d0      	lsls	r0, r2, #31
 8006196:	d502      	bpl.n	800619e <_printf_float+0x19a>
 8006198:	3301      	adds	r3, #1
 800619a:	440b      	add	r3, r1
 800619c:	6123      	str	r3, [r4, #16]
 800619e:	f04f 0900 	mov.w	r9, #0
 80061a2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80061a4:	e7dc      	b.n	8006160 <_printf_float+0x15c>
 80061a6:	b913      	cbnz	r3, 80061ae <_printf_float+0x1aa>
 80061a8:	6822      	ldr	r2, [r4, #0]
 80061aa:	07d2      	lsls	r2, r2, #31
 80061ac:	d501      	bpl.n	80061b2 <_printf_float+0x1ae>
 80061ae:	3302      	adds	r3, #2
 80061b0:	e7f4      	b.n	800619c <_printf_float+0x198>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e7f2      	b.n	800619c <_printf_float+0x198>
 80061b6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80061ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061bc:	4299      	cmp	r1, r3
 80061be:	db05      	blt.n	80061cc <_printf_float+0x1c8>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	6121      	str	r1, [r4, #16]
 80061c4:	07d8      	lsls	r0, r3, #31
 80061c6:	d5ea      	bpl.n	800619e <_printf_float+0x19a>
 80061c8:	1c4b      	adds	r3, r1, #1
 80061ca:	e7e7      	b.n	800619c <_printf_float+0x198>
 80061cc:	2900      	cmp	r1, #0
 80061ce:	bfcc      	ite	gt
 80061d0:	2201      	movgt	r2, #1
 80061d2:	f1c1 0202 	rsble	r2, r1, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	e7e0      	b.n	800619c <_printf_float+0x198>
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	055a      	lsls	r2, r3, #21
 80061de:	d407      	bmi.n	80061f0 <_printf_float+0x1ec>
 80061e0:	6923      	ldr	r3, [r4, #16]
 80061e2:	4642      	mov	r2, r8
 80061e4:	4631      	mov	r1, r6
 80061e6:	4628      	mov	r0, r5
 80061e8:	47b8      	blx	r7
 80061ea:	3001      	adds	r0, #1
 80061ec:	d12b      	bne.n	8006246 <_printf_float+0x242>
 80061ee:	e764      	b.n	80060ba <_printf_float+0xb6>
 80061f0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80061f4:	f240 80dc 	bls.w	80063b0 <_printf_float+0x3ac>
 80061f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80061fc:	2200      	movs	r2, #0
 80061fe:	2300      	movs	r3, #0
 8006200:	f7fa fc86 	bl	8000b10 <__aeabi_dcmpeq>
 8006204:	2800      	cmp	r0, #0
 8006206:	d033      	beq.n	8006270 <_printf_float+0x26c>
 8006208:	2301      	movs	r3, #1
 800620a:	4631      	mov	r1, r6
 800620c:	4628      	mov	r0, r5
 800620e:	4a35      	ldr	r2, [pc, #212]	@ (80062e4 <_printf_float+0x2e0>)
 8006210:	47b8      	blx	r7
 8006212:	3001      	adds	r0, #1
 8006214:	f43f af51 	beq.w	80060ba <_printf_float+0xb6>
 8006218:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800621c:	4543      	cmp	r3, r8
 800621e:	db02      	blt.n	8006226 <_printf_float+0x222>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	07d8      	lsls	r0, r3, #31
 8006224:	d50f      	bpl.n	8006246 <_printf_float+0x242>
 8006226:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800622a:	4631      	mov	r1, r6
 800622c:	4628      	mov	r0, r5
 800622e:	47b8      	blx	r7
 8006230:	3001      	adds	r0, #1
 8006232:	f43f af42 	beq.w	80060ba <_printf_float+0xb6>
 8006236:	f04f 0900 	mov.w	r9, #0
 800623a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800623e:	f104 0a1a 	add.w	sl, r4, #26
 8006242:	45c8      	cmp	r8, r9
 8006244:	dc09      	bgt.n	800625a <_printf_float+0x256>
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	079b      	lsls	r3, r3, #30
 800624a:	f100 8102 	bmi.w	8006452 <_printf_float+0x44e>
 800624e:	68e0      	ldr	r0, [r4, #12]
 8006250:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006252:	4298      	cmp	r0, r3
 8006254:	bfb8      	it	lt
 8006256:	4618      	movlt	r0, r3
 8006258:	e731      	b.n	80060be <_printf_float+0xba>
 800625a:	2301      	movs	r3, #1
 800625c:	4652      	mov	r2, sl
 800625e:	4631      	mov	r1, r6
 8006260:	4628      	mov	r0, r5
 8006262:	47b8      	blx	r7
 8006264:	3001      	adds	r0, #1
 8006266:	f43f af28 	beq.w	80060ba <_printf_float+0xb6>
 800626a:	f109 0901 	add.w	r9, r9, #1
 800626e:	e7e8      	b.n	8006242 <_printf_float+0x23e>
 8006270:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006272:	2b00      	cmp	r3, #0
 8006274:	dc38      	bgt.n	80062e8 <_printf_float+0x2e4>
 8006276:	2301      	movs	r3, #1
 8006278:	4631      	mov	r1, r6
 800627a:	4628      	mov	r0, r5
 800627c:	4a19      	ldr	r2, [pc, #100]	@ (80062e4 <_printf_float+0x2e0>)
 800627e:	47b8      	blx	r7
 8006280:	3001      	adds	r0, #1
 8006282:	f43f af1a 	beq.w	80060ba <_printf_float+0xb6>
 8006286:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800628a:	ea59 0303 	orrs.w	r3, r9, r3
 800628e:	d102      	bne.n	8006296 <_printf_float+0x292>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	07d9      	lsls	r1, r3, #31
 8006294:	d5d7      	bpl.n	8006246 <_printf_float+0x242>
 8006296:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	f43f af0a 	beq.w	80060ba <_printf_float+0xb6>
 80062a6:	f04f 0a00 	mov.w	sl, #0
 80062aa:	f104 0b1a 	add.w	fp, r4, #26
 80062ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062b0:	425b      	negs	r3, r3
 80062b2:	4553      	cmp	r3, sl
 80062b4:	dc01      	bgt.n	80062ba <_printf_float+0x2b6>
 80062b6:	464b      	mov	r3, r9
 80062b8:	e793      	b.n	80061e2 <_printf_float+0x1de>
 80062ba:	2301      	movs	r3, #1
 80062bc:	465a      	mov	r2, fp
 80062be:	4631      	mov	r1, r6
 80062c0:	4628      	mov	r0, r5
 80062c2:	47b8      	blx	r7
 80062c4:	3001      	adds	r0, #1
 80062c6:	f43f aef8 	beq.w	80060ba <_printf_float+0xb6>
 80062ca:	f10a 0a01 	add.w	sl, sl, #1
 80062ce:	e7ee      	b.n	80062ae <_printf_float+0x2aa>
 80062d0:	7fefffff 	.word	0x7fefffff
 80062d4:	0800a5de 	.word	0x0800a5de
 80062d8:	0800a5e2 	.word	0x0800a5e2
 80062dc:	0800a5e6 	.word	0x0800a5e6
 80062e0:	0800a5ea 	.word	0x0800a5ea
 80062e4:	0800a5ee 	.word	0x0800a5ee
 80062e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80062ea:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80062ee:	4553      	cmp	r3, sl
 80062f0:	bfa8      	it	ge
 80062f2:	4653      	movge	r3, sl
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	4699      	mov	r9, r3
 80062f8:	dc36      	bgt.n	8006368 <_printf_float+0x364>
 80062fa:	f04f 0b00 	mov.w	fp, #0
 80062fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006302:	f104 021a 	add.w	r2, r4, #26
 8006306:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006308:	930a      	str	r3, [sp, #40]	@ 0x28
 800630a:	eba3 0309 	sub.w	r3, r3, r9
 800630e:	455b      	cmp	r3, fp
 8006310:	dc31      	bgt.n	8006376 <_printf_float+0x372>
 8006312:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006314:	459a      	cmp	sl, r3
 8006316:	dc3a      	bgt.n	800638e <_printf_float+0x38a>
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	07da      	lsls	r2, r3, #31
 800631c:	d437      	bmi.n	800638e <_printf_float+0x38a>
 800631e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006320:	ebaa 0903 	sub.w	r9, sl, r3
 8006324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006326:	ebaa 0303 	sub.w	r3, sl, r3
 800632a:	4599      	cmp	r9, r3
 800632c:	bfa8      	it	ge
 800632e:	4699      	movge	r9, r3
 8006330:	f1b9 0f00 	cmp.w	r9, #0
 8006334:	dc33      	bgt.n	800639e <_printf_float+0x39a>
 8006336:	f04f 0800 	mov.w	r8, #0
 800633a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800633e:	f104 0b1a 	add.w	fp, r4, #26
 8006342:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006344:	ebaa 0303 	sub.w	r3, sl, r3
 8006348:	eba3 0309 	sub.w	r3, r3, r9
 800634c:	4543      	cmp	r3, r8
 800634e:	f77f af7a 	ble.w	8006246 <_printf_float+0x242>
 8006352:	2301      	movs	r3, #1
 8006354:	465a      	mov	r2, fp
 8006356:	4631      	mov	r1, r6
 8006358:	4628      	mov	r0, r5
 800635a:	47b8      	blx	r7
 800635c:	3001      	adds	r0, #1
 800635e:	f43f aeac 	beq.w	80060ba <_printf_float+0xb6>
 8006362:	f108 0801 	add.w	r8, r8, #1
 8006366:	e7ec      	b.n	8006342 <_printf_float+0x33e>
 8006368:	4642      	mov	r2, r8
 800636a:	4631      	mov	r1, r6
 800636c:	4628      	mov	r0, r5
 800636e:	47b8      	blx	r7
 8006370:	3001      	adds	r0, #1
 8006372:	d1c2      	bne.n	80062fa <_printf_float+0x2f6>
 8006374:	e6a1      	b.n	80060ba <_printf_float+0xb6>
 8006376:	2301      	movs	r3, #1
 8006378:	4631      	mov	r1, r6
 800637a:	4628      	mov	r0, r5
 800637c:	920a      	str	r2, [sp, #40]	@ 0x28
 800637e:	47b8      	blx	r7
 8006380:	3001      	adds	r0, #1
 8006382:	f43f ae9a 	beq.w	80060ba <_printf_float+0xb6>
 8006386:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006388:	f10b 0b01 	add.w	fp, fp, #1
 800638c:	e7bb      	b.n	8006306 <_printf_float+0x302>
 800638e:	4631      	mov	r1, r6
 8006390:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006394:	4628      	mov	r0, r5
 8006396:	47b8      	blx	r7
 8006398:	3001      	adds	r0, #1
 800639a:	d1c0      	bne.n	800631e <_printf_float+0x31a>
 800639c:	e68d      	b.n	80060ba <_printf_float+0xb6>
 800639e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063a0:	464b      	mov	r3, r9
 80063a2:	4631      	mov	r1, r6
 80063a4:	4628      	mov	r0, r5
 80063a6:	4442      	add	r2, r8
 80063a8:	47b8      	blx	r7
 80063aa:	3001      	adds	r0, #1
 80063ac:	d1c3      	bne.n	8006336 <_printf_float+0x332>
 80063ae:	e684      	b.n	80060ba <_printf_float+0xb6>
 80063b0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80063b4:	f1ba 0f01 	cmp.w	sl, #1
 80063b8:	dc01      	bgt.n	80063be <_printf_float+0x3ba>
 80063ba:	07db      	lsls	r3, r3, #31
 80063bc:	d536      	bpl.n	800642c <_printf_float+0x428>
 80063be:	2301      	movs	r3, #1
 80063c0:	4642      	mov	r2, r8
 80063c2:	4631      	mov	r1, r6
 80063c4:	4628      	mov	r0, r5
 80063c6:	47b8      	blx	r7
 80063c8:	3001      	adds	r0, #1
 80063ca:	f43f ae76 	beq.w	80060ba <_printf_float+0xb6>
 80063ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80063d2:	4631      	mov	r1, r6
 80063d4:	4628      	mov	r0, r5
 80063d6:	47b8      	blx	r7
 80063d8:	3001      	adds	r0, #1
 80063da:	f43f ae6e 	beq.w	80060ba <_printf_float+0xb6>
 80063de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80063e2:	2200      	movs	r2, #0
 80063e4:	2300      	movs	r3, #0
 80063e6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80063ea:	f7fa fb91 	bl	8000b10 <__aeabi_dcmpeq>
 80063ee:	b9c0      	cbnz	r0, 8006422 <_printf_float+0x41e>
 80063f0:	4653      	mov	r3, sl
 80063f2:	f108 0201 	add.w	r2, r8, #1
 80063f6:	4631      	mov	r1, r6
 80063f8:	4628      	mov	r0, r5
 80063fa:	47b8      	blx	r7
 80063fc:	3001      	adds	r0, #1
 80063fe:	d10c      	bne.n	800641a <_printf_float+0x416>
 8006400:	e65b      	b.n	80060ba <_printf_float+0xb6>
 8006402:	2301      	movs	r3, #1
 8006404:	465a      	mov	r2, fp
 8006406:	4631      	mov	r1, r6
 8006408:	4628      	mov	r0, r5
 800640a:	47b8      	blx	r7
 800640c:	3001      	adds	r0, #1
 800640e:	f43f ae54 	beq.w	80060ba <_printf_float+0xb6>
 8006412:	f108 0801 	add.w	r8, r8, #1
 8006416:	45d0      	cmp	r8, sl
 8006418:	dbf3      	blt.n	8006402 <_printf_float+0x3fe>
 800641a:	464b      	mov	r3, r9
 800641c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006420:	e6e0      	b.n	80061e4 <_printf_float+0x1e0>
 8006422:	f04f 0800 	mov.w	r8, #0
 8006426:	f104 0b1a 	add.w	fp, r4, #26
 800642a:	e7f4      	b.n	8006416 <_printf_float+0x412>
 800642c:	2301      	movs	r3, #1
 800642e:	4642      	mov	r2, r8
 8006430:	e7e1      	b.n	80063f6 <_printf_float+0x3f2>
 8006432:	2301      	movs	r3, #1
 8006434:	464a      	mov	r2, r9
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	47b8      	blx	r7
 800643c:	3001      	adds	r0, #1
 800643e:	f43f ae3c 	beq.w	80060ba <_printf_float+0xb6>
 8006442:	f108 0801 	add.w	r8, r8, #1
 8006446:	68e3      	ldr	r3, [r4, #12]
 8006448:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800644a:	1a5b      	subs	r3, r3, r1
 800644c:	4543      	cmp	r3, r8
 800644e:	dcf0      	bgt.n	8006432 <_printf_float+0x42e>
 8006450:	e6fd      	b.n	800624e <_printf_float+0x24a>
 8006452:	f04f 0800 	mov.w	r8, #0
 8006456:	f104 0919 	add.w	r9, r4, #25
 800645a:	e7f4      	b.n	8006446 <_printf_float+0x442>

0800645c <_printf_common>:
 800645c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006460:	4616      	mov	r6, r2
 8006462:	4698      	mov	r8, r3
 8006464:	688a      	ldr	r2, [r1, #8]
 8006466:	690b      	ldr	r3, [r1, #16]
 8006468:	4607      	mov	r7, r0
 800646a:	4293      	cmp	r3, r2
 800646c:	bfb8      	it	lt
 800646e:	4613      	movlt	r3, r2
 8006470:	6033      	str	r3, [r6, #0]
 8006472:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006476:	460c      	mov	r4, r1
 8006478:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800647c:	b10a      	cbz	r2, 8006482 <_printf_common+0x26>
 800647e:	3301      	adds	r3, #1
 8006480:	6033      	str	r3, [r6, #0]
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	0699      	lsls	r1, r3, #26
 8006486:	bf42      	ittt	mi
 8006488:	6833      	ldrmi	r3, [r6, #0]
 800648a:	3302      	addmi	r3, #2
 800648c:	6033      	strmi	r3, [r6, #0]
 800648e:	6825      	ldr	r5, [r4, #0]
 8006490:	f015 0506 	ands.w	r5, r5, #6
 8006494:	d106      	bne.n	80064a4 <_printf_common+0x48>
 8006496:	f104 0a19 	add.w	sl, r4, #25
 800649a:	68e3      	ldr	r3, [r4, #12]
 800649c:	6832      	ldr	r2, [r6, #0]
 800649e:	1a9b      	subs	r3, r3, r2
 80064a0:	42ab      	cmp	r3, r5
 80064a2:	dc2b      	bgt.n	80064fc <_printf_common+0xa0>
 80064a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064a8:	6822      	ldr	r2, [r4, #0]
 80064aa:	3b00      	subs	r3, #0
 80064ac:	bf18      	it	ne
 80064ae:	2301      	movne	r3, #1
 80064b0:	0692      	lsls	r2, r2, #26
 80064b2:	d430      	bmi.n	8006516 <_printf_common+0xba>
 80064b4:	4641      	mov	r1, r8
 80064b6:	4638      	mov	r0, r7
 80064b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064bc:	47c8      	blx	r9
 80064be:	3001      	adds	r0, #1
 80064c0:	d023      	beq.n	800650a <_printf_common+0xae>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	6922      	ldr	r2, [r4, #16]
 80064c6:	f003 0306 	and.w	r3, r3, #6
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	bf14      	ite	ne
 80064ce:	2500      	movne	r5, #0
 80064d0:	6833      	ldreq	r3, [r6, #0]
 80064d2:	f04f 0600 	mov.w	r6, #0
 80064d6:	bf08      	it	eq
 80064d8:	68e5      	ldreq	r5, [r4, #12]
 80064da:	f104 041a 	add.w	r4, r4, #26
 80064de:	bf08      	it	eq
 80064e0:	1aed      	subeq	r5, r5, r3
 80064e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80064e6:	bf08      	it	eq
 80064e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064ec:	4293      	cmp	r3, r2
 80064ee:	bfc4      	itt	gt
 80064f0:	1a9b      	subgt	r3, r3, r2
 80064f2:	18ed      	addgt	r5, r5, r3
 80064f4:	42b5      	cmp	r5, r6
 80064f6:	d11a      	bne.n	800652e <_printf_common+0xd2>
 80064f8:	2000      	movs	r0, #0
 80064fa:	e008      	b.n	800650e <_printf_common+0xb2>
 80064fc:	2301      	movs	r3, #1
 80064fe:	4652      	mov	r2, sl
 8006500:	4641      	mov	r1, r8
 8006502:	4638      	mov	r0, r7
 8006504:	47c8      	blx	r9
 8006506:	3001      	adds	r0, #1
 8006508:	d103      	bne.n	8006512 <_printf_common+0xb6>
 800650a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800650e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006512:	3501      	adds	r5, #1
 8006514:	e7c1      	b.n	800649a <_printf_common+0x3e>
 8006516:	2030      	movs	r0, #48	@ 0x30
 8006518:	18e1      	adds	r1, r4, r3
 800651a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006524:	4422      	add	r2, r4
 8006526:	3302      	adds	r3, #2
 8006528:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800652c:	e7c2      	b.n	80064b4 <_printf_common+0x58>
 800652e:	2301      	movs	r3, #1
 8006530:	4622      	mov	r2, r4
 8006532:	4641      	mov	r1, r8
 8006534:	4638      	mov	r0, r7
 8006536:	47c8      	blx	r9
 8006538:	3001      	adds	r0, #1
 800653a:	d0e6      	beq.n	800650a <_printf_common+0xae>
 800653c:	3601      	adds	r6, #1
 800653e:	e7d9      	b.n	80064f4 <_printf_common+0x98>

08006540 <_printf_i>:
 8006540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006544:	7e0f      	ldrb	r7, [r1, #24]
 8006546:	4691      	mov	r9, r2
 8006548:	2f78      	cmp	r7, #120	@ 0x78
 800654a:	4680      	mov	r8, r0
 800654c:	460c      	mov	r4, r1
 800654e:	469a      	mov	sl, r3
 8006550:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006552:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006556:	d807      	bhi.n	8006568 <_printf_i+0x28>
 8006558:	2f62      	cmp	r7, #98	@ 0x62
 800655a:	d80a      	bhi.n	8006572 <_printf_i+0x32>
 800655c:	2f00      	cmp	r7, #0
 800655e:	f000 80d3 	beq.w	8006708 <_printf_i+0x1c8>
 8006562:	2f58      	cmp	r7, #88	@ 0x58
 8006564:	f000 80ba 	beq.w	80066dc <_printf_i+0x19c>
 8006568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800656c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006570:	e03a      	b.n	80065e8 <_printf_i+0xa8>
 8006572:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006576:	2b15      	cmp	r3, #21
 8006578:	d8f6      	bhi.n	8006568 <_printf_i+0x28>
 800657a:	a101      	add	r1, pc, #4	@ (adr r1, 8006580 <_printf_i+0x40>)
 800657c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006580:	080065d9 	.word	0x080065d9
 8006584:	080065ed 	.word	0x080065ed
 8006588:	08006569 	.word	0x08006569
 800658c:	08006569 	.word	0x08006569
 8006590:	08006569 	.word	0x08006569
 8006594:	08006569 	.word	0x08006569
 8006598:	080065ed 	.word	0x080065ed
 800659c:	08006569 	.word	0x08006569
 80065a0:	08006569 	.word	0x08006569
 80065a4:	08006569 	.word	0x08006569
 80065a8:	08006569 	.word	0x08006569
 80065ac:	080066ef 	.word	0x080066ef
 80065b0:	08006617 	.word	0x08006617
 80065b4:	080066a9 	.word	0x080066a9
 80065b8:	08006569 	.word	0x08006569
 80065bc:	08006569 	.word	0x08006569
 80065c0:	08006711 	.word	0x08006711
 80065c4:	08006569 	.word	0x08006569
 80065c8:	08006617 	.word	0x08006617
 80065cc:	08006569 	.word	0x08006569
 80065d0:	08006569 	.word	0x08006569
 80065d4:	080066b1 	.word	0x080066b1
 80065d8:	6833      	ldr	r3, [r6, #0]
 80065da:	1d1a      	adds	r2, r3, #4
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6032      	str	r2, [r6, #0]
 80065e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065e8:	2301      	movs	r3, #1
 80065ea:	e09e      	b.n	800672a <_printf_i+0x1ea>
 80065ec:	6833      	ldr	r3, [r6, #0]
 80065ee:	6820      	ldr	r0, [r4, #0]
 80065f0:	1d19      	adds	r1, r3, #4
 80065f2:	6031      	str	r1, [r6, #0]
 80065f4:	0606      	lsls	r6, r0, #24
 80065f6:	d501      	bpl.n	80065fc <_printf_i+0xbc>
 80065f8:	681d      	ldr	r5, [r3, #0]
 80065fa:	e003      	b.n	8006604 <_printf_i+0xc4>
 80065fc:	0645      	lsls	r5, r0, #25
 80065fe:	d5fb      	bpl.n	80065f8 <_printf_i+0xb8>
 8006600:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006604:	2d00      	cmp	r5, #0
 8006606:	da03      	bge.n	8006610 <_printf_i+0xd0>
 8006608:	232d      	movs	r3, #45	@ 0x2d
 800660a:	426d      	negs	r5, r5
 800660c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006610:	230a      	movs	r3, #10
 8006612:	4859      	ldr	r0, [pc, #356]	@ (8006778 <_printf_i+0x238>)
 8006614:	e011      	b.n	800663a <_printf_i+0xfa>
 8006616:	6821      	ldr	r1, [r4, #0]
 8006618:	6833      	ldr	r3, [r6, #0]
 800661a:	0608      	lsls	r0, r1, #24
 800661c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006620:	d402      	bmi.n	8006628 <_printf_i+0xe8>
 8006622:	0649      	lsls	r1, r1, #25
 8006624:	bf48      	it	mi
 8006626:	b2ad      	uxthmi	r5, r5
 8006628:	2f6f      	cmp	r7, #111	@ 0x6f
 800662a:	6033      	str	r3, [r6, #0]
 800662c:	bf14      	ite	ne
 800662e:	230a      	movne	r3, #10
 8006630:	2308      	moveq	r3, #8
 8006632:	4851      	ldr	r0, [pc, #324]	@ (8006778 <_printf_i+0x238>)
 8006634:	2100      	movs	r1, #0
 8006636:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800663a:	6866      	ldr	r6, [r4, #4]
 800663c:	2e00      	cmp	r6, #0
 800663e:	bfa8      	it	ge
 8006640:	6821      	ldrge	r1, [r4, #0]
 8006642:	60a6      	str	r6, [r4, #8]
 8006644:	bfa4      	itt	ge
 8006646:	f021 0104 	bicge.w	r1, r1, #4
 800664a:	6021      	strge	r1, [r4, #0]
 800664c:	b90d      	cbnz	r5, 8006652 <_printf_i+0x112>
 800664e:	2e00      	cmp	r6, #0
 8006650:	d04b      	beq.n	80066ea <_printf_i+0x1aa>
 8006652:	4616      	mov	r6, r2
 8006654:	fbb5 f1f3 	udiv	r1, r5, r3
 8006658:	fb03 5711 	mls	r7, r3, r1, r5
 800665c:	5dc7      	ldrb	r7, [r0, r7]
 800665e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006662:	462f      	mov	r7, r5
 8006664:	42bb      	cmp	r3, r7
 8006666:	460d      	mov	r5, r1
 8006668:	d9f4      	bls.n	8006654 <_printf_i+0x114>
 800666a:	2b08      	cmp	r3, #8
 800666c:	d10b      	bne.n	8006686 <_printf_i+0x146>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	07df      	lsls	r7, r3, #31
 8006672:	d508      	bpl.n	8006686 <_printf_i+0x146>
 8006674:	6923      	ldr	r3, [r4, #16]
 8006676:	6861      	ldr	r1, [r4, #4]
 8006678:	4299      	cmp	r1, r3
 800667a:	bfde      	ittt	le
 800667c:	2330      	movle	r3, #48	@ 0x30
 800667e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006682:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006686:	1b92      	subs	r2, r2, r6
 8006688:	6122      	str	r2, [r4, #16]
 800668a:	464b      	mov	r3, r9
 800668c:	4621      	mov	r1, r4
 800668e:	4640      	mov	r0, r8
 8006690:	f8cd a000 	str.w	sl, [sp]
 8006694:	aa03      	add	r2, sp, #12
 8006696:	f7ff fee1 	bl	800645c <_printf_common>
 800669a:	3001      	adds	r0, #1
 800669c:	d14a      	bne.n	8006734 <_printf_i+0x1f4>
 800669e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066a2:	b004      	add	sp, #16
 80066a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	f043 0320 	orr.w	r3, r3, #32
 80066ae:	6023      	str	r3, [r4, #0]
 80066b0:	2778      	movs	r7, #120	@ 0x78
 80066b2:	4832      	ldr	r0, [pc, #200]	@ (800677c <_printf_i+0x23c>)
 80066b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	6831      	ldr	r1, [r6, #0]
 80066bc:	061f      	lsls	r7, r3, #24
 80066be:	f851 5b04 	ldr.w	r5, [r1], #4
 80066c2:	d402      	bmi.n	80066ca <_printf_i+0x18a>
 80066c4:	065f      	lsls	r7, r3, #25
 80066c6:	bf48      	it	mi
 80066c8:	b2ad      	uxthmi	r5, r5
 80066ca:	6031      	str	r1, [r6, #0]
 80066cc:	07d9      	lsls	r1, r3, #31
 80066ce:	bf44      	itt	mi
 80066d0:	f043 0320 	orrmi.w	r3, r3, #32
 80066d4:	6023      	strmi	r3, [r4, #0]
 80066d6:	b11d      	cbz	r5, 80066e0 <_printf_i+0x1a0>
 80066d8:	2310      	movs	r3, #16
 80066da:	e7ab      	b.n	8006634 <_printf_i+0xf4>
 80066dc:	4826      	ldr	r0, [pc, #152]	@ (8006778 <_printf_i+0x238>)
 80066de:	e7e9      	b.n	80066b4 <_printf_i+0x174>
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	f023 0320 	bic.w	r3, r3, #32
 80066e6:	6023      	str	r3, [r4, #0]
 80066e8:	e7f6      	b.n	80066d8 <_printf_i+0x198>
 80066ea:	4616      	mov	r6, r2
 80066ec:	e7bd      	b.n	800666a <_printf_i+0x12a>
 80066ee:	6833      	ldr	r3, [r6, #0]
 80066f0:	6825      	ldr	r5, [r4, #0]
 80066f2:	1d18      	adds	r0, r3, #4
 80066f4:	6961      	ldr	r1, [r4, #20]
 80066f6:	6030      	str	r0, [r6, #0]
 80066f8:	062e      	lsls	r6, r5, #24
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	d501      	bpl.n	8006702 <_printf_i+0x1c2>
 80066fe:	6019      	str	r1, [r3, #0]
 8006700:	e002      	b.n	8006708 <_printf_i+0x1c8>
 8006702:	0668      	lsls	r0, r5, #25
 8006704:	d5fb      	bpl.n	80066fe <_printf_i+0x1be>
 8006706:	8019      	strh	r1, [r3, #0]
 8006708:	2300      	movs	r3, #0
 800670a:	4616      	mov	r6, r2
 800670c:	6123      	str	r3, [r4, #16]
 800670e:	e7bc      	b.n	800668a <_printf_i+0x14a>
 8006710:	6833      	ldr	r3, [r6, #0]
 8006712:	2100      	movs	r1, #0
 8006714:	1d1a      	adds	r2, r3, #4
 8006716:	6032      	str	r2, [r6, #0]
 8006718:	681e      	ldr	r6, [r3, #0]
 800671a:	6862      	ldr	r2, [r4, #4]
 800671c:	4630      	mov	r0, r6
 800671e:	f000 f98c 	bl	8006a3a <memchr>
 8006722:	b108      	cbz	r0, 8006728 <_printf_i+0x1e8>
 8006724:	1b80      	subs	r0, r0, r6
 8006726:	6060      	str	r0, [r4, #4]
 8006728:	6863      	ldr	r3, [r4, #4]
 800672a:	6123      	str	r3, [r4, #16]
 800672c:	2300      	movs	r3, #0
 800672e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006732:	e7aa      	b.n	800668a <_printf_i+0x14a>
 8006734:	4632      	mov	r2, r6
 8006736:	4649      	mov	r1, r9
 8006738:	4640      	mov	r0, r8
 800673a:	6923      	ldr	r3, [r4, #16]
 800673c:	47d0      	blx	sl
 800673e:	3001      	adds	r0, #1
 8006740:	d0ad      	beq.n	800669e <_printf_i+0x15e>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	079b      	lsls	r3, r3, #30
 8006746:	d413      	bmi.n	8006770 <_printf_i+0x230>
 8006748:	68e0      	ldr	r0, [r4, #12]
 800674a:	9b03      	ldr	r3, [sp, #12]
 800674c:	4298      	cmp	r0, r3
 800674e:	bfb8      	it	lt
 8006750:	4618      	movlt	r0, r3
 8006752:	e7a6      	b.n	80066a2 <_printf_i+0x162>
 8006754:	2301      	movs	r3, #1
 8006756:	4632      	mov	r2, r6
 8006758:	4649      	mov	r1, r9
 800675a:	4640      	mov	r0, r8
 800675c:	47d0      	blx	sl
 800675e:	3001      	adds	r0, #1
 8006760:	d09d      	beq.n	800669e <_printf_i+0x15e>
 8006762:	3501      	adds	r5, #1
 8006764:	68e3      	ldr	r3, [r4, #12]
 8006766:	9903      	ldr	r1, [sp, #12]
 8006768:	1a5b      	subs	r3, r3, r1
 800676a:	42ab      	cmp	r3, r5
 800676c:	dcf2      	bgt.n	8006754 <_printf_i+0x214>
 800676e:	e7eb      	b.n	8006748 <_printf_i+0x208>
 8006770:	2500      	movs	r5, #0
 8006772:	f104 0619 	add.w	r6, r4, #25
 8006776:	e7f5      	b.n	8006764 <_printf_i+0x224>
 8006778:	0800a5f0 	.word	0x0800a5f0
 800677c:	0800a601 	.word	0x0800a601

08006780 <siprintf>:
 8006780:	b40e      	push	{r1, r2, r3}
 8006782:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006786:	b500      	push	{lr}
 8006788:	b09c      	sub	sp, #112	@ 0x70
 800678a:	ab1d      	add	r3, sp, #116	@ 0x74
 800678c:	9002      	str	r0, [sp, #8]
 800678e:	9006      	str	r0, [sp, #24]
 8006790:	9107      	str	r1, [sp, #28]
 8006792:	9104      	str	r1, [sp, #16]
 8006794:	4808      	ldr	r0, [pc, #32]	@ (80067b8 <siprintf+0x38>)
 8006796:	4909      	ldr	r1, [pc, #36]	@ (80067bc <siprintf+0x3c>)
 8006798:	f853 2b04 	ldr.w	r2, [r3], #4
 800679c:	9105      	str	r1, [sp, #20]
 800679e:	6800      	ldr	r0, [r0, #0]
 80067a0:	a902      	add	r1, sp, #8
 80067a2:	9301      	str	r3, [sp, #4]
 80067a4:	f001 f804 	bl	80077b0 <_svfiprintf_r>
 80067a8:	2200      	movs	r2, #0
 80067aa:	9b02      	ldr	r3, [sp, #8]
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	b01c      	add	sp, #112	@ 0x70
 80067b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067b4:	b003      	add	sp, #12
 80067b6:	4770      	bx	lr
 80067b8:	20000028 	.word	0x20000028
 80067bc:	ffff0208 	.word	0xffff0208

080067c0 <std>:
 80067c0:	2300      	movs	r3, #0
 80067c2:	b510      	push	{r4, lr}
 80067c4:	4604      	mov	r4, r0
 80067c6:	e9c0 3300 	strd	r3, r3, [r0]
 80067ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067ce:	6083      	str	r3, [r0, #8]
 80067d0:	8181      	strh	r1, [r0, #12]
 80067d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80067d4:	81c2      	strh	r2, [r0, #14]
 80067d6:	6183      	str	r3, [r0, #24]
 80067d8:	4619      	mov	r1, r3
 80067da:	2208      	movs	r2, #8
 80067dc:	305c      	adds	r0, #92	@ 0x5c
 80067de:	f000 f8f3 	bl	80069c8 <memset>
 80067e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006818 <std+0x58>)
 80067e4:	6224      	str	r4, [r4, #32]
 80067e6:	6263      	str	r3, [r4, #36]	@ 0x24
 80067e8:	4b0c      	ldr	r3, [pc, #48]	@ (800681c <std+0x5c>)
 80067ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006820 <std+0x60>)
 80067ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006824 <std+0x64>)
 80067f2:	6323      	str	r3, [r4, #48]	@ 0x30
 80067f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006828 <std+0x68>)
 80067f6:	429c      	cmp	r4, r3
 80067f8:	d006      	beq.n	8006808 <std+0x48>
 80067fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067fe:	4294      	cmp	r4, r2
 8006800:	d002      	beq.n	8006808 <std+0x48>
 8006802:	33d0      	adds	r3, #208	@ 0xd0
 8006804:	429c      	cmp	r4, r3
 8006806:	d105      	bne.n	8006814 <std+0x54>
 8006808:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800680c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006810:	f000 b910 	b.w	8006a34 <__retarget_lock_init_recursive>
 8006814:	bd10      	pop	{r4, pc}
 8006816:	bf00      	nop
 8006818:	08008365 	.word	0x08008365
 800681c:	08008387 	.word	0x08008387
 8006820:	080083bf 	.word	0x080083bf
 8006824:	080083e3 	.word	0x080083e3
 8006828:	20000804 	.word	0x20000804

0800682c <stdio_exit_handler>:
 800682c:	4a02      	ldr	r2, [pc, #8]	@ (8006838 <stdio_exit_handler+0xc>)
 800682e:	4903      	ldr	r1, [pc, #12]	@ (800683c <stdio_exit_handler+0x10>)
 8006830:	4803      	ldr	r0, [pc, #12]	@ (8006840 <stdio_exit_handler+0x14>)
 8006832:	f000 b8ab 	b.w	800698c <_fwalk_sglue>
 8006836:	bf00      	nop
 8006838:	2000001c 	.word	0x2000001c
 800683c:	08007bfd 	.word	0x08007bfd
 8006840:	2000002c 	.word	0x2000002c

08006844 <cleanup_stdio>:
 8006844:	6841      	ldr	r1, [r0, #4]
 8006846:	4b0c      	ldr	r3, [pc, #48]	@ (8006878 <cleanup_stdio+0x34>)
 8006848:	b510      	push	{r4, lr}
 800684a:	4299      	cmp	r1, r3
 800684c:	4604      	mov	r4, r0
 800684e:	d001      	beq.n	8006854 <cleanup_stdio+0x10>
 8006850:	f001 f9d4 	bl	8007bfc <_fflush_r>
 8006854:	68a1      	ldr	r1, [r4, #8]
 8006856:	4b09      	ldr	r3, [pc, #36]	@ (800687c <cleanup_stdio+0x38>)
 8006858:	4299      	cmp	r1, r3
 800685a:	d002      	beq.n	8006862 <cleanup_stdio+0x1e>
 800685c:	4620      	mov	r0, r4
 800685e:	f001 f9cd 	bl	8007bfc <_fflush_r>
 8006862:	68e1      	ldr	r1, [r4, #12]
 8006864:	4b06      	ldr	r3, [pc, #24]	@ (8006880 <cleanup_stdio+0x3c>)
 8006866:	4299      	cmp	r1, r3
 8006868:	d004      	beq.n	8006874 <cleanup_stdio+0x30>
 800686a:	4620      	mov	r0, r4
 800686c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006870:	f001 b9c4 	b.w	8007bfc <_fflush_r>
 8006874:	bd10      	pop	{r4, pc}
 8006876:	bf00      	nop
 8006878:	20000804 	.word	0x20000804
 800687c:	2000086c 	.word	0x2000086c
 8006880:	200008d4 	.word	0x200008d4

08006884 <global_stdio_init.part.0>:
 8006884:	b510      	push	{r4, lr}
 8006886:	4b0b      	ldr	r3, [pc, #44]	@ (80068b4 <global_stdio_init.part.0+0x30>)
 8006888:	4c0b      	ldr	r4, [pc, #44]	@ (80068b8 <global_stdio_init.part.0+0x34>)
 800688a:	4a0c      	ldr	r2, [pc, #48]	@ (80068bc <global_stdio_init.part.0+0x38>)
 800688c:	4620      	mov	r0, r4
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	2104      	movs	r1, #4
 8006892:	2200      	movs	r2, #0
 8006894:	f7ff ff94 	bl	80067c0 <std>
 8006898:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800689c:	2201      	movs	r2, #1
 800689e:	2109      	movs	r1, #9
 80068a0:	f7ff ff8e 	bl	80067c0 <std>
 80068a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068a8:	2202      	movs	r2, #2
 80068aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068ae:	2112      	movs	r1, #18
 80068b0:	f7ff bf86 	b.w	80067c0 <std>
 80068b4:	2000093c 	.word	0x2000093c
 80068b8:	20000804 	.word	0x20000804
 80068bc:	0800682d 	.word	0x0800682d

080068c0 <__sfp_lock_acquire>:
 80068c0:	4801      	ldr	r0, [pc, #4]	@ (80068c8 <__sfp_lock_acquire+0x8>)
 80068c2:	f000 b8b8 	b.w	8006a36 <__retarget_lock_acquire_recursive>
 80068c6:	bf00      	nop
 80068c8:	20000941 	.word	0x20000941

080068cc <__sfp_lock_release>:
 80068cc:	4801      	ldr	r0, [pc, #4]	@ (80068d4 <__sfp_lock_release+0x8>)
 80068ce:	f000 b8b3 	b.w	8006a38 <__retarget_lock_release_recursive>
 80068d2:	bf00      	nop
 80068d4:	20000941 	.word	0x20000941

080068d8 <__sinit>:
 80068d8:	b510      	push	{r4, lr}
 80068da:	4604      	mov	r4, r0
 80068dc:	f7ff fff0 	bl	80068c0 <__sfp_lock_acquire>
 80068e0:	6a23      	ldr	r3, [r4, #32]
 80068e2:	b11b      	cbz	r3, 80068ec <__sinit+0x14>
 80068e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068e8:	f7ff bff0 	b.w	80068cc <__sfp_lock_release>
 80068ec:	4b04      	ldr	r3, [pc, #16]	@ (8006900 <__sinit+0x28>)
 80068ee:	6223      	str	r3, [r4, #32]
 80068f0:	4b04      	ldr	r3, [pc, #16]	@ (8006904 <__sinit+0x2c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1f5      	bne.n	80068e4 <__sinit+0xc>
 80068f8:	f7ff ffc4 	bl	8006884 <global_stdio_init.part.0>
 80068fc:	e7f2      	b.n	80068e4 <__sinit+0xc>
 80068fe:	bf00      	nop
 8006900:	08006845 	.word	0x08006845
 8006904:	2000093c 	.word	0x2000093c

08006908 <__utoa>:
 8006908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800690a:	b08b      	sub	sp, #44	@ 0x2c
 800690c:	4605      	mov	r5, r0
 800690e:	460b      	mov	r3, r1
 8006910:	466e      	mov	r6, sp
 8006912:	4c1d      	ldr	r4, [pc, #116]	@ (8006988 <__utoa+0x80>)
 8006914:	f104 0c20 	add.w	ip, r4, #32
 8006918:	4637      	mov	r7, r6
 800691a:	6820      	ldr	r0, [r4, #0]
 800691c:	6861      	ldr	r1, [r4, #4]
 800691e:	3408      	adds	r4, #8
 8006920:	c703      	stmia	r7!, {r0, r1}
 8006922:	4564      	cmp	r4, ip
 8006924:	463e      	mov	r6, r7
 8006926:	d1f7      	bne.n	8006918 <__utoa+0x10>
 8006928:	7921      	ldrb	r1, [r4, #4]
 800692a:	6820      	ldr	r0, [r4, #0]
 800692c:	7139      	strb	r1, [r7, #4]
 800692e:	1e91      	subs	r1, r2, #2
 8006930:	2922      	cmp	r1, #34	@ 0x22
 8006932:	6038      	str	r0, [r7, #0]
 8006934:	f04f 0100 	mov.w	r1, #0
 8006938:	d904      	bls.n	8006944 <__utoa+0x3c>
 800693a:	7019      	strb	r1, [r3, #0]
 800693c:	460b      	mov	r3, r1
 800693e:	4618      	mov	r0, r3
 8006940:	b00b      	add	sp, #44	@ 0x2c
 8006942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006944:	1e58      	subs	r0, r3, #1
 8006946:	4684      	mov	ip, r0
 8006948:	fbb5 f7f2 	udiv	r7, r5, r2
 800694c:	fb02 5617 	mls	r6, r2, r7, r5
 8006950:	3628      	adds	r6, #40	@ 0x28
 8006952:	446e      	add	r6, sp
 8006954:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006958:	460c      	mov	r4, r1
 800695a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800695e:	462e      	mov	r6, r5
 8006960:	42b2      	cmp	r2, r6
 8006962:	463d      	mov	r5, r7
 8006964:	f101 0101 	add.w	r1, r1, #1
 8006968:	d9ee      	bls.n	8006948 <__utoa+0x40>
 800696a:	2200      	movs	r2, #0
 800696c:	545a      	strb	r2, [r3, r1]
 800696e:	1919      	adds	r1, r3, r4
 8006970:	1aa5      	subs	r5, r4, r2
 8006972:	42aa      	cmp	r2, r5
 8006974:	dae3      	bge.n	800693e <__utoa+0x36>
 8006976:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800697a:	780e      	ldrb	r6, [r1, #0]
 800697c:	3201      	adds	r2, #1
 800697e:	7006      	strb	r6, [r0, #0]
 8006980:	f801 5901 	strb.w	r5, [r1], #-1
 8006984:	e7f4      	b.n	8006970 <__utoa+0x68>
 8006986:	bf00      	nop
 8006988:	0800a612 	.word	0x0800a612

0800698c <_fwalk_sglue>:
 800698c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006990:	4607      	mov	r7, r0
 8006992:	4688      	mov	r8, r1
 8006994:	4614      	mov	r4, r2
 8006996:	2600      	movs	r6, #0
 8006998:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800699c:	f1b9 0901 	subs.w	r9, r9, #1
 80069a0:	d505      	bpl.n	80069ae <_fwalk_sglue+0x22>
 80069a2:	6824      	ldr	r4, [r4, #0]
 80069a4:	2c00      	cmp	r4, #0
 80069a6:	d1f7      	bne.n	8006998 <_fwalk_sglue+0xc>
 80069a8:	4630      	mov	r0, r6
 80069aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ae:	89ab      	ldrh	r3, [r5, #12]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d907      	bls.n	80069c4 <_fwalk_sglue+0x38>
 80069b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069b8:	3301      	adds	r3, #1
 80069ba:	d003      	beq.n	80069c4 <_fwalk_sglue+0x38>
 80069bc:	4629      	mov	r1, r5
 80069be:	4638      	mov	r0, r7
 80069c0:	47c0      	blx	r8
 80069c2:	4306      	orrs	r6, r0
 80069c4:	3568      	adds	r5, #104	@ 0x68
 80069c6:	e7e9      	b.n	800699c <_fwalk_sglue+0x10>

080069c8 <memset>:
 80069c8:	4603      	mov	r3, r0
 80069ca:	4402      	add	r2, r0
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d100      	bne.n	80069d2 <memset+0xa>
 80069d0:	4770      	bx	lr
 80069d2:	f803 1b01 	strb.w	r1, [r3], #1
 80069d6:	e7f9      	b.n	80069cc <memset+0x4>

080069d8 <_localeconv_r>:
 80069d8:	4800      	ldr	r0, [pc, #0]	@ (80069dc <_localeconv_r+0x4>)
 80069da:	4770      	bx	lr
 80069dc:	20000168 	.word	0x20000168

080069e0 <__errno>:
 80069e0:	4b01      	ldr	r3, [pc, #4]	@ (80069e8 <__errno+0x8>)
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	20000028 	.word	0x20000028

080069ec <__libc_init_array>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	2600      	movs	r6, #0
 80069f0:	4d0c      	ldr	r5, [pc, #48]	@ (8006a24 <__libc_init_array+0x38>)
 80069f2:	4c0d      	ldr	r4, [pc, #52]	@ (8006a28 <__libc_init_array+0x3c>)
 80069f4:	1b64      	subs	r4, r4, r5
 80069f6:	10a4      	asrs	r4, r4, #2
 80069f8:	42a6      	cmp	r6, r4
 80069fa:	d109      	bne.n	8006a10 <__libc_init_array+0x24>
 80069fc:	f002 f8f8 	bl	8008bf0 <_init>
 8006a00:	2600      	movs	r6, #0
 8006a02:	4d0a      	ldr	r5, [pc, #40]	@ (8006a2c <__libc_init_array+0x40>)
 8006a04:	4c0a      	ldr	r4, [pc, #40]	@ (8006a30 <__libc_init_array+0x44>)
 8006a06:	1b64      	subs	r4, r4, r5
 8006a08:	10a4      	asrs	r4, r4, #2
 8006a0a:	42a6      	cmp	r6, r4
 8006a0c:	d105      	bne.n	8006a1a <__libc_init_array+0x2e>
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a14:	4798      	blx	r3
 8006a16:	3601      	adds	r6, #1
 8006a18:	e7ee      	b.n	80069f8 <__libc_init_array+0xc>
 8006a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a1e:	4798      	blx	r3
 8006a20:	3601      	adds	r6, #1
 8006a22:	e7f2      	b.n	8006a0a <__libc_init_array+0x1e>
 8006a24:	0800a980 	.word	0x0800a980
 8006a28:	0800a980 	.word	0x0800a980
 8006a2c:	0800a980 	.word	0x0800a980
 8006a30:	0800a984 	.word	0x0800a984

08006a34 <__retarget_lock_init_recursive>:
 8006a34:	4770      	bx	lr

08006a36 <__retarget_lock_acquire_recursive>:
 8006a36:	4770      	bx	lr

08006a38 <__retarget_lock_release_recursive>:
 8006a38:	4770      	bx	lr

08006a3a <memchr>:
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	b510      	push	{r4, lr}
 8006a3e:	b2c9      	uxtb	r1, r1
 8006a40:	4402      	add	r2, r0
 8006a42:	4293      	cmp	r3, r2
 8006a44:	4618      	mov	r0, r3
 8006a46:	d101      	bne.n	8006a4c <memchr+0x12>
 8006a48:	2000      	movs	r0, #0
 8006a4a:	e003      	b.n	8006a54 <memchr+0x1a>
 8006a4c:	7804      	ldrb	r4, [r0, #0]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	428c      	cmp	r4, r1
 8006a52:	d1f6      	bne.n	8006a42 <memchr+0x8>
 8006a54:	bd10      	pop	{r4, pc}

08006a56 <quorem>:
 8006a56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5a:	6903      	ldr	r3, [r0, #16]
 8006a5c:	690c      	ldr	r4, [r1, #16]
 8006a5e:	4607      	mov	r7, r0
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	db7e      	blt.n	8006b62 <quorem+0x10c>
 8006a64:	3c01      	subs	r4, #1
 8006a66:	00a3      	lsls	r3, r4, #2
 8006a68:	f100 0514 	add.w	r5, r0, #20
 8006a6c:	f101 0814 	add.w	r8, r1, #20
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a80:	3301      	adds	r3, #1
 8006a82:	429a      	cmp	r2, r3
 8006a84:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a8c:	d32e      	bcc.n	8006aec <quorem+0x96>
 8006a8e:	f04f 0a00 	mov.w	sl, #0
 8006a92:	46c4      	mov	ip, r8
 8006a94:	46ae      	mov	lr, r5
 8006a96:	46d3      	mov	fp, sl
 8006a98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a9c:	b298      	uxth	r0, r3
 8006a9e:	fb06 a000 	mla	r0, r6, r0, sl
 8006aa2:	0c1b      	lsrs	r3, r3, #16
 8006aa4:	0c02      	lsrs	r2, r0, #16
 8006aa6:	fb06 2303 	mla	r3, r6, r3, r2
 8006aaa:	f8de 2000 	ldr.w	r2, [lr]
 8006aae:	b280      	uxth	r0, r0
 8006ab0:	b292      	uxth	r2, r2
 8006ab2:	1a12      	subs	r2, r2, r0
 8006ab4:	445a      	add	r2, fp
 8006ab6:	f8de 0000 	ldr.w	r0, [lr]
 8006aba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006ac4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ac8:	b292      	uxth	r2, r2
 8006aca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ace:	45e1      	cmp	r9, ip
 8006ad0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006ad4:	f84e 2b04 	str.w	r2, [lr], #4
 8006ad8:	d2de      	bcs.n	8006a98 <quorem+0x42>
 8006ada:	9b00      	ldr	r3, [sp, #0]
 8006adc:	58eb      	ldr	r3, [r5, r3]
 8006ade:	b92b      	cbnz	r3, 8006aec <quorem+0x96>
 8006ae0:	9b01      	ldr	r3, [sp, #4]
 8006ae2:	3b04      	subs	r3, #4
 8006ae4:	429d      	cmp	r5, r3
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	d32f      	bcc.n	8006b4a <quorem+0xf4>
 8006aea:	613c      	str	r4, [r7, #16]
 8006aec:	4638      	mov	r0, r7
 8006aee:	f001 fb31 	bl	8008154 <__mcmp>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	db25      	blt.n	8006b42 <quorem+0xec>
 8006af6:	4629      	mov	r1, r5
 8006af8:	2000      	movs	r0, #0
 8006afa:	f858 2b04 	ldr.w	r2, [r8], #4
 8006afe:	f8d1 c000 	ldr.w	ip, [r1]
 8006b02:	fa1f fe82 	uxth.w	lr, r2
 8006b06:	fa1f f38c 	uxth.w	r3, ip
 8006b0a:	eba3 030e 	sub.w	r3, r3, lr
 8006b0e:	4403      	add	r3, r0
 8006b10:	0c12      	lsrs	r2, r2, #16
 8006b12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006b16:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b20:	45c1      	cmp	r9, r8
 8006b22:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b26:	f841 3b04 	str.w	r3, [r1], #4
 8006b2a:	d2e6      	bcs.n	8006afa <quorem+0xa4>
 8006b2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b34:	b922      	cbnz	r2, 8006b40 <quorem+0xea>
 8006b36:	3b04      	subs	r3, #4
 8006b38:	429d      	cmp	r5, r3
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	d30b      	bcc.n	8006b56 <quorem+0x100>
 8006b3e:	613c      	str	r4, [r7, #16]
 8006b40:	3601      	adds	r6, #1
 8006b42:	4630      	mov	r0, r6
 8006b44:	b003      	add	sp, #12
 8006b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4a:	6812      	ldr	r2, [r2, #0]
 8006b4c:	3b04      	subs	r3, #4
 8006b4e:	2a00      	cmp	r2, #0
 8006b50:	d1cb      	bne.n	8006aea <quorem+0x94>
 8006b52:	3c01      	subs	r4, #1
 8006b54:	e7c6      	b.n	8006ae4 <quorem+0x8e>
 8006b56:	6812      	ldr	r2, [r2, #0]
 8006b58:	3b04      	subs	r3, #4
 8006b5a:	2a00      	cmp	r2, #0
 8006b5c:	d1ef      	bne.n	8006b3e <quorem+0xe8>
 8006b5e:	3c01      	subs	r4, #1
 8006b60:	e7ea      	b.n	8006b38 <quorem+0xe2>
 8006b62:	2000      	movs	r0, #0
 8006b64:	e7ee      	b.n	8006b44 <quorem+0xee>
	...

08006b68 <_dtoa_r>:
 8006b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	4614      	mov	r4, r2
 8006b6e:	461d      	mov	r5, r3
 8006b70:	69c7      	ldr	r7, [r0, #28]
 8006b72:	b097      	sub	sp, #92	@ 0x5c
 8006b74:	4683      	mov	fp, r0
 8006b76:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006b7a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006b7c:	b97f      	cbnz	r7, 8006b9e <_dtoa_r+0x36>
 8006b7e:	2010      	movs	r0, #16
 8006b80:	f000 ff12 	bl	80079a8 <malloc>
 8006b84:	4602      	mov	r2, r0
 8006b86:	f8cb 001c 	str.w	r0, [fp, #28]
 8006b8a:	b920      	cbnz	r0, 8006b96 <_dtoa_r+0x2e>
 8006b8c:	21ef      	movs	r1, #239	@ 0xef
 8006b8e:	4ba8      	ldr	r3, [pc, #672]	@ (8006e30 <_dtoa_r+0x2c8>)
 8006b90:	48a8      	ldr	r0, [pc, #672]	@ (8006e34 <_dtoa_r+0x2cc>)
 8006b92:	f001 fcd7 	bl	8008544 <__assert_func>
 8006b96:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006b9a:	6007      	str	r7, [r0, #0]
 8006b9c:	60c7      	str	r7, [r0, #12]
 8006b9e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ba2:	6819      	ldr	r1, [r3, #0]
 8006ba4:	b159      	cbz	r1, 8006bbe <_dtoa_r+0x56>
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	2301      	movs	r3, #1
 8006baa:	4093      	lsls	r3, r2
 8006bac:	604a      	str	r2, [r1, #4]
 8006bae:	608b      	str	r3, [r1, #8]
 8006bb0:	4658      	mov	r0, fp
 8006bb2:	f001 f897 	bl	8007ce4 <_Bfree>
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	1e2b      	subs	r3, r5, #0
 8006bc0:	bfaf      	iteee	ge
 8006bc2:	2300      	movge	r3, #0
 8006bc4:	2201      	movlt	r2, #1
 8006bc6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006bca:	9303      	strlt	r3, [sp, #12]
 8006bcc:	bfa8      	it	ge
 8006bce:	6033      	strge	r3, [r6, #0]
 8006bd0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006bd4:	4b98      	ldr	r3, [pc, #608]	@ (8006e38 <_dtoa_r+0x2d0>)
 8006bd6:	bfb8      	it	lt
 8006bd8:	6032      	strlt	r2, [r6, #0]
 8006bda:	ea33 0308 	bics.w	r3, r3, r8
 8006bde:	d112      	bne.n	8006c06 <_dtoa_r+0x9e>
 8006be0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006be4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006be6:	6013      	str	r3, [r2, #0]
 8006be8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006bec:	4323      	orrs	r3, r4
 8006bee:	f000 8550 	beq.w	8007692 <_dtoa_r+0xb2a>
 8006bf2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006bf4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006e3c <_dtoa_r+0x2d4>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 8552 	beq.w	80076a2 <_dtoa_r+0xb3a>
 8006bfe:	f10a 0303 	add.w	r3, sl, #3
 8006c02:	f000 bd4c 	b.w	800769e <_dtoa_r+0xb36>
 8006c06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c0a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006c0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c12:	2200      	movs	r2, #0
 8006c14:	2300      	movs	r3, #0
 8006c16:	f7f9 ff7b 	bl	8000b10 <__aeabi_dcmpeq>
 8006c1a:	4607      	mov	r7, r0
 8006c1c:	b158      	cbz	r0, 8006c36 <_dtoa_r+0xce>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c26:	b113      	cbz	r3, 8006c2e <_dtoa_r+0xc6>
 8006c28:	4b85      	ldr	r3, [pc, #532]	@ (8006e40 <_dtoa_r+0x2d8>)
 8006c2a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006e44 <_dtoa_r+0x2dc>
 8006c32:	f000 bd36 	b.w	80076a2 <_dtoa_r+0xb3a>
 8006c36:	ab14      	add	r3, sp, #80	@ 0x50
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	ab15      	add	r3, sp, #84	@ 0x54
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	4658      	mov	r0, fp
 8006c40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006c44:	f001 fb36 	bl	80082b4 <__d2b>
 8006c48:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006c4c:	4681      	mov	r9, r0
 8006c4e:	2e00      	cmp	r6, #0
 8006c50:	d077      	beq.n	8006d42 <_dtoa_r+0x1da>
 8006c52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c58:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c60:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006c64:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006c68:	9712      	str	r7, [sp, #72]	@ 0x48
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	4b76      	ldr	r3, [pc, #472]	@ (8006e48 <_dtoa_r+0x2e0>)
 8006c70:	f7f9 fb2e 	bl	80002d0 <__aeabi_dsub>
 8006c74:	a368      	add	r3, pc, #416	@ (adr r3, 8006e18 <_dtoa_r+0x2b0>)
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	f7f9 fce1 	bl	8000640 <__aeabi_dmul>
 8006c7e:	a368      	add	r3, pc, #416	@ (adr r3, 8006e20 <_dtoa_r+0x2b8>)
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f7f9 fb26 	bl	80002d4 <__adddf3>
 8006c88:	4604      	mov	r4, r0
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	460d      	mov	r5, r1
 8006c8e:	f7f9 fc6d 	bl	800056c <__aeabi_i2d>
 8006c92:	a365      	add	r3, pc, #404	@ (adr r3, 8006e28 <_dtoa_r+0x2c0>)
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	f7f9 fcd2 	bl	8000640 <__aeabi_dmul>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	f7f9 fb16 	bl	80002d4 <__adddf3>
 8006ca8:	4604      	mov	r4, r0
 8006caa:	460d      	mov	r5, r1
 8006cac:	f7f9 ff78 	bl	8000ba0 <__aeabi_d2iz>
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	4607      	mov	r7, r0
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	4629      	mov	r1, r5
 8006cba:	f7f9 ff33 	bl	8000b24 <__aeabi_dcmplt>
 8006cbe:	b140      	cbz	r0, 8006cd2 <_dtoa_r+0x16a>
 8006cc0:	4638      	mov	r0, r7
 8006cc2:	f7f9 fc53 	bl	800056c <__aeabi_i2d>
 8006cc6:	4622      	mov	r2, r4
 8006cc8:	462b      	mov	r3, r5
 8006cca:	f7f9 ff21 	bl	8000b10 <__aeabi_dcmpeq>
 8006cce:	b900      	cbnz	r0, 8006cd2 <_dtoa_r+0x16a>
 8006cd0:	3f01      	subs	r7, #1
 8006cd2:	2f16      	cmp	r7, #22
 8006cd4:	d853      	bhi.n	8006d7e <_dtoa_r+0x216>
 8006cd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cda:	4b5c      	ldr	r3, [pc, #368]	@ (8006e4c <_dtoa_r+0x2e4>)
 8006cdc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	f7f9 ff1e 	bl	8000b24 <__aeabi_dcmplt>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d04a      	beq.n	8006d82 <_dtoa_r+0x21a>
 8006cec:	2300      	movs	r3, #0
 8006cee:	3f01      	subs	r7, #1
 8006cf0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006cf2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006cf4:	1b9b      	subs	r3, r3, r6
 8006cf6:	1e5a      	subs	r2, r3, #1
 8006cf8:	bf46      	itte	mi
 8006cfa:	f1c3 0801 	rsbmi	r8, r3, #1
 8006cfe:	2300      	movmi	r3, #0
 8006d00:	f04f 0800 	movpl.w	r8, #0
 8006d04:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d06:	bf48      	it	mi
 8006d08:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006d0a:	2f00      	cmp	r7, #0
 8006d0c:	db3b      	blt.n	8006d86 <_dtoa_r+0x21e>
 8006d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d10:	970e      	str	r7, [sp, #56]	@ 0x38
 8006d12:	443b      	add	r3, r7
 8006d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d16:	2300      	movs	r3, #0
 8006d18:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d1c:	2b09      	cmp	r3, #9
 8006d1e:	d866      	bhi.n	8006dee <_dtoa_r+0x286>
 8006d20:	2b05      	cmp	r3, #5
 8006d22:	bfc4      	itt	gt
 8006d24:	3b04      	subgt	r3, #4
 8006d26:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006d28:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d2a:	bfc8      	it	gt
 8006d2c:	2400      	movgt	r4, #0
 8006d2e:	f1a3 0302 	sub.w	r3, r3, #2
 8006d32:	bfd8      	it	le
 8006d34:	2401      	movle	r4, #1
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d864      	bhi.n	8006e04 <_dtoa_r+0x29c>
 8006d3a:	e8df f003 	tbb	[pc, r3]
 8006d3e:	382b      	.short	0x382b
 8006d40:	5636      	.short	0x5636
 8006d42:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006d46:	441e      	add	r6, r3
 8006d48:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006d4c:	2b20      	cmp	r3, #32
 8006d4e:	bfc1      	itttt	gt
 8006d50:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006d54:	fa08 f803 	lslgt.w	r8, r8, r3
 8006d58:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006d5c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006d60:	bfd6      	itet	le
 8006d62:	f1c3 0320 	rsble	r3, r3, #32
 8006d66:	ea48 0003 	orrgt.w	r0, r8, r3
 8006d6a:	fa04 f003 	lslle.w	r0, r4, r3
 8006d6e:	f7f9 fbed 	bl	800054c <__aeabi_ui2d>
 8006d72:	2201      	movs	r2, #1
 8006d74:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006d78:	3e01      	subs	r6, #1
 8006d7a:	9212      	str	r2, [sp, #72]	@ 0x48
 8006d7c:	e775      	b.n	8006c6a <_dtoa_r+0x102>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e7b6      	b.n	8006cf0 <_dtoa_r+0x188>
 8006d82:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006d84:	e7b5      	b.n	8006cf2 <_dtoa_r+0x18a>
 8006d86:	427b      	negs	r3, r7
 8006d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	eba8 0807 	sub.w	r8, r8, r7
 8006d90:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d92:	e7c2      	b.n	8006d1a <_dtoa_r+0x1b2>
 8006d94:	2300      	movs	r3, #0
 8006d96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	dc35      	bgt.n	8006e0a <_dtoa_r+0x2a2>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	461a      	mov	r2, r3
 8006da2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006da6:	9221      	str	r2, [sp, #132]	@ 0x84
 8006da8:	e00b      	b.n	8006dc2 <_dtoa_r+0x25a>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e7f3      	b.n	8006d96 <_dtoa_r+0x22e>
 8006dae:	2300      	movs	r3, #0
 8006db0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006db2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006db4:	18fb      	adds	r3, r7, r3
 8006db6:	9308      	str	r3, [sp, #32]
 8006db8:	3301      	adds	r3, #1
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	9307      	str	r3, [sp, #28]
 8006dbe:	bfb8      	it	lt
 8006dc0:	2301      	movlt	r3, #1
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006dca:	f102 0514 	add.w	r5, r2, #20
 8006dce:	429d      	cmp	r5, r3
 8006dd0:	d91f      	bls.n	8006e12 <_dtoa_r+0x2aa>
 8006dd2:	6041      	str	r1, [r0, #4]
 8006dd4:	4658      	mov	r0, fp
 8006dd6:	f000 ff45 	bl	8007c64 <_Balloc>
 8006dda:	4682      	mov	sl, r0
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	d139      	bne.n	8006e54 <_dtoa_r+0x2ec>
 8006de0:	4602      	mov	r2, r0
 8006de2:	f240 11af 	movw	r1, #431	@ 0x1af
 8006de6:	4b1a      	ldr	r3, [pc, #104]	@ (8006e50 <_dtoa_r+0x2e8>)
 8006de8:	e6d2      	b.n	8006b90 <_dtoa_r+0x28>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e7e0      	b.n	8006db0 <_dtoa_r+0x248>
 8006dee:	2401      	movs	r4, #1
 8006df0:	2300      	movs	r3, #0
 8006df2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006df4:	9320      	str	r3, [sp, #128]	@ 0x80
 8006df6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006e00:	2312      	movs	r3, #18
 8006e02:	e7d0      	b.n	8006da6 <_dtoa_r+0x23e>
 8006e04:	2301      	movs	r3, #1
 8006e06:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e08:	e7f5      	b.n	8006df6 <_dtoa_r+0x28e>
 8006e0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e0c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006e10:	e7d7      	b.n	8006dc2 <_dtoa_r+0x25a>
 8006e12:	3101      	adds	r1, #1
 8006e14:	0052      	lsls	r2, r2, #1
 8006e16:	e7d8      	b.n	8006dca <_dtoa_r+0x262>
 8006e18:	636f4361 	.word	0x636f4361
 8006e1c:	3fd287a7 	.word	0x3fd287a7
 8006e20:	8b60c8b3 	.word	0x8b60c8b3
 8006e24:	3fc68a28 	.word	0x3fc68a28
 8006e28:	509f79fb 	.word	0x509f79fb
 8006e2c:	3fd34413 	.word	0x3fd34413
 8006e30:	0800a644 	.word	0x0800a644
 8006e34:	0800a65b 	.word	0x0800a65b
 8006e38:	7ff00000 	.word	0x7ff00000
 8006e3c:	0800a640 	.word	0x0800a640
 8006e40:	0800a5ef 	.word	0x0800a5ef
 8006e44:	0800a5ee 	.word	0x0800a5ee
 8006e48:	3ff80000 	.word	0x3ff80000
 8006e4c:	0800a768 	.word	0x0800a768
 8006e50:	0800a6b3 	.word	0x0800a6b3
 8006e54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e58:	6018      	str	r0, [r3, #0]
 8006e5a:	9b07      	ldr	r3, [sp, #28]
 8006e5c:	2b0e      	cmp	r3, #14
 8006e5e:	f200 80a4 	bhi.w	8006faa <_dtoa_r+0x442>
 8006e62:	2c00      	cmp	r4, #0
 8006e64:	f000 80a1 	beq.w	8006faa <_dtoa_r+0x442>
 8006e68:	2f00      	cmp	r7, #0
 8006e6a:	dd33      	ble.n	8006ed4 <_dtoa_r+0x36c>
 8006e6c:	4b86      	ldr	r3, [pc, #536]	@ (8007088 <_dtoa_r+0x520>)
 8006e6e:	f007 020f 	and.w	r2, r7, #15
 8006e72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e76:	05f8      	lsls	r0, r7, #23
 8006e78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e7c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006e84:	d516      	bpl.n	8006eb4 <_dtoa_r+0x34c>
 8006e86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e8a:	4b80      	ldr	r3, [pc, #512]	@ (800708c <_dtoa_r+0x524>)
 8006e8c:	2603      	movs	r6, #3
 8006e8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e92:	f7f9 fcff 	bl	8000894 <__aeabi_ddiv>
 8006e96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e9a:	f004 040f 	and.w	r4, r4, #15
 8006e9e:	4d7b      	ldr	r5, [pc, #492]	@ (800708c <_dtoa_r+0x524>)
 8006ea0:	b954      	cbnz	r4, 8006eb8 <_dtoa_r+0x350>
 8006ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eaa:	f7f9 fcf3 	bl	8000894 <__aeabi_ddiv>
 8006eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eb2:	e028      	b.n	8006f06 <_dtoa_r+0x39e>
 8006eb4:	2602      	movs	r6, #2
 8006eb6:	e7f2      	b.n	8006e9e <_dtoa_r+0x336>
 8006eb8:	07e1      	lsls	r1, r4, #31
 8006eba:	d508      	bpl.n	8006ece <_dtoa_r+0x366>
 8006ebc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ec0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ec4:	f7f9 fbbc 	bl	8000640 <__aeabi_dmul>
 8006ec8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ecc:	3601      	adds	r6, #1
 8006ece:	1064      	asrs	r4, r4, #1
 8006ed0:	3508      	adds	r5, #8
 8006ed2:	e7e5      	b.n	8006ea0 <_dtoa_r+0x338>
 8006ed4:	f000 80d2 	beq.w	800707c <_dtoa_r+0x514>
 8006ed8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006edc:	427c      	negs	r4, r7
 8006ede:	4b6a      	ldr	r3, [pc, #424]	@ (8007088 <_dtoa_r+0x520>)
 8006ee0:	f004 020f 	and.w	r2, r4, #15
 8006ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	f7f9 fba8 	bl	8000640 <__aeabi_dmul>
 8006ef0:	2602      	movs	r6, #2
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ef8:	4d64      	ldr	r5, [pc, #400]	@ (800708c <_dtoa_r+0x524>)
 8006efa:	1124      	asrs	r4, r4, #4
 8006efc:	2c00      	cmp	r4, #0
 8006efe:	f040 80b2 	bne.w	8007066 <_dtoa_r+0x4fe>
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1d3      	bne.n	8006eae <_dtoa_r+0x346>
 8006f06:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 80b7 	beq.w	8007080 <_dtoa_r+0x518>
 8006f12:	2200      	movs	r2, #0
 8006f14:	4620      	mov	r0, r4
 8006f16:	4629      	mov	r1, r5
 8006f18:	4b5d      	ldr	r3, [pc, #372]	@ (8007090 <_dtoa_r+0x528>)
 8006f1a:	f7f9 fe03 	bl	8000b24 <__aeabi_dcmplt>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	f000 80ae 	beq.w	8007080 <_dtoa_r+0x518>
 8006f24:	9b07      	ldr	r3, [sp, #28]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 80aa 	beq.w	8007080 <_dtoa_r+0x518>
 8006f2c:	9b08      	ldr	r3, [sp, #32]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	dd37      	ble.n	8006fa2 <_dtoa_r+0x43a>
 8006f32:	1e7b      	subs	r3, r7, #1
 8006f34:	4620      	mov	r0, r4
 8006f36:	9304      	str	r3, [sp, #16]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	4b55      	ldr	r3, [pc, #340]	@ (8007094 <_dtoa_r+0x52c>)
 8006f3e:	f7f9 fb7f 	bl	8000640 <__aeabi_dmul>
 8006f42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f46:	9c08      	ldr	r4, [sp, #32]
 8006f48:	3601      	adds	r6, #1
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f7f9 fb0e 	bl	800056c <__aeabi_i2d>
 8006f50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f54:	f7f9 fb74 	bl	8000640 <__aeabi_dmul>
 8006f58:	2200      	movs	r2, #0
 8006f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8007098 <_dtoa_r+0x530>)
 8006f5c:	f7f9 f9ba 	bl	80002d4 <__adddf3>
 8006f60:	4605      	mov	r5, r0
 8006f62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006f66:	2c00      	cmp	r4, #0
 8006f68:	f040 809a 	bne.w	80070a0 <_dtoa_r+0x538>
 8006f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f70:	2200      	movs	r2, #0
 8006f72:	4b4a      	ldr	r3, [pc, #296]	@ (800709c <_dtoa_r+0x534>)
 8006f74:	f7f9 f9ac 	bl	80002d0 <__aeabi_dsub>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f80:	462a      	mov	r2, r5
 8006f82:	4633      	mov	r3, r6
 8006f84:	f7f9 fdec 	bl	8000b60 <__aeabi_dcmpgt>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	f040 828e 	bne.w	80074aa <_dtoa_r+0x942>
 8006f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f92:	462a      	mov	r2, r5
 8006f94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f98:	f7f9 fdc4 	bl	8000b24 <__aeabi_dcmplt>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	f040 8127 	bne.w	80071f0 <_dtoa_r+0x688>
 8006fa2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006fa6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006faa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f2c0 8163 	blt.w	8007278 <_dtoa_r+0x710>
 8006fb2:	2f0e      	cmp	r7, #14
 8006fb4:	f300 8160 	bgt.w	8007278 <_dtoa_r+0x710>
 8006fb8:	4b33      	ldr	r3, [pc, #204]	@ (8007088 <_dtoa_r+0x520>)
 8006fba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006fbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006fc2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006fc6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	da03      	bge.n	8006fd4 <_dtoa_r+0x46c>
 8006fcc:	9b07      	ldr	r3, [sp, #28]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f340 8100 	ble.w	80071d4 <_dtoa_r+0x66c>
 8006fd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006fd8:	4656      	mov	r6, sl
 8006fda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fde:	4620      	mov	r0, r4
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f7f9 fc57 	bl	8000894 <__aeabi_ddiv>
 8006fe6:	f7f9 fddb 	bl	8000ba0 <__aeabi_d2iz>
 8006fea:	4680      	mov	r8, r0
 8006fec:	f7f9 fabe 	bl	800056c <__aeabi_i2d>
 8006ff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ff4:	f7f9 fb24 	bl	8000640 <__aeabi_dmul>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	4629      	mov	r1, r5
 8007000:	f7f9 f966 	bl	80002d0 <__aeabi_dsub>
 8007004:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007008:	9d07      	ldr	r5, [sp, #28]
 800700a:	f806 4b01 	strb.w	r4, [r6], #1
 800700e:	eba6 040a 	sub.w	r4, r6, sl
 8007012:	42a5      	cmp	r5, r4
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	f040 8116 	bne.w	8007248 <_dtoa_r+0x6e0>
 800701c:	f7f9 f95a 	bl	80002d4 <__adddf3>
 8007020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007024:	4604      	mov	r4, r0
 8007026:	460d      	mov	r5, r1
 8007028:	f7f9 fd9a 	bl	8000b60 <__aeabi_dcmpgt>
 800702c:	2800      	cmp	r0, #0
 800702e:	f040 80f8 	bne.w	8007222 <_dtoa_r+0x6ba>
 8007032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007036:	4620      	mov	r0, r4
 8007038:	4629      	mov	r1, r5
 800703a:	f7f9 fd69 	bl	8000b10 <__aeabi_dcmpeq>
 800703e:	b118      	cbz	r0, 8007048 <_dtoa_r+0x4e0>
 8007040:	f018 0f01 	tst.w	r8, #1
 8007044:	f040 80ed 	bne.w	8007222 <_dtoa_r+0x6ba>
 8007048:	4649      	mov	r1, r9
 800704a:	4658      	mov	r0, fp
 800704c:	f000 fe4a 	bl	8007ce4 <_Bfree>
 8007050:	2300      	movs	r3, #0
 8007052:	7033      	strb	r3, [r6, #0]
 8007054:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007056:	3701      	adds	r7, #1
 8007058:	601f      	str	r7, [r3, #0]
 800705a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8320 	beq.w	80076a2 <_dtoa_r+0xb3a>
 8007062:	601e      	str	r6, [r3, #0]
 8007064:	e31d      	b.n	80076a2 <_dtoa_r+0xb3a>
 8007066:	07e2      	lsls	r2, r4, #31
 8007068:	d505      	bpl.n	8007076 <_dtoa_r+0x50e>
 800706a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800706e:	f7f9 fae7 	bl	8000640 <__aeabi_dmul>
 8007072:	2301      	movs	r3, #1
 8007074:	3601      	adds	r6, #1
 8007076:	1064      	asrs	r4, r4, #1
 8007078:	3508      	adds	r5, #8
 800707a:	e73f      	b.n	8006efc <_dtoa_r+0x394>
 800707c:	2602      	movs	r6, #2
 800707e:	e742      	b.n	8006f06 <_dtoa_r+0x39e>
 8007080:	9c07      	ldr	r4, [sp, #28]
 8007082:	9704      	str	r7, [sp, #16]
 8007084:	e761      	b.n	8006f4a <_dtoa_r+0x3e2>
 8007086:	bf00      	nop
 8007088:	0800a768 	.word	0x0800a768
 800708c:	0800a740 	.word	0x0800a740
 8007090:	3ff00000 	.word	0x3ff00000
 8007094:	40240000 	.word	0x40240000
 8007098:	401c0000 	.word	0x401c0000
 800709c:	40140000 	.word	0x40140000
 80070a0:	4b70      	ldr	r3, [pc, #448]	@ (8007264 <_dtoa_r+0x6fc>)
 80070a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070ac:	4454      	add	r4, sl
 80070ae:	2900      	cmp	r1, #0
 80070b0:	d045      	beq.n	800713e <_dtoa_r+0x5d6>
 80070b2:	2000      	movs	r0, #0
 80070b4:	496c      	ldr	r1, [pc, #432]	@ (8007268 <_dtoa_r+0x700>)
 80070b6:	f7f9 fbed 	bl	8000894 <__aeabi_ddiv>
 80070ba:	4633      	mov	r3, r6
 80070bc:	462a      	mov	r2, r5
 80070be:	f7f9 f907 	bl	80002d0 <__aeabi_dsub>
 80070c2:	4656      	mov	r6, sl
 80070c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070cc:	f7f9 fd68 	bl	8000ba0 <__aeabi_d2iz>
 80070d0:	4605      	mov	r5, r0
 80070d2:	f7f9 fa4b 	bl	800056c <__aeabi_i2d>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070de:	f7f9 f8f7 	bl	80002d0 <__aeabi_dsub>
 80070e2:	4602      	mov	r2, r0
 80070e4:	460b      	mov	r3, r1
 80070e6:	3530      	adds	r5, #48	@ 0x30
 80070e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80070f0:	f806 5b01 	strb.w	r5, [r6], #1
 80070f4:	f7f9 fd16 	bl	8000b24 <__aeabi_dcmplt>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d163      	bne.n	80071c4 <_dtoa_r+0x65c>
 80070fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007100:	2000      	movs	r0, #0
 8007102:	495a      	ldr	r1, [pc, #360]	@ (800726c <_dtoa_r+0x704>)
 8007104:	f7f9 f8e4 	bl	80002d0 <__aeabi_dsub>
 8007108:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800710c:	f7f9 fd0a 	bl	8000b24 <__aeabi_dcmplt>
 8007110:	2800      	cmp	r0, #0
 8007112:	f040 8087 	bne.w	8007224 <_dtoa_r+0x6bc>
 8007116:	42a6      	cmp	r6, r4
 8007118:	f43f af43 	beq.w	8006fa2 <_dtoa_r+0x43a>
 800711c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007120:	2200      	movs	r2, #0
 8007122:	4b53      	ldr	r3, [pc, #332]	@ (8007270 <_dtoa_r+0x708>)
 8007124:	f7f9 fa8c 	bl	8000640 <__aeabi_dmul>
 8007128:	2200      	movs	r2, #0
 800712a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800712e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007132:	4b4f      	ldr	r3, [pc, #316]	@ (8007270 <_dtoa_r+0x708>)
 8007134:	f7f9 fa84 	bl	8000640 <__aeabi_dmul>
 8007138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800713c:	e7c4      	b.n	80070c8 <_dtoa_r+0x560>
 800713e:	4631      	mov	r1, r6
 8007140:	4628      	mov	r0, r5
 8007142:	f7f9 fa7d 	bl	8000640 <__aeabi_dmul>
 8007146:	4656      	mov	r6, sl
 8007148:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800714c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800714e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007152:	f7f9 fd25 	bl	8000ba0 <__aeabi_d2iz>
 8007156:	4605      	mov	r5, r0
 8007158:	f7f9 fa08 	bl	800056c <__aeabi_i2d>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007164:	f7f9 f8b4 	bl	80002d0 <__aeabi_dsub>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	3530      	adds	r5, #48	@ 0x30
 800716e:	f806 5b01 	strb.w	r5, [r6], #1
 8007172:	42a6      	cmp	r6, r4
 8007174:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007178:	f04f 0200 	mov.w	r2, #0
 800717c:	d124      	bne.n	80071c8 <_dtoa_r+0x660>
 800717e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007182:	4b39      	ldr	r3, [pc, #228]	@ (8007268 <_dtoa_r+0x700>)
 8007184:	f7f9 f8a6 	bl	80002d4 <__adddf3>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007190:	f7f9 fce6 	bl	8000b60 <__aeabi_dcmpgt>
 8007194:	2800      	cmp	r0, #0
 8007196:	d145      	bne.n	8007224 <_dtoa_r+0x6bc>
 8007198:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800719c:	2000      	movs	r0, #0
 800719e:	4932      	ldr	r1, [pc, #200]	@ (8007268 <_dtoa_r+0x700>)
 80071a0:	f7f9 f896 	bl	80002d0 <__aeabi_dsub>
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ac:	f7f9 fcba 	bl	8000b24 <__aeabi_dcmplt>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	f43f aef6 	beq.w	8006fa2 <_dtoa_r+0x43a>
 80071b6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80071b8:	1e73      	subs	r3, r6, #1
 80071ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80071c0:	2b30      	cmp	r3, #48	@ 0x30
 80071c2:	d0f8      	beq.n	80071b6 <_dtoa_r+0x64e>
 80071c4:	9f04      	ldr	r7, [sp, #16]
 80071c6:	e73f      	b.n	8007048 <_dtoa_r+0x4e0>
 80071c8:	4b29      	ldr	r3, [pc, #164]	@ (8007270 <_dtoa_r+0x708>)
 80071ca:	f7f9 fa39 	bl	8000640 <__aeabi_dmul>
 80071ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071d2:	e7bc      	b.n	800714e <_dtoa_r+0x5e6>
 80071d4:	d10c      	bne.n	80071f0 <_dtoa_r+0x688>
 80071d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071da:	2200      	movs	r2, #0
 80071dc:	4b25      	ldr	r3, [pc, #148]	@ (8007274 <_dtoa_r+0x70c>)
 80071de:	f7f9 fa2f 	bl	8000640 <__aeabi_dmul>
 80071e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071e6:	f7f9 fcb1 	bl	8000b4c <__aeabi_dcmpge>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	f000 815b 	beq.w	80074a6 <_dtoa_r+0x93e>
 80071f0:	2400      	movs	r4, #0
 80071f2:	4625      	mov	r5, r4
 80071f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80071f6:	4656      	mov	r6, sl
 80071f8:	43db      	mvns	r3, r3
 80071fa:	9304      	str	r3, [sp, #16]
 80071fc:	2700      	movs	r7, #0
 80071fe:	4621      	mov	r1, r4
 8007200:	4658      	mov	r0, fp
 8007202:	f000 fd6f 	bl	8007ce4 <_Bfree>
 8007206:	2d00      	cmp	r5, #0
 8007208:	d0dc      	beq.n	80071c4 <_dtoa_r+0x65c>
 800720a:	b12f      	cbz	r7, 8007218 <_dtoa_r+0x6b0>
 800720c:	42af      	cmp	r7, r5
 800720e:	d003      	beq.n	8007218 <_dtoa_r+0x6b0>
 8007210:	4639      	mov	r1, r7
 8007212:	4658      	mov	r0, fp
 8007214:	f000 fd66 	bl	8007ce4 <_Bfree>
 8007218:	4629      	mov	r1, r5
 800721a:	4658      	mov	r0, fp
 800721c:	f000 fd62 	bl	8007ce4 <_Bfree>
 8007220:	e7d0      	b.n	80071c4 <_dtoa_r+0x65c>
 8007222:	9704      	str	r7, [sp, #16]
 8007224:	4633      	mov	r3, r6
 8007226:	461e      	mov	r6, r3
 8007228:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800722c:	2a39      	cmp	r2, #57	@ 0x39
 800722e:	d107      	bne.n	8007240 <_dtoa_r+0x6d8>
 8007230:	459a      	cmp	sl, r3
 8007232:	d1f8      	bne.n	8007226 <_dtoa_r+0x6be>
 8007234:	9a04      	ldr	r2, [sp, #16]
 8007236:	3201      	adds	r2, #1
 8007238:	9204      	str	r2, [sp, #16]
 800723a:	2230      	movs	r2, #48	@ 0x30
 800723c:	f88a 2000 	strb.w	r2, [sl]
 8007240:	781a      	ldrb	r2, [r3, #0]
 8007242:	3201      	adds	r2, #1
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	e7bd      	b.n	80071c4 <_dtoa_r+0x65c>
 8007248:	2200      	movs	r2, #0
 800724a:	4b09      	ldr	r3, [pc, #36]	@ (8007270 <_dtoa_r+0x708>)
 800724c:	f7f9 f9f8 	bl	8000640 <__aeabi_dmul>
 8007250:	2200      	movs	r2, #0
 8007252:	2300      	movs	r3, #0
 8007254:	4604      	mov	r4, r0
 8007256:	460d      	mov	r5, r1
 8007258:	f7f9 fc5a 	bl	8000b10 <__aeabi_dcmpeq>
 800725c:	2800      	cmp	r0, #0
 800725e:	f43f aebc 	beq.w	8006fda <_dtoa_r+0x472>
 8007262:	e6f1      	b.n	8007048 <_dtoa_r+0x4e0>
 8007264:	0800a768 	.word	0x0800a768
 8007268:	3fe00000 	.word	0x3fe00000
 800726c:	3ff00000 	.word	0x3ff00000
 8007270:	40240000 	.word	0x40240000
 8007274:	40140000 	.word	0x40140000
 8007278:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800727a:	2a00      	cmp	r2, #0
 800727c:	f000 80db 	beq.w	8007436 <_dtoa_r+0x8ce>
 8007280:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007282:	2a01      	cmp	r2, #1
 8007284:	f300 80bf 	bgt.w	8007406 <_dtoa_r+0x89e>
 8007288:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800728a:	2a00      	cmp	r2, #0
 800728c:	f000 80b7 	beq.w	80073fe <_dtoa_r+0x896>
 8007290:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007294:	4646      	mov	r6, r8
 8007296:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007298:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800729a:	2101      	movs	r1, #1
 800729c:	441a      	add	r2, r3
 800729e:	4658      	mov	r0, fp
 80072a0:	4498      	add	r8, r3
 80072a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80072a4:	f000 fdd2 	bl	8007e4c <__i2b>
 80072a8:	4605      	mov	r5, r0
 80072aa:	b15e      	cbz	r6, 80072c4 <_dtoa_r+0x75c>
 80072ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	dd08      	ble.n	80072c4 <_dtoa_r+0x75c>
 80072b2:	42b3      	cmp	r3, r6
 80072b4:	bfa8      	it	ge
 80072b6:	4633      	movge	r3, r6
 80072b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072ba:	eba8 0803 	sub.w	r8, r8, r3
 80072be:	1af6      	subs	r6, r6, r3
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80072c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072c6:	b1f3      	cbz	r3, 8007306 <_dtoa_r+0x79e>
 80072c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 80b7 	beq.w	800743e <_dtoa_r+0x8d6>
 80072d0:	b18c      	cbz	r4, 80072f6 <_dtoa_r+0x78e>
 80072d2:	4629      	mov	r1, r5
 80072d4:	4622      	mov	r2, r4
 80072d6:	4658      	mov	r0, fp
 80072d8:	f000 fe76 	bl	8007fc8 <__pow5mult>
 80072dc:	464a      	mov	r2, r9
 80072de:	4601      	mov	r1, r0
 80072e0:	4605      	mov	r5, r0
 80072e2:	4658      	mov	r0, fp
 80072e4:	f000 fdc8 	bl	8007e78 <__multiply>
 80072e8:	4649      	mov	r1, r9
 80072ea:	9004      	str	r0, [sp, #16]
 80072ec:	4658      	mov	r0, fp
 80072ee:	f000 fcf9 	bl	8007ce4 <_Bfree>
 80072f2:	9b04      	ldr	r3, [sp, #16]
 80072f4:	4699      	mov	r9, r3
 80072f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072f8:	1b1a      	subs	r2, r3, r4
 80072fa:	d004      	beq.n	8007306 <_dtoa_r+0x79e>
 80072fc:	4649      	mov	r1, r9
 80072fe:	4658      	mov	r0, fp
 8007300:	f000 fe62 	bl	8007fc8 <__pow5mult>
 8007304:	4681      	mov	r9, r0
 8007306:	2101      	movs	r1, #1
 8007308:	4658      	mov	r0, fp
 800730a:	f000 fd9f 	bl	8007e4c <__i2b>
 800730e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007310:	4604      	mov	r4, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 81c9 	beq.w	80076aa <_dtoa_r+0xb42>
 8007318:	461a      	mov	r2, r3
 800731a:	4601      	mov	r1, r0
 800731c:	4658      	mov	r0, fp
 800731e:	f000 fe53 	bl	8007fc8 <__pow5mult>
 8007322:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007324:	4604      	mov	r4, r0
 8007326:	2b01      	cmp	r3, #1
 8007328:	f300 808f 	bgt.w	800744a <_dtoa_r+0x8e2>
 800732c:	9b02      	ldr	r3, [sp, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	f040 8087 	bne.w	8007442 <_dtoa_r+0x8da>
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800733a:	2b00      	cmp	r3, #0
 800733c:	f040 8083 	bne.w	8007446 <_dtoa_r+0x8de>
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007346:	0d1b      	lsrs	r3, r3, #20
 8007348:	051b      	lsls	r3, r3, #20
 800734a:	b12b      	cbz	r3, 8007358 <_dtoa_r+0x7f0>
 800734c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800734e:	f108 0801 	add.w	r8, r8, #1
 8007352:	3301      	adds	r3, #1
 8007354:	9309      	str	r3, [sp, #36]	@ 0x24
 8007356:	2301      	movs	r3, #1
 8007358:	930a      	str	r3, [sp, #40]	@ 0x28
 800735a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 81aa 	beq.w	80076b6 <_dtoa_r+0xb4e>
 8007362:	6923      	ldr	r3, [r4, #16]
 8007364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007368:	6918      	ldr	r0, [r3, #16]
 800736a:	f000 fd23 	bl	8007db4 <__hi0bits>
 800736e:	f1c0 0020 	rsb	r0, r0, #32
 8007372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007374:	4418      	add	r0, r3
 8007376:	f010 001f 	ands.w	r0, r0, #31
 800737a:	d071      	beq.n	8007460 <_dtoa_r+0x8f8>
 800737c:	f1c0 0320 	rsb	r3, r0, #32
 8007380:	2b04      	cmp	r3, #4
 8007382:	dd65      	ble.n	8007450 <_dtoa_r+0x8e8>
 8007384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007386:	f1c0 001c 	rsb	r0, r0, #28
 800738a:	4403      	add	r3, r0
 800738c:	4480      	add	r8, r0
 800738e:	4406      	add	r6, r0
 8007390:	9309      	str	r3, [sp, #36]	@ 0x24
 8007392:	f1b8 0f00 	cmp.w	r8, #0
 8007396:	dd05      	ble.n	80073a4 <_dtoa_r+0x83c>
 8007398:	4649      	mov	r1, r9
 800739a:	4642      	mov	r2, r8
 800739c:	4658      	mov	r0, fp
 800739e:	f000 fe6d 	bl	800807c <__lshift>
 80073a2:	4681      	mov	r9, r0
 80073a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	dd05      	ble.n	80073b6 <_dtoa_r+0x84e>
 80073aa:	4621      	mov	r1, r4
 80073ac:	461a      	mov	r2, r3
 80073ae:	4658      	mov	r0, fp
 80073b0:	f000 fe64 	bl	800807c <__lshift>
 80073b4:	4604      	mov	r4, r0
 80073b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d053      	beq.n	8007464 <_dtoa_r+0x8fc>
 80073bc:	4621      	mov	r1, r4
 80073be:	4648      	mov	r0, r9
 80073c0:	f000 fec8 	bl	8008154 <__mcmp>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	da4d      	bge.n	8007464 <_dtoa_r+0x8fc>
 80073c8:	1e7b      	subs	r3, r7, #1
 80073ca:	4649      	mov	r1, r9
 80073cc:	9304      	str	r3, [sp, #16]
 80073ce:	220a      	movs	r2, #10
 80073d0:	2300      	movs	r3, #0
 80073d2:	4658      	mov	r0, fp
 80073d4:	f000 fca8 	bl	8007d28 <__multadd>
 80073d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073da:	4681      	mov	r9, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 816c 	beq.w	80076ba <_dtoa_r+0xb52>
 80073e2:	2300      	movs	r3, #0
 80073e4:	4629      	mov	r1, r5
 80073e6:	220a      	movs	r2, #10
 80073e8:	4658      	mov	r0, fp
 80073ea:	f000 fc9d 	bl	8007d28 <__multadd>
 80073ee:	9b08      	ldr	r3, [sp, #32]
 80073f0:	4605      	mov	r5, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	dc61      	bgt.n	80074ba <_dtoa_r+0x952>
 80073f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	dc3b      	bgt.n	8007474 <_dtoa_r+0x90c>
 80073fc:	e05d      	b.n	80074ba <_dtoa_r+0x952>
 80073fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007400:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007404:	e746      	b.n	8007294 <_dtoa_r+0x72c>
 8007406:	9b07      	ldr	r3, [sp, #28]
 8007408:	1e5c      	subs	r4, r3, #1
 800740a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800740c:	42a3      	cmp	r3, r4
 800740e:	bfbf      	itttt	lt
 8007410:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007412:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007414:	1ae3      	sublt	r3, r4, r3
 8007416:	18d2      	addlt	r2, r2, r3
 8007418:	bfa8      	it	ge
 800741a:	1b1c      	subge	r4, r3, r4
 800741c:	9b07      	ldr	r3, [sp, #28]
 800741e:	bfbe      	ittt	lt
 8007420:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007422:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007424:	2400      	movlt	r4, #0
 8007426:	2b00      	cmp	r3, #0
 8007428:	bfb5      	itete	lt
 800742a:	eba8 0603 	sublt.w	r6, r8, r3
 800742e:	4646      	movge	r6, r8
 8007430:	2300      	movlt	r3, #0
 8007432:	9b07      	ldrge	r3, [sp, #28]
 8007434:	e730      	b.n	8007298 <_dtoa_r+0x730>
 8007436:	4646      	mov	r6, r8
 8007438:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800743a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800743c:	e735      	b.n	80072aa <_dtoa_r+0x742>
 800743e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007440:	e75c      	b.n	80072fc <_dtoa_r+0x794>
 8007442:	2300      	movs	r3, #0
 8007444:	e788      	b.n	8007358 <_dtoa_r+0x7f0>
 8007446:	9b02      	ldr	r3, [sp, #8]
 8007448:	e786      	b.n	8007358 <_dtoa_r+0x7f0>
 800744a:	2300      	movs	r3, #0
 800744c:	930a      	str	r3, [sp, #40]	@ 0x28
 800744e:	e788      	b.n	8007362 <_dtoa_r+0x7fa>
 8007450:	d09f      	beq.n	8007392 <_dtoa_r+0x82a>
 8007452:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007454:	331c      	adds	r3, #28
 8007456:	441a      	add	r2, r3
 8007458:	4498      	add	r8, r3
 800745a:	441e      	add	r6, r3
 800745c:	9209      	str	r2, [sp, #36]	@ 0x24
 800745e:	e798      	b.n	8007392 <_dtoa_r+0x82a>
 8007460:	4603      	mov	r3, r0
 8007462:	e7f6      	b.n	8007452 <_dtoa_r+0x8ea>
 8007464:	9b07      	ldr	r3, [sp, #28]
 8007466:	9704      	str	r7, [sp, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	dc20      	bgt.n	80074ae <_dtoa_r+0x946>
 800746c:	9308      	str	r3, [sp, #32]
 800746e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007470:	2b02      	cmp	r3, #2
 8007472:	dd1e      	ble.n	80074b2 <_dtoa_r+0x94a>
 8007474:	9b08      	ldr	r3, [sp, #32]
 8007476:	2b00      	cmp	r3, #0
 8007478:	f47f aebc 	bne.w	80071f4 <_dtoa_r+0x68c>
 800747c:	4621      	mov	r1, r4
 800747e:	2205      	movs	r2, #5
 8007480:	4658      	mov	r0, fp
 8007482:	f000 fc51 	bl	8007d28 <__multadd>
 8007486:	4601      	mov	r1, r0
 8007488:	4604      	mov	r4, r0
 800748a:	4648      	mov	r0, r9
 800748c:	f000 fe62 	bl	8008154 <__mcmp>
 8007490:	2800      	cmp	r0, #0
 8007492:	f77f aeaf 	ble.w	80071f4 <_dtoa_r+0x68c>
 8007496:	2331      	movs	r3, #49	@ 0x31
 8007498:	4656      	mov	r6, sl
 800749a:	f806 3b01 	strb.w	r3, [r6], #1
 800749e:	9b04      	ldr	r3, [sp, #16]
 80074a0:	3301      	adds	r3, #1
 80074a2:	9304      	str	r3, [sp, #16]
 80074a4:	e6aa      	b.n	80071fc <_dtoa_r+0x694>
 80074a6:	9c07      	ldr	r4, [sp, #28]
 80074a8:	9704      	str	r7, [sp, #16]
 80074aa:	4625      	mov	r5, r4
 80074ac:	e7f3      	b.n	8007496 <_dtoa_r+0x92e>
 80074ae:	9b07      	ldr	r3, [sp, #28]
 80074b0:	9308      	str	r3, [sp, #32]
 80074b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 8104 	beq.w	80076c2 <_dtoa_r+0xb5a>
 80074ba:	2e00      	cmp	r6, #0
 80074bc:	dd05      	ble.n	80074ca <_dtoa_r+0x962>
 80074be:	4629      	mov	r1, r5
 80074c0:	4632      	mov	r2, r6
 80074c2:	4658      	mov	r0, fp
 80074c4:	f000 fdda 	bl	800807c <__lshift>
 80074c8:	4605      	mov	r5, r0
 80074ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d05a      	beq.n	8007586 <_dtoa_r+0xa1e>
 80074d0:	4658      	mov	r0, fp
 80074d2:	6869      	ldr	r1, [r5, #4]
 80074d4:	f000 fbc6 	bl	8007c64 <_Balloc>
 80074d8:	4606      	mov	r6, r0
 80074da:	b928      	cbnz	r0, 80074e8 <_dtoa_r+0x980>
 80074dc:	4602      	mov	r2, r0
 80074de:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80074e2:	4b83      	ldr	r3, [pc, #524]	@ (80076f0 <_dtoa_r+0xb88>)
 80074e4:	f7ff bb54 	b.w	8006b90 <_dtoa_r+0x28>
 80074e8:	692a      	ldr	r2, [r5, #16]
 80074ea:	f105 010c 	add.w	r1, r5, #12
 80074ee:	3202      	adds	r2, #2
 80074f0:	0092      	lsls	r2, r2, #2
 80074f2:	300c      	adds	r0, #12
 80074f4:	f001 f818 	bl	8008528 <memcpy>
 80074f8:	2201      	movs	r2, #1
 80074fa:	4631      	mov	r1, r6
 80074fc:	4658      	mov	r0, fp
 80074fe:	f000 fdbd 	bl	800807c <__lshift>
 8007502:	462f      	mov	r7, r5
 8007504:	4605      	mov	r5, r0
 8007506:	f10a 0301 	add.w	r3, sl, #1
 800750a:	9307      	str	r3, [sp, #28]
 800750c:	9b08      	ldr	r3, [sp, #32]
 800750e:	4453      	add	r3, sl
 8007510:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007512:	9b02      	ldr	r3, [sp, #8]
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	930a      	str	r3, [sp, #40]	@ 0x28
 800751a:	9b07      	ldr	r3, [sp, #28]
 800751c:	4621      	mov	r1, r4
 800751e:	3b01      	subs	r3, #1
 8007520:	4648      	mov	r0, r9
 8007522:	9302      	str	r3, [sp, #8]
 8007524:	f7ff fa97 	bl	8006a56 <quorem>
 8007528:	4639      	mov	r1, r7
 800752a:	9008      	str	r0, [sp, #32]
 800752c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007530:	4648      	mov	r0, r9
 8007532:	f000 fe0f 	bl	8008154 <__mcmp>
 8007536:	462a      	mov	r2, r5
 8007538:	9009      	str	r0, [sp, #36]	@ 0x24
 800753a:	4621      	mov	r1, r4
 800753c:	4658      	mov	r0, fp
 800753e:	f000 fe25 	bl	800818c <__mdiff>
 8007542:	68c2      	ldr	r2, [r0, #12]
 8007544:	4606      	mov	r6, r0
 8007546:	bb02      	cbnz	r2, 800758a <_dtoa_r+0xa22>
 8007548:	4601      	mov	r1, r0
 800754a:	4648      	mov	r0, r9
 800754c:	f000 fe02 	bl	8008154 <__mcmp>
 8007550:	4602      	mov	r2, r0
 8007552:	4631      	mov	r1, r6
 8007554:	4658      	mov	r0, fp
 8007556:	920c      	str	r2, [sp, #48]	@ 0x30
 8007558:	f000 fbc4 	bl	8007ce4 <_Bfree>
 800755c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800755e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007560:	9e07      	ldr	r6, [sp, #28]
 8007562:	ea43 0102 	orr.w	r1, r3, r2
 8007566:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007568:	4319      	orrs	r1, r3
 800756a:	d110      	bne.n	800758e <_dtoa_r+0xa26>
 800756c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007570:	d029      	beq.n	80075c6 <_dtoa_r+0xa5e>
 8007572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007574:	2b00      	cmp	r3, #0
 8007576:	dd02      	ble.n	800757e <_dtoa_r+0xa16>
 8007578:	9b08      	ldr	r3, [sp, #32]
 800757a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800757e:	9b02      	ldr	r3, [sp, #8]
 8007580:	f883 8000 	strb.w	r8, [r3]
 8007584:	e63b      	b.n	80071fe <_dtoa_r+0x696>
 8007586:	4628      	mov	r0, r5
 8007588:	e7bb      	b.n	8007502 <_dtoa_r+0x99a>
 800758a:	2201      	movs	r2, #1
 800758c:	e7e1      	b.n	8007552 <_dtoa_r+0x9ea>
 800758e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007590:	2b00      	cmp	r3, #0
 8007592:	db04      	blt.n	800759e <_dtoa_r+0xa36>
 8007594:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007596:	430b      	orrs	r3, r1
 8007598:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800759a:	430b      	orrs	r3, r1
 800759c:	d120      	bne.n	80075e0 <_dtoa_r+0xa78>
 800759e:	2a00      	cmp	r2, #0
 80075a0:	dded      	ble.n	800757e <_dtoa_r+0xa16>
 80075a2:	4649      	mov	r1, r9
 80075a4:	2201      	movs	r2, #1
 80075a6:	4658      	mov	r0, fp
 80075a8:	f000 fd68 	bl	800807c <__lshift>
 80075ac:	4621      	mov	r1, r4
 80075ae:	4681      	mov	r9, r0
 80075b0:	f000 fdd0 	bl	8008154 <__mcmp>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	dc03      	bgt.n	80075c0 <_dtoa_r+0xa58>
 80075b8:	d1e1      	bne.n	800757e <_dtoa_r+0xa16>
 80075ba:	f018 0f01 	tst.w	r8, #1
 80075be:	d0de      	beq.n	800757e <_dtoa_r+0xa16>
 80075c0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80075c4:	d1d8      	bne.n	8007578 <_dtoa_r+0xa10>
 80075c6:	2339      	movs	r3, #57	@ 0x39
 80075c8:	9a02      	ldr	r2, [sp, #8]
 80075ca:	7013      	strb	r3, [r2, #0]
 80075cc:	4633      	mov	r3, r6
 80075ce:	461e      	mov	r6, r3
 80075d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	2a39      	cmp	r2, #57	@ 0x39
 80075d8:	d052      	beq.n	8007680 <_dtoa_r+0xb18>
 80075da:	3201      	adds	r2, #1
 80075dc:	701a      	strb	r2, [r3, #0]
 80075de:	e60e      	b.n	80071fe <_dtoa_r+0x696>
 80075e0:	2a00      	cmp	r2, #0
 80075e2:	dd07      	ble.n	80075f4 <_dtoa_r+0xa8c>
 80075e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80075e8:	d0ed      	beq.n	80075c6 <_dtoa_r+0xa5e>
 80075ea:	9a02      	ldr	r2, [sp, #8]
 80075ec:	f108 0301 	add.w	r3, r8, #1
 80075f0:	7013      	strb	r3, [r2, #0]
 80075f2:	e604      	b.n	80071fe <_dtoa_r+0x696>
 80075f4:	9b07      	ldr	r3, [sp, #28]
 80075f6:	9a07      	ldr	r2, [sp, #28]
 80075f8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80075fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075fe:	4293      	cmp	r3, r2
 8007600:	d028      	beq.n	8007654 <_dtoa_r+0xaec>
 8007602:	4649      	mov	r1, r9
 8007604:	2300      	movs	r3, #0
 8007606:	220a      	movs	r2, #10
 8007608:	4658      	mov	r0, fp
 800760a:	f000 fb8d 	bl	8007d28 <__multadd>
 800760e:	42af      	cmp	r7, r5
 8007610:	4681      	mov	r9, r0
 8007612:	f04f 0300 	mov.w	r3, #0
 8007616:	f04f 020a 	mov.w	r2, #10
 800761a:	4639      	mov	r1, r7
 800761c:	4658      	mov	r0, fp
 800761e:	d107      	bne.n	8007630 <_dtoa_r+0xac8>
 8007620:	f000 fb82 	bl	8007d28 <__multadd>
 8007624:	4607      	mov	r7, r0
 8007626:	4605      	mov	r5, r0
 8007628:	9b07      	ldr	r3, [sp, #28]
 800762a:	3301      	adds	r3, #1
 800762c:	9307      	str	r3, [sp, #28]
 800762e:	e774      	b.n	800751a <_dtoa_r+0x9b2>
 8007630:	f000 fb7a 	bl	8007d28 <__multadd>
 8007634:	4629      	mov	r1, r5
 8007636:	4607      	mov	r7, r0
 8007638:	2300      	movs	r3, #0
 800763a:	220a      	movs	r2, #10
 800763c:	4658      	mov	r0, fp
 800763e:	f000 fb73 	bl	8007d28 <__multadd>
 8007642:	4605      	mov	r5, r0
 8007644:	e7f0      	b.n	8007628 <_dtoa_r+0xac0>
 8007646:	9b08      	ldr	r3, [sp, #32]
 8007648:	2700      	movs	r7, #0
 800764a:	2b00      	cmp	r3, #0
 800764c:	bfcc      	ite	gt
 800764e:	461e      	movgt	r6, r3
 8007650:	2601      	movle	r6, #1
 8007652:	4456      	add	r6, sl
 8007654:	4649      	mov	r1, r9
 8007656:	2201      	movs	r2, #1
 8007658:	4658      	mov	r0, fp
 800765a:	f000 fd0f 	bl	800807c <__lshift>
 800765e:	4621      	mov	r1, r4
 8007660:	4681      	mov	r9, r0
 8007662:	f000 fd77 	bl	8008154 <__mcmp>
 8007666:	2800      	cmp	r0, #0
 8007668:	dcb0      	bgt.n	80075cc <_dtoa_r+0xa64>
 800766a:	d102      	bne.n	8007672 <_dtoa_r+0xb0a>
 800766c:	f018 0f01 	tst.w	r8, #1
 8007670:	d1ac      	bne.n	80075cc <_dtoa_r+0xa64>
 8007672:	4633      	mov	r3, r6
 8007674:	461e      	mov	r6, r3
 8007676:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800767a:	2a30      	cmp	r2, #48	@ 0x30
 800767c:	d0fa      	beq.n	8007674 <_dtoa_r+0xb0c>
 800767e:	e5be      	b.n	80071fe <_dtoa_r+0x696>
 8007680:	459a      	cmp	sl, r3
 8007682:	d1a4      	bne.n	80075ce <_dtoa_r+0xa66>
 8007684:	9b04      	ldr	r3, [sp, #16]
 8007686:	3301      	adds	r3, #1
 8007688:	9304      	str	r3, [sp, #16]
 800768a:	2331      	movs	r3, #49	@ 0x31
 800768c:	f88a 3000 	strb.w	r3, [sl]
 8007690:	e5b5      	b.n	80071fe <_dtoa_r+0x696>
 8007692:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007694:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80076f4 <_dtoa_r+0xb8c>
 8007698:	b11b      	cbz	r3, 80076a2 <_dtoa_r+0xb3a>
 800769a:	f10a 0308 	add.w	r3, sl, #8
 800769e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	4650      	mov	r0, sl
 80076a4:	b017      	add	sp, #92	@ 0x5c
 80076a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	f77f ae3d 	ble.w	800732c <_dtoa_r+0x7c4>
 80076b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80076b6:	2001      	movs	r0, #1
 80076b8:	e65b      	b.n	8007372 <_dtoa_r+0x80a>
 80076ba:	9b08      	ldr	r3, [sp, #32]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f77f aed6 	ble.w	800746e <_dtoa_r+0x906>
 80076c2:	4656      	mov	r6, sl
 80076c4:	4621      	mov	r1, r4
 80076c6:	4648      	mov	r0, r9
 80076c8:	f7ff f9c5 	bl	8006a56 <quorem>
 80076cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80076d0:	9b08      	ldr	r3, [sp, #32]
 80076d2:	f806 8b01 	strb.w	r8, [r6], #1
 80076d6:	eba6 020a 	sub.w	r2, r6, sl
 80076da:	4293      	cmp	r3, r2
 80076dc:	ddb3      	ble.n	8007646 <_dtoa_r+0xade>
 80076de:	4649      	mov	r1, r9
 80076e0:	2300      	movs	r3, #0
 80076e2:	220a      	movs	r2, #10
 80076e4:	4658      	mov	r0, fp
 80076e6:	f000 fb1f 	bl	8007d28 <__multadd>
 80076ea:	4681      	mov	r9, r0
 80076ec:	e7ea      	b.n	80076c4 <_dtoa_r+0xb5c>
 80076ee:	bf00      	nop
 80076f0:	0800a6b3 	.word	0x0800a6b3
 80076f4:	0800a637 	.word	0x0800a637

080076f8 <__ssputs_r>:
 80076f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076fc:	461f      	mov	r7, r3
 80076fe:	688e      	ldr	r6, [r1, #8]
 8007700:	4682      	mov	sl, r0
 8007702:	42be      	cmp	r6, r7
 8007704:	460c      	mov	r4, r1
 8007706:	4690      	mov	r8, r2
 8007708:	680b      	ldr	r3, [r1, #0]
 800770a:	d82d      	bhi.n	8007768 <__ssputs_r+0x70>
 800770c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007710:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007714:	d026      	beq.n	8007764 <__ssputs_r+0x6c>
 8007716:	6965      	ldr	r5, [r4, #20]
 8007718:	6909      	ldr	r1, [r1, #16]
 800771a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800771e:	eba3 0901 	sub.w	r9, r3, r1
 8007722:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007726:	1c7b      	adds	r3, r7, #1
 8007728:	444b      	add	r3, r9
 800772a:	106d      	asrs	r5, r5, #1
 800772c:	429d      	cmp	r5, r3
 800772e:	bf38      	it	cc
 8007730:	461d      	movcc	r5, r3
 8007732:	0553      	lsls	r3, r2, #21
 8007734:	d527      	bpl.n	8007786 <__ssputs_r+0x8e>
 8007736:	4629      	mov	r1, r5
 8007738:	f000 f960 	bl	80079fc <_malloc_r>
 800773c:	4606      	mov	r6, r0
 800773e:	b360      	cbz	r0, 800779a <__ssputs_r+0xa2>
 8007740:	464a      	mov	r2, r9
 8007742:	6921      	ldr	r1, [r4, #16]
 8007744:	f000 fef0 	bl	8008528 <memcpy>
 8007748:	89a3      	ldrh	r3, [r4, #12]
 800774a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800774e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007752:	81a3      	strh	r3, [r4, #12]
 8007754:	6126      	str	r6, [r4, #16]
 8007756:	444e      	add	r6, r9
 8007758:	6026      	str	r6, [r4, #0]
 800775a:	463e      	mov	r6, r7
 800775c:	6165      	str	r5, [r4, #20]
 800775e:	eba5 0509 	sub.w	r5, r5, r9
 8007762:	60a5      	str	r5, [r4, #8]
 8007764:	42be      	cmp	r6, r7
 8007766:	d900      	bls.n	800776a <__ssputs_r+0x72>
 8007768:	463e      	mov	r6, r7
 800776a:	4632      	mov	r2, r6
 800776c:	4641      	mov	r1, r8
 800776e:	6820      	ldr	r0, [r4, #0]
 8007770:	f000 fe69 	bl	8008446 <memmove>
 8007774:	2000      	movs	r0, #0
 8007776:	68a3      	ldr	r3, [r4, #8]
 8007778:	1b9b      	subs	r3, r3, r6
 800777a:	60a3      	str	r3, [r4, #8]
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	4433      	add	r3, r6
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007786:	462a      	mov	r2, r5
 8007788:	f000 fe2f 	bl	80083ea <_realloc_r>
 800778c:	4606      	mov	r6, r0
 800778e:	2800      	cmp	r0, #0
 8007790:	d1e0      	bne.n	8007754 <__ssputs_r+0x5c>
 8007792:	4650      	mov	r0, sl
 8007794:	6921      	ldr	r1, [r4, #16]
 8007796:	f000 ff07 	bl	80085a8 <_free_r>
 800779a:	230c      	movs	r3, #12
 800779c:	f8ca 3000 	str.w	r3, [sl]
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077aa:	81a3      	strh	r3, [r4, #12]
 80077ac:	e7e9      	b.n	8007782 <__ssputs_r+0x8a>
	...

080077b0 <_svfiprintf_r>:
 80077b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b4:	4698      	mov	r8, r3
 80077b6:	898b      	ldrh	r3, [r1, #12]
 80077b8:	4607      	mov	r7, r0
 80077ba:	061b      	lsls	r3, r3, #24
 80077bc:	460d      	mov	r5, r1
 80077be:	4614      	mov	r4, r2
 80077c0:	b09d      	sub	sp, #116	@ 0x74
 80077c2:	d510      	bpl.n	80077e6 <_svfiprintf_r+0x36>
 80077c4:	690b      	ldr	r3, [r1, #16]
 80077c6:	b973      	cbnz	r3, 80077e6 <_svfiprintf_r+0x36>
 80077c8:	2140      	movs	r1, #64	@ 0x40
 80077ca:	f000 f917 	bl	80079fc <_malloc_r>
 80077ce:	6028      	str	r0, [r5, #0]
 80077d0:	6128      	str	r0, [r5, #16]
 80077d2:	b930      	cbnz	r0, 80077e2 <_svfiprintf_r+0x32>
 80077d4:	230c      	movs	r3, #12
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077dc:	b01d      	add	sp, #116	@ 0x74
 80077de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e2:	2340      	movs	r3, #64	@ 0x40
 80077e4:	616b      	str	r3, [r5, #20]
 80077e6:	2300      	movs	r3, #0
 80077e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80077ea:	2320      	movs	r3, #32
 80077ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80077f0:	2330      	movs	r3, #48	@ 0x30
 80077f2:	f04f 0901 	mov.w	r9, #1
 80077f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80077fa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007994 <_svfiprintf_r+0x1e4>
 80077fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007802:	4623      	mov	r3, r4
 8007804:	469a      	mov	sl, r3
 8007806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800780a:	b10a      	cbz	r2, 8007810 <_svfiprintf_r+0x60>
 800780c:	2a25      	cmp	r2, #37	@ 0x25
 800780e:	d1f9      	bne.n	8007804 <_svfiprintf_r+0x54>
 8007810:	ebba 0b04 	subs.w	fp, sl, r4
 8007814:	d00b      	beq.n	800782e <_svfiprintf_r+0x7e>
 8007816:	465b      	mov	r3, fp
 8007818:	4622      	mov	r2, r4
 800781a:	4629      	mov	r1, r5
 800781c:	4638      	mov	r0, r7
 800781e:	f7ff ff6b 	bl	80076f8 <__ssputs_r>
 8007822:	3001      	adds	r0, #1
 8007824:	f000 80a7 	beq.w	8007976 <_svfiprintf_r+0x1c6>
 8007828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800782a:	445a      	add	r2, fp
 800782c:	9209      	str	r2, [sp, #36]	@ 0x24
 800782e:	f89a 3000 	ldrb.w	r3, [sl]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 809f 	beq.w	8007976 <_svfiprintf_r+0x1c6>
 8007838:	2300      	movs	r3, #0
 800783a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800783e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007842:	f10a 0a01 	add.w	sl, sl, #1
 8007846:	9304      	str	r3, [sp, #16]
 8007848:	9307      	str	r3, [sp, #28]
 800784a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800784e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007850:	4654      	mov	r4, sl
 8007852:	2205      	movs	r2, #5
 8007854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007858:	484e      	ldr	r0, [pc, #312]	@ (8007994 <_svfiprintf_r+0x1e4>)
 800785a:	f7ff f8ee 	bl	8006a3a <memchr>
 800785e:	9a04      	ldr	r2, [sp, #16]
 8007860:	b9d8      	cbnz	r0, 800789a <_svfiprintf_r+0xea>
 8007862:	06d0      	lsls	r0, r2, #27
 8007864:	bf44      	itt	mi
 8007866:	2320      	movmi	r3, #32
 8007868:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800786c:	0711      	lsls	r1, r2, #28
 800786e:	bf44      	itt	mi
 8007870:	232b      	movmi	r3, #43	@ 0x2b
 8007872:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007876:	f89a 3000 	ldrb.w	r3, [sl]
 800787a:	2b2a      	cmp	r3, #42	@ 0x2a
 800787c:	d015      	beq.n	80078aa <_svfiprintf_r+0xfa>
 800787e:	4654      	mov	r4, sl
 8007880:	2000      	movs	r0, #0
 8007882:	f04f 0c0a 	mov.w	ip, #10
 8007886:	9a07      	ldr	r2, [sp, #28]
 8007888:	4621      	mov	r1, r4
 800788a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800788e:	3b30      	subs	r3, #48	@ 0x30
 8007890:	2b09      	cmp	r3, #9
 8007892:	d94b      	bls.n	800792c <_svfiprintf_r+0x17c>
 8007894:	b1b0      	cbz	r0, 80078c4 <_svfiprintf_r+0x114>
 8007896:	9207      	str	r2, [sp, #28]
 8007898:	e014      	b.n	80078c4 <_svfiprintf_r+0x114>
 800789a:	eba0 0308 	sub.w	r3, r0, r8
 800789e:	fa09 f303 	lsl.w	r3, r9, r3
 80078a2:	4313      	orrs	r3, r2
 80078a4:	46a2      	mov	sl, r4
 80078a6:	9304      	str	r3, [sp, #16]
 80078a8:	e7d2      	b.n	8007850 <_svfiprintf_r+0xa0>
 80078aa:	9b03      	ldr	r3, [sp, #12]
 80078ac:	1d19      	adds	r1, r3, #4
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	9103      	str	r1, [sp, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	bfbb      	ittet	lt
 80078b6:	425b      	neglt	r3, r3
 80078b8:	f042 0202 	orrlt.w	r2, r2, #2
 80078bc:	9307      	strge	r3, [sp, #28]
 80078be:	9307      	strlt	r3, [sp, #28]
 80078c0:	bfb8      	it	lt
 80078c2:	9204      	strlt	r2, [sp, #16]
 80078c4:	7823      	ldrb	r3, [r4, #0]
 80078c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80078c8:	d10a      	bne.n	80078e0 <_svfiprintf_r+0x130>
 80078ca:	7863      	ldrb	r3, [r4, #1]
 80078cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80078ce:	d132      	bne.n	8007936 <_svfiprintf_r+0x186>
 80078d0:	9b03      	ldr	r3, [sp, #12]
 80078d2:	3402      	adds	r4, #2
 80078d4:	1d1a      	adds	r2, r3, #4
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	9203      	str	r2, [sp, #12]
 80078da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80078de:	9305      	str	r3, [sp, #20]
 80078e0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007998 <_svfiprintf_r+0x1e8>
 80078e4:	2203      	movs	r2, #3
 80078e6:	4650      	mov	r0, sl
 80078e8:	7821      	ldrb	r1, [r4, #0]
 80078ea:	f7ff f8a6 	bl	8006a3a <memchr>
 80078ee:	b138      	cbz	r0, 8007900 <_svfiprintf_r+0x150>
 80078f0:	2240      	movs	r2, #64	@ 0x40
 80078f2:	9b04      	ldr	r3, [sp, #16]
 80078f4:	eba0 000a 	sub.w	r0, r0, sl
 80078f8:	4082      	lsls	r2, r0
 80078fa:	4313      	orrs	r3, r2
 80078fc:	3401      	adds	r4, #1
 80078fe:	9304      	str	r3, [sp, #16]
 8007900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007904:	2206      	movs	r2, #6
 8007906:	4825      	ldr	r0, [pc, #148]	@ (800799c <_svfiprintf_r+0x1ec>)
 8007908:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800790c:	f7ff f895 	bl	8006a3a <memchr>
 8007910:	2800      	cmp	r0, #0
 8007912:	d036      	beq.n	8007982 <_svfiprintf_r+0x1d2>
 8007914:	4b22      	ldr	r3, [pc, #136]	@ (80079a0 <_svfiprintf_r+0x1f0>)
 8007916:	bb1b      	cbnz	r3, 8007960 <_svfiprintf_r+0x1b0>
 8007918:	9b03      	ldr	r3, [sp, #12]
 800791a:	3307      	adds	r3, #7
 800791c:	f023 0307 	bic.w	r3, r3, #7
 8007920:	3308      	adds	r3, #8
 8007922:	9303      	str	r3, [sp, #12]
 8007924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007926:	4433      	add	r3, r6
 8007928:	9309      	str	r3, [sp, #36]	@ 0x24
 800792a:	e76a      	b.n	8007802 <_svfiprintf_r+0x52>
 800792c:	460c      	mov	r4, r1
 800792e:	2001      	movs	r0, #1
 8007930:	fb0c 3202 	mla	r2, ip, r2, r3
 8007934:	e7a8      	b.n	8007888 <_svfiprintf_r+0xd8>
 8007936:	2300      	movs	r3, #0
 8007938:	f04f 0c0a 	mov.w	ip, #10
 800793c:	4619      	mov	r1, r3
 800793e:	3401      	adds	r4, #1
 8007940:	9305      	str	r3, [sp, #20]
 8007942:	4620      	mov	r0, r4
 8007944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007948:	3a30      	subs	r2, #48	@ 0x30
 800794a:	2a09      	cmp	r2, #9
 800794c:	d903      	bls.n	8007956 <_svfiprintf_r+0x1a6>
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0c6      	beq.n	80078e0 <_svfiprintf_r+0x130>
 8007952:	9105      	str	r1, [sp, #20]
 8007954:	e7c4      	b.n	80078e0 <_svfiprintf_r+0x130>
 8007956:	4604      	mov	r4, r0
 8007958:	2301      	movs	r3, #1
 800795a:	fb0c 2101 	mla	r1, ip, r1, r2
 800795e:	e7f0      	b.n	8007942 <_svfiprintf_r+0x192>
 8007960:	ab03      	add	r3, sp, #12
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	462a      	mov	r2, r5
 8007966:	4638      	mov	r0, r7
 8007968:	4b0e      	ldr	r3, [pc, #56]	@ (80079a4 <_svfiprintf_r+0x1f4>)
 800796a:	a904      	add	r1, sp, #16
 800796c:	f7fe fb4a 	bl	8006004 <_printf_float>
 8007970:	1c42      	adds	r2, r0, #1
 8007972:	4606      	mov	r6, r0
 8007974:	d1d6      	bne.n	8007924 <_svfiprintf_r+0x174>
 8007976:	89ab      	ldrh	r3, [r5, #12]
 8007978:	065b      	lsls	r3, r3, #25
 800797a:	f53f af2d 	bmi.w	80077d8 <_svfiprintf_r+0x28>
 800797e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007980:	e72c      	b.n	80077dc <_svfiprintf_r+0x2c>
 8007982:	ab03      	add	r3, sp, #12
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	462a      	mov	r2, r5
 8007988:	4638      	mov	r0, r7
 800798a:	4b06      	ldr	r3, [pc, #24]	@ (80079a4 <_svfiprintf_r+0x1f4>)
 800798c:	a904      	add	r1, sp, #16
 800798e:	f7fe fdd7 	bl	8006540 <_printf_i>
 8007992:	e7ed      	b.n	8007970 <_svfiprintf_r+0x1c0>
 8007994:	0800a6c4 	.word	0x0800a6c4
 8007998:	0800a6ca 	.word	0x0800a6ca
 800799c:	0800a6ce 	.word	0x0800a6ce
 80079a0:	08006005 	.word	0x08006005
 80079a4:	080076f9 	.word	0x080076f9

080079a8 <malloc>:
 80079a8:	4b02      	ldr	r3, [pc, #8]	@ (80079b4 <malloc+0xc>)
 80079aa:	4601      	mov	r1, r0
 80079ac:	6818      	ldr	r0, [r3, #0]
 80079ae:	f000 b825 	b.w	80079fc <_malloc_r>
 80079b2:	bf00      	nop
 80079b4:	20000028 	.word	0x20000028

080079b8 <sbrk_aligned>:
 80079b8:	b570      	push	{r4, r5, r6, lr}
 80079ba:	4e0f      	ldr	r6, [pc, #60]	@ (80079f8 <sbrk_aligned+0x40>)
 80079bc:	460c      	mov	r4, r1
 80079be:	6831      	ldr	r1, [r6, #0]
 80079c0:	4605      	mov	r5, r0
 80079c2:	b911      	cbnz	r1, 80079ca <sbrk_aligned+0x12>
 80079c4:	f000 fd8e 	bl	80084e4 <_sbrk_r>
 80079c8:	6030      	str	r0, [r6, #0]
 80079ca:	4621      	mov	r1, r4
 80079cc:	4628      	mov	r0, r5
 80079ce:	f000 fd89 	bl	80084e4 <_sbrk_r>
 80079d2:	1c43      	adds	r3, r0, #1
 80079d4:	d103      	bne.n	80079de <sbrk_aligned+0x26>
 80079d6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80079da:	4620      	mov	r0, r4
 80079dc:	bd70      	pop	{r4, r5, r6, pc}
 80079de:	1cc4      	adds	r4, r0, #3
 80079e0:	f024 0403 	bic.w	r4, r4, #3
 80079e4:	42a0      	cmp	r0, r4
 80079e6:	d0f8      	beq.n	80079da <sbrk_aligned+0x22>
 80079e8:	1a21      	subs	r1, r4, r0
 80079ea:	4628      	mov	r0, r5
 80079ec:	f000 fd7a 	bl	80084e4 <_sbrk_r>
 80079f0:	3001      	adds	r0, #1
 80079f2:	d1f2      	bne.n	80079da <sbrk_aligned+0x22>
 80079f4:	e7ef      	b.n	80079d6 <sbrk_aligned+0x1e>
 80079f6:	bf00      	nop
 80079f8:	20000944 	.word	0x20000944

080079fc <_malloc_r>:
 80079fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a00:	1ccd      	adds	r5, r1, #3
 8007a02:	f025 0503 	bic.w	r5, r5, #3
 8007a06:	3508      	adds	r5, #8
 8007a08:	2d0c      	cmp	r5, #12
 8007a0a:	bf38      	it	cc
 8007a0c:	250c      	movcc	r5, #12
 8007a0e:	2d00      	cmp	r5, #0
 8007a10:	4606      	mov	r6, r0
 8007a12:	db01      	blt.n	8007a18 <_malloc_r+0x1c>
 8007a14:	42a9      	cmp	r1, r5
 8007a16:	d904      	bls.n	8007a22 <_malloc_r+0x26>
 8007a18:	230c      	movs	r3, #12
 8007a1a:	6033      	str	r3, [r6, #0]
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007af8 <_malloc_r+0xfc>
 8007a26:	f000 f911 	bl	8007c4c <__malloc_lock>
 8007a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a2e:	461c      	mov	r4, r3
 8007a30:	bb44      	cbnz	r4, 8007a84 <_malloc_r+0x88>
 8007a32:	4629      	mov	r1, r5
 8007a34:	4630      	mov	r0, r6
 8007a36:	f7ff ffbf 	bl	80079b8 <sbrk_aligned>
 8007a3a:	1c43      	adds	r3, r0, #1
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	d158      	bne.n	8007af2 <_malloc_r+0xf6>
 8007a40:	f8d8 4000 	ldr.w	r4, [r8]
 8007a44:	4627      	mov	r7, r4
 8007a46:	2f00      	cmp	r7, #0
 8007a48:	d143      	bne.n	8007ad2 <_malloc_r+0xd6>
 8007a4a:	2c00      	cmp	r4, #0
 8007a4c:	d04b      	beq.n	8007ae6 <_malloc_r+0xea>
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	4639      	mov	r1, r7
 8007a52:	4630      	mov	r0, r6
 8007a54:	eb04 0903 	add.w	r9, r4, r3
 8007a58:	f000 fd44 	bl	80084e4 <_sbrk_r>
 8007a5c:	4581      	cmp	r9, r0
 8007a5e:	d142      	bne.n	8007ae6 <_malloc_r+0xea>
 8007a60:	6821      	ldr	r1, [r4, #0]
 8007a62:	4630      	mov	r0, r6
 8007a64:	1a6d      	subs	r5, r5, r1
 8007a66:	4629      	mov	r1, r5
 8007a68:	f7ff ffa6 	bl	80079b8 <sbrk_aligned>
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d03a      	beq.n	8007ae6 <_malloc_r+0xea>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	442b      	add	r3, r5
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	f8d8 3000 	ldr.w	r3, [r8]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	bb62      	cbnz	r2, 8007ad8 <_malloc_r+0xdc>
 8007a7e:	f8c8 7000 	str.w	r7, [r8]
 8007a82:	e00f      	b.n	8007aa4 <_malloc_r+0xa8>
 8007a84:	6822      	ldr	r2, [r4, #0]
 8007a86:	1b52      	subs	r2, r2, r5
 8007a88:	d420      	bmi.n	8007acc <_malloc_r+0xd0>
 8007a8a:	2a0b      	cmp	r2, #11
 8007a8c:	d917      	bls.n	8007abe <_malloc_r+0xc2>
 8007a8e:	1961      	adds	r1, r4, r5
 8007a90:	42a3      	cmp	r3, r4
 8007a92:	6025      	str	r5, [r4, #0]
 8007a94:	bf18      	it	ne
 8007a96:	6059      	strne	r1, [r3, #4]
 8007a98:	6863      	ldr	r3, [r4, #4]
 8007a9a:	bf08      	it	eq
 8007a9c:	f8c8 1000 	streq.w	r1, [r8]
 8007aa0:	5162      	str	r2, [r4, r5]
 8007aa2:	604b      	str	r3, [r1, #4]
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f000 f8d7 	bl	8007c58 <__malloc_unlock>
 8007aaa:	f104 000b 	add.w	r0, r4, #11
 8007aae:	1d23      	adds	r3, r4, #4
 8007ab0:	f020 0007 	bic.w	r0, r0, #7
 8007ab4:	1ac2      	subs	r2, r0, r3
 8007ab6:	bf1c      	itt	ne
 8007ab8:	1a1b      	subne	r3, r3, r0
 8007aba:	50a3      	strne	r3, [r4, r2]
 8007abc:	e7af      	b.n	8007a1e <_malloc_r+0x22>
 8007abe:	6862      	ldr	r2, [r4, #4]
 8007ac0:	42a3      	cmp	r3, r4
 8007ac2:	bf0c      	ite	eq
 8007ac4:	f8c8 2000 	streq.w	r2, [r8]
 8007ac8:	605a      	strne	r2, [r3, #4]
 8007aca:	e7eb      	b.n	8007aa4 <_malloc_r+0xa8>
 8007acc:	4623      	mov	r3, r4
 8007ace:	6864      	ldr	r4, [r4, #4]
 8007ad0:	e7ae      	b.n	8007a30 <_malloc_r+0x34>
 8007ad2:	463c      	mov	r4, r7
 8007ad4:	687f      	ldr	r7, [r7, #4]
 8007ad6:	e7b6      	b.n	8007a46 <_malloc_r+0x4a>
 8007ad8:	461a      	mov	r2, r3
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	d1fb      	bne.n	8007ad8 <_malloc_r+0xdc>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	6053      	str	r3, [r2, #4]
 8007ae4:	e7de      	b.n	8007aa4 <_malloc_r+0xa8>
 8007ae6:	230c      	movs	r3, #12
 8007ae8:	4630      	mov	r0, r6
 8007aea:	6033      	str	r3, [r6, #0]
 8007aec:	f000 f8b4 	bl	8007c58 <__malloc_unlock>
 8007af0:	e794      	b.n	8007a1c <_malloc_r+0x20>
 8007af2:	6005      	str	r5, [r0, #0]
 8007af4:	e7d6      	b.n	8007aa4 <_malloc_r+0xa8>
 8007af6:	bf00      	nop
 8007af8:	20000948 	.word	0x20000948

08007afc <__sflush_r>:
 8007afc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b02:	0716      	lsls	r6, r2, #28
 8007b04:	4605      	mov	r5, r0
 8007b06:	460c      	mov	r4, r1
 8007b08:	d454      	bmi.n	8007bb4 <__sflush_r+0xb8>
 8007b0a:	684b      	ldr	r3, [r1, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	dc02      	bgt.n	8007b16 <__sflush_r+0x1a>
 8007b10:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	dd48      	ble.n	8007ba8 <__sflush_r+0xac>
 8007b16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b18:	2e00      	cmp	r6, #0
 8007b1a:	d045      	beq.n	8007ba8 <__sflush_r+0xac>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b22:	682f      	ldr	r7, [r5, #0]
 8007b24:	6a21      	ldr	r1, [r4, #32]
 8007b26:	602b      	str	r3, [r5, #0]
 8007b28:	d030      	beq.n	8007b8c <__sflush_r+0x90>
 8007b2a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	0759      	lsls	r1, r3, #29
 8007b30:	d505      	bpl.n	8007b3e <__sflush_r+0x42>
 8007b32:	6863      	ldr	r3, [r4, #4]
 8007b34:	1ad2      	subs	r2, r2, r3
 8007b36:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b38:	b10b      	cbz	r3, 8007b3e <__sflush_r+0x42>
 8007b3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b3c:	1ad2      	subs	r2, r2, r3
 8007b3e:	2300      	movs	r3, #0
 8007b40:	4628      	mov	r0, r5
 8007b42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b44:	6a21      	ldr	r1, [r4, #32]
 8007b46:	47b0      	blx	r6
 8007b48:	1c43      	adds	r3, r0, #1
 8007b4a:	89a3      	ldrh	r3, [r4, #12]
 8007b4c:	d106      	bne.n	8007b5c <__sflush_r+0x60>
 8007b4e:	6829      	ldr	r1, [r5, #0]
 8007b50:	291d      	cmp	r1, #29
 8007b52:	d82b      	bhi.n	8007bac <__sflush_r+0xb0>
 8007b54:	4a28      	ldr	r2, [pc, #160]	@ (8007bf8 <__sflush_r+0xfc>)
 8007b56:	410a      	asrs	r2, r1
 8007b58:	07d6      	lsls	r6, r2, #31
 8007b5a:	d427      	bmi.n	8007bac <__sflush_r+0xb0>
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	6062      	str	r2, [r4, #4]
 8007b60:	6922      	ldr	r2, [r4, #16]
 8007b62:	04d9      	lsls	r1, r3, #19
 8007b64:	6022      	str	r2, [r4, #0]
 8007b66:	d504      	bpl.n	8007b72 <__sflush_r+0x76>
 8007b68:	1c42      	adds	r2, r0, #1
 8007b6a:	d101      	bne.n	8007b70 <__sflush_r+0x74>
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	b903      	cbnz	r3, 8007b72 <__sflush_r+0x76>
 8007b70:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b74:	602f      	str	r7, [r5, #0]
 8007b76:	b1b9      	cbz	r1, 8007ba8 <__sflush_r+0xac>
 8007b78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b7c:	4299      	cmp	r1, r3
 8007b7e:	d002      	beq.n	8007b86 <__sflush_r+0x8a>
 8007b80:	4628      	mov	r0, r5
 8007b82:	f000 fd11 	bl	80085a8 <_free_r>
 8007b86:	2300      	movs	r3, #0
 8007b88:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b8a:	e00d      	b.n	8007ba8 <__sflush_r+0xac>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	4628      	mov	r0, r5
 8007b90:	47b0      	blx	r6
 8007b92:	4602      	mov	r2, r0
 8007b94:	1c50      	adds	r0, r2, #1
 8007b96:	d1c9      	bne.n	8007b2c <__sflush_r+0x30>
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d0c6      	beq.n	8007b2c <__sflush_r+0x30>
 8007b9e:	2b1d      	cmp	r3, #29
 8007ba0:	d001      	beq.n	8007ba6 <__sflush_r+0xaa>
 8007ba2:	2b16      	cmp	r3, #22
 8007ba4:	d11d      	bne.n	8007be2 <__sflush_r+0xe6>
 8007ba6:	602f      	str	r7, [r5, #0]
 8007ba8:	2000      	movs	r0, #0
 8007baa:	e021      	b.n	8007bf0 <__sflush_r+0xf4>
 8007bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bb0:	b21b      	sxth	r3, r3
 8007bb2:	e01a      	b.n	8007bea <__sflush_r+0xee>
 8007bb4:	690f      	ldr	r7, [r1, #16]
 8007bb6:	2f00      	cmp	r7, #0
 8007bb8:	d0f6      	beq.n	8007ba8 <__sflush_r+0xac>
 8007bba:	0793      	lsls	r3, r2, #30
 8007bbc:	bf18      	it	ne
 8007bbe:	2300      	movne	r3, #0
 8007bc0:	680e      	ldr	r6, [r1, #0]
 8007bc2:	bf08      	it	eq
 8007bc4:	694b      	ldreq	r3, [r1, #20]
 8007bc6:	1bf6      	subs	r6, r6, r7
 8007bc8:	600f      	str	r7, [r1, #0]
 8007bca:	608b      	str	r3, [r1, #8]
 8007bcc:	2e00      	cmp	r6, #0
 8007bce:	ddeb      	ble.n	8007ba8 <__sflush_r+0xac>
 8007bd0:	4633      	mov	r3, r6
 8007bd2:	463a      	mov	r2, r7
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	6a21      	ldr	r1, [r4, #32]
 8007bd8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007bdc:	47e0      	blx	ip
 8007bde:	2800      	cmp	r0, #0
 8007be0:	dc07      	bgt.n	8007bf2 <__sflush_r+0xf6>
 8007be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007be6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007bee:	81a3      	strh	r3, [r4, #12]
 8007bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bf2:	4407      	add	r7, r0
 8007bf4:	1a36      	subs	r6, r6, r0
 8007bf6:	e7e9      	b.n	8007bcc <__sflush_r+0xd0>
 8007bf8:	dfbffffe 	.word	0xdfbffffe

08007bfc <_fflush_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	690b      	ldr	r3, [r1, #16]
 8007c00:	4605      	mov	r5, r0
 8007c02:	460c      	mov	r4, r1
 8007c04:	b913      	cbnz	r3, 8007c0c <_fflush_r+0x10>
 8007c06:	2500      	movs	r5, #0
 8007c08:	4628      	mov	r0, r5
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	b118      	cbz	r0, 8007c16 <_fflush_r+0x1a>
 8007c0e:	6a03      	ldr	r3, [r0, #32]
 8007c10:	b90b      	cbnz	r3, 8007c16 <_fflush_r+0x1a>
 8007c12:	f7fe fe61 	bl	80068d8 <__sinit>
 8007c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d0f3      	beq.n	8007c06 <_fflush_r+0xa>
 8007c1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c20:	07d0      	lsls	r0, r2, #31
 8007c22:	d404      	bmi.n	8007c2e <_fflush_r+0x32>
 8007c24:	0599      	lsls	r1, r3, #22
 8007c26:	d402      	bmi.n	8007c2e <_fflush_r+0x32>
 8007c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c2a:	f7fe ff04 	bl	8006a36 <__retarget_lock_acquire_recursive>
 8007c2e:	4628      	mov	r0, r5
 8007c30:	4621      	mov	r1, r4
 8007c32:	f7ff ff63 	bl	8007afc <__sflush_r>
 8007c36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c38:	4605      	mov	r5, r0
 8007c3a:	07da      	lsls	r2, r3, #31
 8007c3c:	d4e4      	bmi.n	8007c08 <_fflush_r+0xc>
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	059b      	lsls	r3, r3, #22
 8007c42:	d4e1      	bmi.n	8007c08 <_fflush_r+0xc>
 8007c44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c46:	f7fe fef7 	bl	8006a38 <__retarget_lock_release_recursive>
 8007c4a:	e7dd      	b.n	8007c08 <_fflush_r+0xc>

08007c4c <__malloc_lock>:
 8007c4c:	4801      	ldr	r0, [pc, #4]	@ (8007c54 <__malloc_lock+0x8>)
 8007c4e:	f7fe bef2 	b.w	8006a36 <__retarget_lock_acquire_recursive>
 8007c52:	bf00      	nop
 8007c54:	20000940 	.word	0x20000940

08007c58 <__malloc_unlock>:
 8007c58:	4801      	ldr	r0, [pc, #4]	@ (8007c60 <__malloc_unlock+0x8>)
 8007c5a:	f7fe beed 	b.w	8006a38 <__retarget_lock_release_recursive>
 8007c5e:	bf00      	nop
 8007c60:	20000940 	.word	0x20000940

08007c64 <_Balloc>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	69c6      	ldr	r6, [r0, #28]
 8007c68:	4604      	mov	r4, r0
 8007c6a:	460d      	mov	r5, r1
 8007c6c:	b976      	cbnz	r6, 8007c8c <_Balloc+0x28>
 8007c6e:	2010      	movs	r0, #16
 8007c70:	f7ff fe9a 	bl	80079a8 <malloc>
 8007c74:	4602      	mov	r2, r0
 8007c76:	61e0      	str	r0, [r4, #28]
 8007c78:	b920      	cbnz	r0, 8007c84 <_Balloc+0x20>
 8007c7a:	216b      	movs	r1, #107	@ 0x6b
 8007c7c:	4b17      	ldr	r3, [pc, #92]	@ (8007cdc <_Balloc+0x78>)
 8007c7e:	4818      	ldr	r0, [pc, #96]	@ (8007ce0 <_Balloc+0x7c>)
 8007c80:	f000 fc60 	bl	8008544 <__assert_func>
 8007c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c88:	6006      	str	r6, [r0, #0]
 8007c8a:	60c6      	str	r6, [r0, #12]
 8007c8c:	69e6      	ldr	r6, [r4, #28]
 8007c8e:	68f3      	ldr	r3, [r6, #12]
 8007c90:	b183      	cbz	r3, 8007cb4 <_Balloc+0x50>
 8007c92:	69e3      	ldr	r3, [r4, #28]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c9a:	b9b8      	cbnz	r0, 8007ccc <_Balloc+0x68>
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	fa01 f605 	lsl.w	r6, r1, r5
 8007ca2:	1d72      	adds	r2, r6, #5
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	0092      	lsls	r2, r2, #2
 8007ca8:	f000 fc6a 	bl	8008580 <_calloc_r>
 8007cac:	b160      	cbz	r0, 8007cc8 <_Balloc+0x64>
 8007cae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cb2:	e00e      	b.n	8007cd2 <_Balloc+0x6e>
 8007cb4:	2221      	movs	r2, #33	@ 0x21
 8007cb6:	2104      	movs	r1, #4
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 fc61 	bl	8008580 <_calloc_r>
 8007cbe:	69e3      	ldr	r3, [r4, #28]
 8007cc0:	60f0      	str	r0, [r6, #12]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e4      	bne.n	8007c92 <_Balloc+0x2e>
 8007cc8:	2000      	movs	r0, #0
 8007cca:	bd70      	pop	{r4, r5, r6, pc}
 8007ccc:	6802      	ldr	r2, [r0, #0]
 8007cce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cd8:	e7f7      	b.n	8007cca <_Balloc+0x66>
 8007cda:	bf00      	nop
 8007cdc:	0800a644 	.word	0x0800a644
 8007ce0:	0800a6d5 	.word	0x0800a6d5

08007ce4 <_Bfree>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	69c6      	ldr	r6, [r0, #28]
 8007ce8:	4605      	mov	r5, r0
 8007cea:	460c      	mov	r4, r1
 8007cec:	b976      	cbnz	r6, 8007d0c <_Bfree+0x28>
 8007cee:	2010      	movs	r0, #16
 8007cf0:	f7ff fe5a 	bl	80079a8 <malloc>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	61e8      	str	r0, [r5, #28]
 8007cf8:	b920      	cbnz	r0, 8007d04 <_Bfree+0x20>
 8007cfa:	218f      	movs	r1, #143	@ 0x8f
 8007cfc:	4b08      	ldr	r3, [pc, #32]	@ (8007d20 <_Bfree+0x3c>)
 8007cfe:	4809      	ldr	r0, [pc, #36]	@ (8007d24 <_Bfree+0x40>)
 8007d00:	f000 fc20 	bl	8008544 <__assert_func>
 8007d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d08:	6006      	str	r6, [r0, #0]
 8007d0a:	60c6      	str	r6, [r0, #12]
 8007d0c:	b13c      	cbz	r4, 8007d1e <_Bfree+0x3a>
 8007d0e:	69eb      	ldr	r3, [r5, #28]
 8007d10:	6862      	ldr	r2, [r4, #4]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d18:	6021      	str	r1, [r4, #0]
 8007d1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}
 8007d20:	0800a644 	.word	0x0800a644
 8007d24:	0800a6d5 	.word	0x0800a6d5

08007d28 <__multadd>:
 8007d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	460c      	mov	r4, r1
 8007d30:	461e      	mov	r6, r3
 8007d32:	2000      	movs	r0, #0
 8007d34:	690d      	ldr	r5, [r1, #16]
 8007d36:	f101 0c14 	add.w	ip, r1, #20
 8007d3a:	f8dc 3000 	ldr.w	r3, [ip]
 8007d3e:	3001      	adds	r0, #1
 8007d40:	b299      	uxth	r1, r3
 8007d42:	fb02 6101 	mla	r1, r2, r1, r6
 8007d46:	0c1e      	lsrs	r6, r3, #16
 8007d48:	0c0b      	lsrs	r3, r1, #16
 8007d4a:	fb02 3306 	mla	r3, r2, r6, r3
 8007d4e:	b289      	uxth	r1, r1
 8007d50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d54:	4285      	cmp	r5, r0
 8007d56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d5a:	f84c 1b04 	str.w	r1, [ip], #4
 8007d5e:	dcec      	bgt.n	8007d3a <__multadd+0x12>
 8007d60:	b30e      	cbz	r6, 8007da6 <__multadd+0x7e>
 8007d62:	68a3      	ldr	r3, [r4, #8]
 8007d64:	42ab      	cmp	r3, r5
 8007d66:	dc19      	bgt.n	8007d9c <__multadd+0x74>
 8007d68:	6861      	ldr	r1, [r4, #4]
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	3101      	adds	r1, #1
 8007d6e:	f7ff ff79 	bl	8007c64 <_Balloc>
 8007d72:	4680      	mov	r8, r0
 8007d74:	b928      	cbnz	r0, 8007d82 <__multadd+0x5a>
 8007d76:	4602      	mov	r2, r0
 8007d78:	21ba      	movs	r1, #186	@ 0xba
 8007d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007dac <__multadd+0x84>)
 8007d7c:	480c      	ldr	r0, [pc, #48]	@ (8007db0 <__multadd+0x88>)
 8007d7e:	f000 fbe1 	bl	8008544 <__assert_func>
 8007d82:	6922      	ldr	r2, [r4, #16]
 8007d84:	f104 010c 	add.w	r1, r4, #12
 8007d88:	3202      	adds	r2, #2
 8007d8a:	0092      	lsls	r2, r2, #2
 8007d8c:	300c      	adds	r0, #12
 8007d8e:	f000 fbcb 	bl	8008528 <memcpy>
 8007d92:	4621      	mov	r1, r4
 8007d94:	4638      	mov	r0, r7
 8007d96:	f7ff ffa5 	bl	8007ce4 <_Bfree>
 8007d9a:	4644      	mov	r4, r8
 8007d9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007da0:	3501      	adds	r5, #1
 8007da2:	615e      	str	r6, [r3, #20]
 8007da4:	6125      	str	r5, [r4, #16]
 8007da6:	4620      	mov	r0, r4
 8007da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dac:	0800a6b3 	.word	0x0800a6b3
 8007db0:	0800a6d5 	.word	0x0800a6d5

08007db4 <__hi0bits>:
 8007db4:	4603      	mov	r3, r0
 8007db6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007dba:	bf3a      	itte	cc
 8007dbc:	0403      	lslcc	r3, r0, #16
 8007dbe:	2010      	movcc	r0, #16
 8007dc0:	2000      	movcs	r0, #0
 8007dc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dc6:	bf3c      	itt	cc
 8007dc8:	021b      	lslcc	r3, r3, #8
 8007dca:	3008      	addcc	r0, #8
 8007dcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dd0:	bf3c      	itt	cc
 8007dd2:	011b      	lslcc	r3, r3, #4
 8007dd4:	3004      	addcc	r0, #4
 8007dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dda:	bf3c      	itt	cc
 8007ddc:	009b      	lslcc	r3, r3, #2
 8007dde:	3002      	addcc	r0, #2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	db05      	blt.n	8007df0 <__hi0bits+0x3c>
 8007de4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007de8:	f100 0001 	add.w	r0, r0, #1
 8007dec:	bf08      	it	eq
 8007dee:	2020      	moveq	r0, #32
 8007df0:	4770      	bx	lr

08007df2 <__lo0bits>:
 8007df2:	6803      	ldr	r3, [r0, #0]
 8007df4:	4602      	mov	r2, r0
 8007df6:	f013 0007 	ands.w	r0, r3, #7
 8007dfa:	d00b      	beq.n	8007e14 <__lo0bits+0x22>
 8007dfc:	07d9      	lsls	r1, r3, #31
 8007dfe:	d421      	bmi.n	8007e44 <__lo0bits+0x52>
 8007e00:	0798      	lsls	r0, r3, #30
 8007e02:	bf49      	itett	mi
 8007e04:	085b      	lsrmi	r3, r3, #1
 8007e06:	089b      	lsrpl	r3, r3, #2
 8007e08:	2001      	movmi	r0, #1
 8007e0a:	6013      	strmi	r3, [r2, #0]
 8007e0c:	bf5c      	itt	pl
 8007e0e:	2002      	movpl	r0, #2
 8007e10:	6013      	strpl	r3, [r2, #0]
 8007e12:	4770      	bx	lr
 8007e14:	b299      	uxth	r1, r3
 8007e16:	b909      	cbnz	r1, 8007e1c <__lo0bits+0x2a>
 8007e18:	2010      	movs	r0, #16
 8007e1a:	0c1b      	lsrs	r3, r3, #16
 8007e1c:	b2d9      	uxtb	r1, r3
 8007e1e:	b909      	cbnz	r1, 8007e24 <__lo0bits+0x32>
 8007e20:	3008      	adds	r0, #8
 8007e22:	0a1b      	lsrs	r3, r3, #8
 8007e24:	0719      	lsls	r1, r3, #28
 8007e26:	bf04      	itt	eq
 8007e28:	091b      	lsreq	r3, r3, #4
 8007e2a:	3004      	addeq	r0, #4
 8007e2c:	0799      	lsls	r1, r3, #30
 8007e2e:	bf04      	itt	eq
 8007e30:	089b      	lsreq	r3, r3, #2
 8007e32:	3002      	addeq	r0, #2
 8007e34:	07d9      	lsls	r1, r3, #31
 8007e36:	d403      	bmi.n	8007e40 <__lo0bits+0x4e>
 8007e38:	085b      	lsrs	r3, r3, #1
 8007e3a:	f100 0001 	add.w	r0, r0, #1
 8007e3e:	d003      	beq.n	8007e48 <__lo0bits+0x56>
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	4770      	bx	lr
 8007e44:	2000      	movs	r0, #0
 8007e46:	4770      	bx	lr
 8007e48:	2020      	movs	r0, #32
 8007e4a:	4770      	bx	lr

08007e4c <__i2b>:
 8007e4c:	b510      	push	{r4, lr}
 8007e4e:	460c      	mov	r4, r1
 8007e50:	2101      	movs	r1, #1
 8007e52:	f7ff ff07 	bl	8007c64 <_Balloc>
 8007e56:	4602      	mov	r2, r0
 8007e58:	b928      	cbnz	r0, 8007e66 <__i2b+0x1a>
 8007e5a:	f240 1145 	movw	r1, #325	@ 0x145
 8007e5e:	4b04      	ldr	r3, [pc, #16]	@ (8007e70 <__i2b+0x24>)
 8007e60:	4804      	ldr	r0, [pc, #16]	@ (8007e74 <__i2b+0x28>)
 8007e62:	f000 fb6f 	bl	8008544 <__assert_func>
 8007e66:	2301      	movs	r3, #1
 8007e68:	6144      	str	r4, [r0, #20]
 8007e6a:	6103      	str	r3, [r0, #16]
 8007e6c:	bd10      	pop	{r4, pc}
 8007e6e:	bf00      	nop
 8007e70:	0800a6b3 	.word	0x0800a6b3
 8007e74:	0800a6d5 	.word	0x0800a6d5

08007e78 <__multiply>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	4614      	mov	r4, r2
 8007e7e:	690a      	ldr	r2, [r1, #16]
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	460f      	mov	r7, r1
 8007e84:	429a      	cmp	r2, r3
 8007e86:	bfa2      	ittt	ge
 8007e88:	4623      	movge	r3, r4
 8007e8a:	460c      	movge	r4, r1
 8007e8c:	461f      	movge	r7, r3
 8007e8e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e92:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007e96:	68a3      	ldr	r3, [r4, #8]
 8007e98:	6861      	ldr	r1, [r4, #4]
 8007e9a:	eb0a 0609 	add.w	r6, sl, r9
 8007e9e:	42b3      	cmp	r3, r6
 8007ea0:	b085      	sub	sp, #20
 8007ea2:	bfb8      	it	lt
 8007ea4:	3101      	addlt	r1, #1
 8007ea6:	f7ff fedd 	bl	8007c64 <_Balloc>
 8007eaa:	b930      	cbnz	r0, 8007eba <__multiply+0x42>
 8007eac:	4602      	mov	r2, r0
 8007eae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007eb2:	4b43      	ldr	r3, [pc, #268]	@ (8007fc0 <__multiply+0x148>)
 8007eb4:	4843      	ldr	r0, [pc, #268]	@ (8007fc4 <__multiply+0x14c>)
 8007eb6:	f000 fb45 	bl	8008544 <__assert_func>
 8007eba:	f100 0514 	add.w	r5, r0, #20
 8007ebe:	462b      	mov	r3, r5
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ec6:	4543      	cmp	r3, r8
 8007ec8:	d321      	bcc.n	8007f0e <__multiply+0x96>
 8007eca:	f107 0114 	add.w	r1, r7, #20
 8007ece:	f104 0214 	add.w	r2, r4, #20
 8007ed2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007ed6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007eda:	9302      	str	r3, [sp, #8]
 8007edc:	1b13      	subs	r3, r2, r4
 8007ede:	3b15      	subs	r3, #21
 8007ee0:	f023 0303 	bic.w	r3, r3, #3
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	f104 0715 	add.w	r7, r4, #21
 8007eea:	42ba      	cmp	r2, r7
 8007eec:	bf38      	it	cc
 8007eee:	2304      	movcc	r3, #4
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	9b02      	ldr	r3, [sp, #8]
 8007ef4:	9103      	str	r1, [sp, #12]
 8007ef6:	428b      	cmp	r3, r1
 8007ef8:	d80c      	bhi.n	8007f14 <__multiply+0x9c>
 8007efa:	2e00      	cmp	r6, #0
 8007efc:	dd03      	ble.n	8007f06 <__multiply+0x8e>
 8007efe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d05a      	beq.n	8007fbc <__multiply+0x144>
 8007f06:	6106      	str	r6, [r0, #16]
 8007f08:	b005      	add	sp, #20
 8007f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0e:	f843 2b04 	str.w	r2, [r3], #4
 8007f12:	e7d8      	b.n	8007ec6 <__multiply+0x4e>
 8007f14:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f18:	f1ba 0f00 	cmp.w	sl, #0
 8007f1c:	d023      	beq.n	8007f66 <__multiply+0xee>
 8007f1e:	46a9      	mov	r9, r5
 8007f20:	f04f 0c00 	mov.w	ip, #0
 8007f24:	f104 0e14 	add.w	lr, r4, #20
 8007f28:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f2c:	f8d9 3000 	ldr.w	r3, [r9]
 8007f30:	fa1f fb87 	uxth.w	fp, r7
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f3a:	4463      	add	r3, ip
 8007f3c:	f8d9 c000 	ldr.w	ip, [r9]
 8007f40:	0c3f      	lsrs	r7, r7, #16
 8007f42:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007f46:	fb0a c707 	mla	r7, sl, r7, ip
 8007f4a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f54:	4572      	cmp	r2, lr
 8007f56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f5a:	f849 3b04 	str.w	r3, [r9], #4
 8007f5e:	d8e3      	bhi.n	8007f28 <__multiply+0xb0>
 8007f60:	9b01      	ldr	r3, [sp, #4]
 8007f62:	f845 c003 	str.w	ip, [r5, r3]
 8007f66:	9b03      	ldr	r3, [sp, #12]
 8007f68:	3104      	adds	r1, #4
 8007f6a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f6e:	f1b9 0f00 	cmp.w	r9, #0
 8007f72:	d021      	beq.n	8007fb8 <__multiply+0x140>
 8007f74:	46ae      	mov	lr, r5
 8007f76:	f04f 0a00 	mov.w	sl, #0
 8007f7a:	682b      	ldr	r3, [r5, #0]
 8007f7c:	f104 0c14 	add.w	ip, r4, #20
 8007f80:	f8bc b000 	ldrh.w	fp, [ip]
 8007f84:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	fb09 770b 	mla	r7, r9, fp, r7
 8007f8e:	4457      	add	r7, sl
 8007f90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f94:	f84e 3b04 	str.w	r3, [lr], #4
 8007f98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fa0:	f8be 3000 	ldrh.w	r3, [lr]
 8007fa4:	4562      	cmp	r2, ip
 8007fa6:	fb09 330a 	mla	r3, r9, sl, r3
 8007faa:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007fae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fb2:	d8e5      	bhi.n	8007f80 <__multiply+0x108>
 8007fb4:	9f01      	ldr	r7, [sp, #4]
 8007fb6:	51eb      	str	r3, [r5, r7]
 8007fb8:	3504      	adds	r5, #4
 8007fba:	e79a      	b.n	8007ef2 <__multiply+0x7a>
 8007fbc:	3e01      	subs	r6, #1
 8007fbe:	e79c      	b.n	8007efa <__multiply+0x82>
 8007fc0:	0800a6b3 	.word	0x0800a6b3
 8007fc4:	0800a6d5 	.word	0x0800a6d5

08007fc8 <__pow5mult>:
 8007fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fcc:	4615      	mov	r5, r2
 8007fce:	f012 0203 	ands.w	r2, r2, #3
 8007fd2:	4607      	mov	r7, r0
 8007fd4:	460e      	mov	r6, r1
 8007fd6:	d007      	beq.n	8007fe8 <__pow5mult+0x20>
 8007fd8:	4c25      	ldr	r4, [pc, #148]	@ (8008070 <__pow5mult+0xa8>)
 8007fda:	3a01      	subs	r2, #1
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fe2:	f7ff fea1 	bl	8007d28 <__multadd>
 8007fe6:	4606      	mov	r6, r0
 8007fe8:	10ad      	asrs	r5, r5, #2
 8007fea:	d03d      	beq.n	8008068 <__pow5mult+0xa0>
 8007fec:	69fc      	ldr	r4, [r7, #28]
 8007fee:	b97c      	cbnz	r4, 8008010 <__pow5mult+0x48>
 8007ff0:	2010      	movs	r0, #16
 8007ff2:	f7ff fcd9 	bl	80079a8 <malloc>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	61f8      	str	r0, [r7, #28]
 8007ffa:	b928      	cbnz	r0, 8008008 <__pow5mult+0x40>
 8007ffc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008000:	4b1c      	ldr	r3, [pc, #112]	@ (8008074 <__pow5mult+0xac>)
 8008002:	481d      	ldr	r0, [pc, #116]	@ (8008078 <__pow5mult+0xb0>)
 8008004:	f000 fa9e 	bl	8008544 <__assert_func>
 8008008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800800c:	6004      	str	r4, [r0, #0]
 800800e:	60c4      	str	r4, [r0, #12]
 8008010:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008018:	b94c      	cbnz	r4, 800802e <__pow5mult+0x66>
 800801a:	f240 2171 	movw	r1, #625	@ 0x271
 800801e:	4638      	mov	r0, r7
 8008020:	f7ff ff14 	bl	8007e4c <__i2b>
 8008024:	2300      	movs	r3, #0
 8008026:	4604      	mov	r4, r0
 8008028:	f8c8 0008 	str.w	r0, [r8, #8]
 800802c:	6003      	str	r3, [r0, #0]
 800802e:	f04f 0900 	mov.w	r9, #0
 8008032:	07eb      	lsls	r3, r5, #31
 8008034:	d50a      	bpl.n	800804c <__pow5mult+0x84>
 8008036:	4631      	mov	r1, r6
 8008038:	4622      	mov	r2, r4
 800803a:	4638      	mov	r0, r7
 800803c:	f7ff ff1c 	bl	8007e78 <__multiply>
 8008040:	4680      	mov	r8, r0
 8008042:	4631      	mov	r1, r6
 8008044:	4638      	mov	r0, r7
 8008046:	f7ff fe4d 	bl	8007ce4 <_Bfree>
 800804a:	4646      	mov	r6, r8
 800804c:	106d      	asrs	r5, r5, #1
 800804e:	d00b      	beq.n	8008068 <__pow5mult+0xa0>
 8008050:	6820      	ldr	r0, [r4, #0]
 8008052:	b938      	cbnz	r0, 8008064 <__pow5mult+0x9c>
 8008054:	4622      	mov	r2, r4
 8008056:	4621      	mov	r1, r4
 8008058:	4638      	mov	r0, r7
 800805a:	f7ff ff0d 	bl	8007e78 <__multiply>
 800805e:	6020      	str	r0, [r4, #0]
 8008060:	f8c0 9000 	str.w	r9, [r0]
 8008064:	4604      	mov	r4, r0
 8008066:	e7e4      	b.n	8008032 <__pow5mult+0x6a>
 8008068:	4630      	mov	r0, r6
 800806a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800806e:	bf00      	nop
 8008070:	0800a730 	.word	0x0800a730
 8008074:	0800a644 	.word	0x0800a644
 8008078:	0800a6d5 	.word	0x0800a6d5

0800807c <__lshift>:
 800807c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008080:	460c      	mov	r4, r1
 8008082:	4607      	mov	r7, r0
 8008084:	4691      	mov	r9, r2
 8008086:	6923      	ldr	r3, [r4, #16]
 8008088:	6849      	ldr	r1, [r1, #4]
 800808a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800808e:	68a3      	ldr	r3, [r4, #8]
 8008090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008094:	f108 0601 	add.w	r6, r8, #1
 8008098:	42b3      	cmp	r3, r6
 800809a:	db0b      	blt.n	80080b4 <__lshift+0x38>
 800809c:	4638      	mov	r0, r7
 800809e:	f7ff fde1 	bl	8007c64 <_Balloc>
 80080a2:	4605      	mov	r5, r0
 80080a4:	b948      	cbnz	r0, 80080ba <__lshift+0x3e>
 80080a6:	4602      	mov	r2, r0
 80080a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80080ac:	4b27      	ldr	r3, [pc, #156]	@ (800814c <__lshift+0xd0>)
 80080ae:	4828      	ldr	r0, [pc, #160]	@ (8008150 <__lshift+0xd4>)
 80080b0:	f000 fa48 	bl	8008544 <__assert_func>
 80080b4:	3101      	adds	r1, #1
 80080b6:	005b      	lsls	r3, r3, #1
 80080b8:	e7ee      	b.n	8008098 <__lshift+0x1c>
 80080ba:	2300      	movs	r3, #0
 80080bc:	f100 0114 	add.w	r1, r0, #20
 80080c0:	f100 0210 	add.w	r2, r0, #16
 80080c4:	4618      	mov	r0, r3
 80080c6:	4553      	cmp	r3, sl
 80080c8:	db33      	blt.n	8008132 <__lshift+0xb6>
 80080ca:	6920      	ldr	r0, [r4, #16]
 80080cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080d0:	f104 0314 	add.w	r3, r4, #20
 80080d4:	f019 091f 	ands.w	r9, r9, #31
 80080d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080e0:	d02b      	beq.n	800813a <__lshift+0xbe>
 80080e2:	468a      	mov	sl, r1
 80080e4:	2200      	movs	r2, #0
 80080e6:	f1c9 0e20 	rsb	lr, r9, #32
 80080ea:	6818      	ldr	r0, [r3, #0]
 80080ec:	fa00 f009 	lsl.w	r0, r0, r9
 80080f0:	4310      	orrs	r0, r2
 80080f2:	f84a 0b04 	str.w	r0, [sl], #4
 80080f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080fa:	459c      	cmp	ip, r3
 80080fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008100:	d8f3      	bhi.n	80080ea <__lshift+0x6e>
 8008102:	ebac 0304 	sub.w	r3, ip, r4
 8008106:	3b15      	subs	r3, #21
 8008108:	f023 0303 	bic.w	r3, r3, #3
 800810c:	3304      	adds	r3, #4
 800810e:	f104 0015 	add.w	r0, r4, #21
 8008112:	4584      	cmp	ip, r0
 8008114:	bf38      	it	cc
 8008116:	2304      	movcc	r3, #4
 8008118:	50ca      	str	r2, [r1, r3]
 800811a:	b10a      	cbz	r2, 8008120 <__lshift+0xa4>
 800811c:	f108 0602 	add.w	r6, r8, #2
 8008120:	3e01      	subs	r6, #1
 8008122:	4638      	mov	r0, r7
 8008124:	4621      	mov	r1, r4
 8008126:	612e      	str	r6, [r5, #16]
 8008128:	f7ff fddc 	bl	8007ce4 <_Bfree>
 800812c:	4628      	mov	r0, r5
 800812e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008132:	f842 0f04 	str.w	r0, [r2, #4]!
 8008136:	3301      	adds	r3, #1
 8008138:	e7c5      	b.n	80080c6 <__lshift+0x4a>
 800813a:	3904      	subs	r1, #4
 800813c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008140:	459c      	cmp	ip, r3
 8008142:	f841 2f04 	str.w	r2, [r1, #4]!
 8008146:	d8f9      	bhi.n	800813c <__lshift+0xc0>
 8008148:	e7ea      	b.n	8008120 <__lshift+0xa4>
 800814a:	bf00      	nop
 800814c:	0800a6b3 	.word	0x0800a6b3
 8008150:	0800a6d5 	.word	0x0800a6d5

08008154 <__mcmp>:
 8008154:	4603      	mov	r3, r0
 8008156:	690a      	ldr	r2, [r1, #16]
 8008158:	6900      	ldr	r0, [r0, #16]
 800815a:	b530      	push	{r4, r5, lr}
 800815c:	1a80      	subs	r0, r0, r2
 800815e:	d10e      	bne.n	800817e <__mcmp+0x2a>
 8008160:	3314      	adds	r3, #20
 8008162:	3114      	adds	r1, #20
 8008164:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008168:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800816c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008170:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008174:	4295      	cmp	r5, r2
 8008176:	d003      	beq.n	8008180 <__mcmp+0x2c>
 8008178:	d205      	bcs.n	8008186 <__mcmp+0x32>
 800817a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800817e:	bd30      	pop	{r4, r5, pc}
 8008180:	42a3      	cmp	r3, r4
 8008182:	d3f3      	bcc.n	800816c <__mcmp+0x18>
 8008184:	e7fb      	b.n	800817e <__mcmp+0x2a>
 8008186:	2001      	movs	r0, #1
 8008188:	e7f9      	b.n	800817e <__mcmp+0x2a>
	...

0800818c <__mdiff>:
 800818c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008190:	4689      	mov	r9, r1
 8008192:	4606      	mov	r6, r0
 8008194:	4611      	mov	r1, r2
 8008196:	4648      	mov	r0, r9
 8008198:	4614      	mov	r4, r2
 800819a:	f7ff ffdb 	bl	8008154 <__mcmp>
 800819e:	1e05      	subs	r5, r0, #0
 80081a0:	d112      	bne.n	80081c8 <__mdiff+0x3c>
 80081a2:	4629      	mov	r1, r5
 80081a4:	4630      	mov	r0, r6
 80081a6:	f7ff fd5d 	bl	8007c64 <_Balloc>
 80081aa:	4602      	mov	r2, r0
 80081ac:	b928      	cbnz	r0, 80081ba <__mdiff+0x2e>
 80081ae:	f240 2137 	movw	r1, #567	@ 0x237
 80081b2:	4b3e      	ldr	r3, [pc, #248]	@ (80082ac <__mdiff+0x120>)
 80081b4:	483e      	ldr	r0, [pc, #248]	@ (80082b0 <__mdiff+0x124>)
 80081b6:	f000 f9c5 	bl	8008544 <__assert_func>
 80081ba:	2301      	movs	r3, #1
 80081bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081c0:	4610      	mov	r0, r2
 80081c2:	b003      	add	sp, #12
 80081c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c8:	bfbc      	itt	lt
 80081ca:	464b      	movlt	r3, r9
 80081cc:	46a1      	movlt	r9, r4
 80081ce:	4630      	mov	r0, r6
 80081d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081d4:	bfba      	itte	lt
 80081d6:	461c      	movlt	r4, r3
 80081d8:	2501      	movlt	r5, #1
 80081da:	2500      	movge	r5, #0
 80081dc:	f7ff fd42 	bl	8007c64 <_Balloc>
 80081e0:	4602      	mov	r2, r0
 80081e2:	b918      	cbnz	r0, 80081ec <__mdiff+0x60>
 80081e4:	f240 2145 	movw	r1, #581	@ 0x245
 80081e8:	4b30      	ldr	r3, [pc, #192]	@ (80082ac <__mdiff+0x120>)
 80081ea:	e7e3      	b.n	80081b4 <__mdiff+0x28>
 80081ec:	f100 0b14 	add.w	fp, r0, #20
 80081f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80081f4:	f109 0310 	add.w	r3, r9, #16
 80081f8:	60c5      	str	r5, [r0, #12]
 80081fa:	f04f 0c00 	mov.w	ip, #0
 80081fe:	f109 0514 	add.w	r5, r9, #20
 8008202:	46d9      	mov	r9, fp
 8008204:	6926      	ldr	r6, [r4, #16]
 8008206:	f104 0e14 	add.w	lr, r4, #20
 800820a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800820e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008212:	9301      	str	r3, [sp, #4]
 8008214:	9b01      	ldr	r3, [sp, #4]
 8008216:	f85e 0b04 	ldr.w	r0, [lr], #4
 800821a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800821e:	b281      	uxth	r1, r0
 8008220:	9301      	str	r3, [sp, #4]
 8008222:	fa1f f38a 	uxth.w	r3, sl
 8008226:	1a5b      	subs	r3, r3, r1
 8008228:	0c00      	lsrs	r0, r0, #16
 800822a:	4463      	add	r3, ip
 800822c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008230:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008234:	b29b      	uxth	r3, r3
 8008236:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800823a:	4576      	cmp	r6, lr
 800823c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008240:	f849 3b04 	str.w	r3, [r9], #4
 8008244:	d8e6      	bhi.n	8008214 <__mdiff+0x88>
 8008246:	1b33      	subs	r3, r6, r4
 8008248:	3b15      	subs	r3, #21
 800824a:	f023 0303 	bic.w	r3, r3, #3
 800824e:	3415      	adds	r4, #21
 8008250:	3304      	adds	r3, #4
 8008252:	42a6      	cmp	r6, r4
 8008254:	bf38      	it	cc
 8008256:	2304      	movcc	r3, #4
 8008258:	441d      	add	r5, r3
 800825a:	445b      	add	r3, fp
 800825c:	461e      	mov	r6, r3
 800825e:	462c      	mov	r4, r5
 8008260:	4544      	cmp	r4, r8
 8008262:	d30e      	bcc.n	8008282 <__mdiff+0xf6>
 8008264:	f108 0103 	add.w	r1, r8, #3
 8008268:	1b49      	subs	r1, r1, r5
 800826a:	f021 0103 	bic.w	r1, r1, #3
 800826e:	3d03      	subs	r5, #3
 8008270:	45a8      	cmp	r8, r5
 8008272:	bf38      	it	cc
 8008274:	2100      	movcc	r1, #0
 8008276:	440b      	add	r3, r1
 8008278:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800827c:	b199      	cbz	r1, 80082a6 <__mdiff+0x11a>
 800827e:	6117      	str	r7, [r2, #16]
 8008280:	e79e      	b.n	80081c0 <__mdiff+0x34>
 8008282:	46e6      	mov	lr, ip
 8008284:	f854 1b04 	ldr.w	r1, [r4], #4
 8008288:	fa1f fc81 	uxth.w	ip, r1
 800828c:	44f4      	add	ip, lr
 800828e:	0c08      	lsrs	r0, r1, #16
 8008290:	4471      	add	r1, lr
 8008292:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008296:	b289      	uxth	r1, r1
 8008298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800829c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082a0:	f846 1b04 	str.w	r1, [r6], #4
 80082a4:	e7dc      	b.n	8008260 <__mdiff+0xd4>
 80082a6:	3f01      	subs	r7, #1
 80082a8:	e7e6      	b.n	8008278 <__mdiff+0xec>
 80082aa:	bf00      	nop
 80082ac:	0800a6b3 	.word	0x0800a6b3
 80082b0:	0800a6d5 	.word	0x0800a6d5

080082b4 <__d2b>:
 80082b4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80082b8:	2101      	movs	r1, #1
 80082ba:	4690      	mov	r8, r2
 80082bc:	4699      	mov	r9, r3
 80082be:	9e08      	ldr	r6, [sp, #32]
 80082c0:	f7ff fcd0 	bl	8007c64 <_Balloc>
 80082c4:	4604      	mov	r4, r0
 80082c6:	b930      	cbnz	r0, 80082d6 <__d2b+0x22>
 80082c8:	4602      	mov	r2, r0
 80082ca:	f240 310f 	movw	r1, #783	@ 0x30f
 80082ce:	4b23      	ldr	r3, [pc, #140]	@ (800835c <__d2b+0xa8>)
 80082d0:	4823      	ldr	r0, [pc, #140]	@ (8008360 <__d2b+0xac>)
 80082d2:	f000 f937 	bl	8008544 <__assert_func>
 80082d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80082da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082de:	b10d      	cbz	r5, 80082e4 <__d2b+0x30>
 80082e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082e4:	9301      	str	r3, [sp, #4]
 80082e6:	f1b8 0300 	subs.w	r3, r8, #0
 80082ea:	d024      	beq.n	8008336 <__d2b+0x82>
 80082ec:	4668      	mov	r0, sp
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	f7ff fd7f 	bl	8007df2 <__lo0bits>
 80082f4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80082f8:	b1d8      	cbz	r0, 8008332 <__d2b+0x7e>
 80082fa:	f1c0 0320 	rsb	r3, r0, #32
 80082fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008302:	430b      	orrs	r3, r1
 8008304:	40c2      	lsrs	r2, r0
 8008306:	6163      	str	r3, [r4, #20]
 8008308:	9201      	str	r2, [sp, #4]
 800830a:	9b01      	ldr	r3, [sp, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	bf0c      	ite	eq
 8008310:	2201      	moveq	r2, #1
 8008312:	2202      	movne	r2, #2
 8008314:	61a3      	str	r3, [r4, #24]
 8008316:	6122      	str	r2, [r4, #16]
 8008318:	b1ad      	cbz	r5, 8008346 <__d2b+0x92>
 800831a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800831e:	4405      	add	r5, r0
 8008320:	6035      	str	r5, [r6, #0]
 8008322:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008328:	6018      	str	r0, [r3, #0]
 800832a:	4620      	mov	r0, r4
 800832c:	b002      	add	sp, #8
 800832e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008332:	6161      	str	r1, [r4, #20]
 8008334:	e7e9      	b.n	800830a <__d2b+0x56>
 8008336:	a801      	add	r0, sp, #4
 8008338:	f7ff fd5b 	bl	8007df2 <__lo0bits>
 800833c:	9b01      	ldr	r3, [sp, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	6163      	str	r3, [r4, #20]
 8008342:	3020      	adds	r0, #32
 8008344:	e7e7      	b.n	8008316 <__d2b+0x62>
 8008346:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800834a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800834e:	6030      	str	r0, [r6, #0]
 8008350:	6918      	ldr	r0, [r3, #16]
 8008352:	f7ff fd2f 	bl	8007db4 <__hi0bits>
 8008356:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800835a:	e7e4      	b.n	8008326 <__d2b+0x72>
 800835c:	0800a6b3 	.word	0x0800a6b3
 8008360:	0800a6d5 	.word	0x0800a6d5

08008364 <__sread>:
 8008364:	b510      	push	{r4, lr}
 8008366:	460c      	mov	r4, r1
 8008368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836c:	f000 f8a8 	bl	80084c0 <_read_r>
 8008370:	2800      	cmp	r0, #0
 8008372:	bfab      	itete	ge
 8008374:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008376:	89a3      	ldrhlt	r3, [r4, #12]
 8008378:	181b      	addge	r3, r3, r0
 800837a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800837e:	bfac      	ite	ge
 8008380:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008382:	81a3      	strhlt	r3, [r4, #12]
 8008384:	bd10      	pop	{r4, pc}

08008386 <__swrite>:
 8008386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800838a:	461f      	mov	r7, r3
 800838c:	898b      	ldrh	r3, [r1, #12]
 800838e:	4605      	mov	r5, r0
 8008390:	05db      	lsls	r3, r3, #23
 8008392:	460c      	mov	r4, r1
 8008394:	4616      	mov	r6, r2
 8008396:	d505      	bpl.n	80083a4 <__swrite+0x1e>
 8008398:	2302      	movs	r3, #2
 800839a:	2200      	movs	r2, #0
 800839c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a0:	f000 f87c 	bl	800849c <_lseek_r>
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	4632      	mov	r2, r6
 80083a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083ac:	81a3      	strh	r3, [r4, #12]
 80083ae:	4628      	mov	r0, r5
 80083b0:	463b      	mov	r3, r7
 80083b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ba:	f000 b8a3 	b.w	8008504 <_write_r>

080083be <__sseek>:
 80083be:	b510      	push	{r4, lr}
 80083c0:	460c      	mov	r4, r1
 80083c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c6:	f000 f869 	bl	800849c <_lseek_r>
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	bf15      	itete	ne
 80083d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80083d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80083d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80083da:	81a3      	strheq	r3, [r4, #12]
 80083dc:	bf18      	it	ne
 80083de:	81a3      	strhne	r3, [r4, #12]
 80083e0:	bd10      	pop	{r4, pc}

080083e2 <__sclose>:
 80083e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e6:	f000 b849 	b.w	800847c <_close_r>

080083ea <_realloc_r>:
 80083ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ee:	4680      	mov	r8, r0
 80083f0:	4615      	mov	r5, r2
 80083f2:	460c      	mov	r4, r1
 80083f4:	b921      	cbnz	r1, 8008400 <_realloc_r+0x16>
 80083f6:	4611      	mov	r1, r2
 80083f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083fc:	f7ff bafe 	b.w	80079fc <_malloc_r>
 8008400:	b92a      	cbnz	r2, 800840e <_realloc_r+0x24>
 8008402:	f000 f8d1 	bl	80085a8 <_free_r>
 8008406:	2400      	movs	r4, #0
 8008408:	4620      	mov	r0, r4
 800840a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800840e:	f000 f925 	bl	800865c <_malloc_usable_size_r>
 8008412:	4285      	cmp	r5, r0
 8008414:	4606      	mov	r6, r0
 8008416:	d802      	bhi.n	800841e <_realloc_r+0x34>
 8008418:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800841c:	d8f4      	bhi.n	8008408 <_realloc_r+0x1e>
 800841e:	4629      	mov	r1, r5
 8008420:	4640      	mov	r0, r8
 8008422:	f7ff faeb 	bl	80079fc <_malloc_r>
 8008426:	4607      	mov	r7, r0
 8008428:	2800      	cmp	r0, #0
 800842a:	d0ec      	beq.n	8008406 <_realloc_r+0x1c>
 800842c:	42b5      	cmp	r5, r6
 800842e:	462a      	mov	r2, r5
 8008430:	4621      	mov	r1, r4
 8008432:	bf28      	it	cs
 8008434:	4632      	movcs	r2, r6
 8008436:	f000 f877 	bl	8008528 <memcpy>
 800843a:	4621      	mov	r1, r4
 800843c:	4640      	mov	r0, r8
 800843e:	f000 f8b3 	bl	80085a8 <_free_r>
 8008442:	463c      	mov	r4, r7
 8008444:	e7e0      	b.n	8008408 <_realloc_r+0x1e>

08008446 <memmove>:
 8008446:	4288      	cmp	r0, r1
 8008448:	b510      	push	{r4, lr}
 800844a:	eb01 0402 	add.w	r4, r1, r2
 800844e:	d902      	bls.n	8008456 <memmove+0x10>
 8008450:	4284      	cmp	r4, r0
 8008452:	4623      	mov	r3, r4
 8008454:	d807      	bhi.n	8008466 <memmove+0x20>
 8008456:	1e43      	subs	r3, r0, #1
 8008458:	42a1      	cmp	r1, r4
 800845a:	d008      	beq.n	800846e <memmove+0x28>
 800845c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008460:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008464:	e7f8      	b.n	8008458 <memmove+0x12>
 8008466:	4601      	mov	r1, r0
 8008468:	4402      	add	r2, r0
 800846a:	428a      	cmp	r2, r1
 800846c:	d100      	bne.n	8008470 <memmove+0x2a>
 800846e:	bd10      	pop	{r4, pc}
 8008470:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008474:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008478:	e7f7      	b.n	800846a <memmove+0x24>
	...

0800847c <_close_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	2300      	movs	r3, #0
 8008480:	4d05      	ldr	r5, [pc, #20]	@ (8008498 <_close_r+0x1c>)
 8008482:	4604      	mov	r4, r0
 8008484:	4608      	mov	r0, r1
 8008486:	602b      	str	r3, [r5, #0]
 8008488:	f7fa fe45 	bl	8003116 <_close>
 800848c:	1c43      	adds	r3, r0, #1
 800848e:	d102      	bne.n	8008496 <_close_r+0x1a>
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	b103      	cbz	r3, 8008496 <_close_r+0x1a>
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	bd38      	pop	{r3, r4, r5, pc}
 8008498:	2000094c 	.word	0x2000094c

0800849c <_lseek_r>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4604      	mov	r4, r0
 80084a0:	4608      	mov	r0, r1
 80084a2:	4611      	mov	r1, r2
 80084a4:	2200      	movs	r2, #0
 80084a6:	4d05      	ldr	r5, [pc, #20]	@ (80084bc <_lseek_r+0x20>)
 80084a8:	602a      	str	r2, [r5, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	f7fa fe57 	bl	800315e <_lseek>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d102      	bne.n	80084ba <_lseek_r+0x1e>
 80084b4:	682b      	ldr	r3, [r5, #0]
 80084b6:	b103      	cbz	r3, 80084ba <_lseek_r+0x1e>
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	2000094c 	.word	0x2000094c

080084c0 <_read_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4604      	mov	r4, r0
 80084c4:	4608      	mov	r0, r1
 80084c6:	4611      	mov	r1, r2
 80084c8:	2200      	movs	r2, #0
 80084ca:	4d05      	ldr	r5, [pc, #20]	@ (80084e0 <_read_r+0x20>)
 80084cc:	602a      	str	r2, [r5, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	f7fa fe04 	bl	80030dc <_read>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d102      	bne.n	80084de <_read_r+0x1e>
 80084d8:	682b      	ldr	r3, [r5, #0]
 80084da:	b103      	cbz	r3, 80084de <_read_r+0x1e>
 80084dc:	6023      	str	r3, [r4, #0]
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	2000094c 	.word	0x2000094c

080084e4 <_sbrk_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	2300      	movs	r3, #0
 80084e8:	4d05      	ldr	r5, [pc, #20]	@ (8008500 <_sbrk_r+0x1c>)
 80084ea:	4604      	mov	r4, r0
 80084ec:	4608      	mov	r0, r1
 80084ee:	602b      	str	r3, [r5, #0]
 80084f0:	f7fa fe42 	bl	8003178 <_sbrk>
 80084f4:	1c43      	adds	r3, r0, #1
 80084f6:	d102      	bne.n	80084fe <_sbrk_r+0x1a>
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	b103      	cbz	r3, 80084fe <_sbrk_r+0x1a>
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	bd38      	pop	{r3, r4, r5, pc}
 8008500:	2000094c 	.word	0x2000094c

08008504 <_write_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	4604      	mov	r4, r0
 8008508:	4608      	mov	r0, r1
 800850a:	4611      	mov	r1, r2
 800850c:	2200      	movs	r2, #0
 800850e:	4d05      	ldr	r5, [pc, #20]	@ (8008524 <_write_r+0x20>)
 8008510:	602a      	str	r2, [r5, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	f7f9 ff28 	bl	8002368 <_write>
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	d102      	bne.n	8008522 <_write_r+0x1e>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	b103      	cbz	r3, 8008522 <_write_r+0x1e>
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	2000094c 	.word	0x2000094c

08008528 <memcpy>:
 8008528:	440a      	add	r2, r1
 800852a:	4291      	cmp	r1, r2
 800852c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008530:	d100      	bne.n	8008534 <memcpy+0xc>
 8008532:	4770      	bx	lr
 8008534:	b510      	push	{r4, lr}
 8008536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800853a:	4291      	cmp	r1, r2
 800853c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008540:	d1f9      	bne.n	8008536 <memcpy+0xe>
 8008542:	bd10      	pop	{r4, pc}

08008544 <__assert_func>:
 8008544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008546:	4614      	mov	r4, r2
 8008548:	461a      	mov	r2, r3
 800854a:	4b09      	ldr	r3, [pc, #36]	@ (8008570 <__assert_func+0x2c>)
 800854c:	4605      	mov	r5, r0
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68d8      	ldr	r0, [r3, #12]
 8008552:	b954      	cbnz	r4, 800856a <__assert_func+0x26>
 8008554:	4b07      	ldr	r3, [pc, #28]	@ (8008574 <__assert_func+0x30>)
 8008556:	461c      	mov	r4, r3
 8008558:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800855c:	9100      	str	r1, [sp, #0]
 800855e:	462b      	mov	r3, r5
 8008560:	4905      	ldr	r1, [pc, #20]	@ (8008578 <__assert_func+0x34>)
 8008562:	f000 f883 	bl	800866c <fiprintf>
 8008566:	f000 f8a0 	bl	80086aa <abort>
 800856a:	4b04      	ldr	r3, [pc, #16]	@ (800857c <__assert_func+0x38>)
 800856c:	e7f4      	b.n	8008558 <__assert_func+0x14>
 800856e:	bf00      	nop
 8008570:	20000028 	.word	0x20000028
 8008574:	0800a976 	.word	0x0800a976
 8008578:	0800a948 	.word	0x0800a948
 800857c:	0800a93b 	.word	0x0800a93b

08008580 <_calloc_r>:
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	fba1 5402 	umull	r5, r4, r1, r2
 8008586:	b93c      	cbnz	r4, 8008598 <_calloc_r+0x18>
 8008588:	4629      	mov	r1, r5
 800858a:	f7ff fa37 	bl	80079fc <_malloc_r>
 800858e:	4606      	mov	r6, r0
 8008590:	b928      	cbnz	r0, 800859e <_calloc_r+0x1e>
 8008592:	2600      	movs	r6, #0
 8008594:	4630      	mov	r0, r6
 8008596:	bd70      	pop	{r4, r5, r6, pc}
 8008598:	220c      	movs	r2, #12
 800859a:	6002      	str	r2, [r0, #0]
 800859c:	e7f9      	b.n	8008592 <_calloc_r+0x12>
 800859e:	462a      	mov	r2, r5
 80085a0:	4621      	mov	r1, r4
 80085a2:	f7fe fa11 	bl	80069c8 <memset>
 80085a6:	e7f5      	b.n	8008594 <_calloc_r+0x14>

080085a8 <_free_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4605      	mov	r5, r0
 80085ac:	2900      	cmp	r1, #0
 80085ae:	d040      	beq.n	8008632 <_free_r+0x8a>
 80085b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085b4:	1f0c      	subs	r4, r1, #4
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	bfb8      	it	lt
 80085ba:	18e4      	addlt	r4, r4, r3
 80085bc:	f7ff fb46 	bl	8007c4c <__malloc_lock>
 80085c0:	4a1c      	ldr	r2, [pc, #112]	@ (8008634 <_free_r+0x8c>)
 80085c2:	6813      	ldr	r3, [r2, #0]
 80085c4:	b933      	cbnz	r3, 80085d4 <_free_r+0x2c>
 80085c6:	6063      	str	r3, [r4, #4]
 80085c8:	6014      	str	r4, [r2, #0]
 80085ca:	4628      	mov	r0, r5
 80085cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085d0:	f7ff bb42 	b.w	8007c58 <__malloc_unlock>
 80085d4:	42a3      	cmp	r3, r4
 80085d6:	d908      	bls.n	80085ea <_free_r+0x42>
 80085d8:	6820      	ldr	r0, [r4, #0]
 80085da:	1821      	adds	r1, r4, r0
 80085dc:	428b      	cmp	r3, r1
 80085de:	bf01      	itttt	eq
 80085e0:	6819      	ldreq	r1, [r3, #0]
 80085e2:	685b      	ldreq	r3, [r3, #4]
 80085e4:	1809      	addeq	r1, r1, r0
 80085e6:	6021      	streq	r1, [r4, #0]
 80085e8:	e7ed      	b.n	80085c6 <_free_r+0x1e>
 80085ea:	461a      	mov	r2, r3
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	b10b      	cbz	r3, 80085f4 <_free_r+0x4c>
 80085f0:	42a3      	cmp	r3, r4
 80085f2:	d9fa      	bls.n	80085ea <_free_r+0x42>
 80085f4:	6811      	ldr	r1, [r2, #0]
 80085f6:	1850      	adds	r0, r2, r1
 80085f8:	42a0      	cmp	r0, r4
 80085fa:	d10b      	bne.n	8008614 <_free_r+0x6c>
 80085fc:	6820      	ldr	r0, [r4, #0]
 80085fe:	4401      	add	r1, r0
 8008600:	1850      	adds	r0, r2, r1
 8008602:	4283      	cmp	r3, r0
 8008604:	6011      	str	r1, [r2, #0]
 8008606:	d1e0      	bne.n	80085ca <_free_r+0x22>
 8008608:	6818      	ldr	r0, [r3, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	4408      	add	r0, r1
 800860e:	6010      	str	r0, [r2, #0]
 8008610:	6053      	str	r3, [r2, #4]
 8008612:	e7da      	b.n	80085ca <_free_r+0x22>
 8008614:	d902      	bls.n	800861c <_free_r+0x74>
 8008616:	230c      	movs	r3, #12
 8008618:	602b      	str	r3, [r5, #0]
 800861a:	e7d6      	b.n	80085ca <_free_r+0x22>
 800861c:	6820      	ldr	r0, [r4, #0]
 800861e:	1821      	adds	r1, r4, r0
 8008620:	428b      	cmp	r3, r1
 8008622:	bf01      	itttt	eq
 8008624:	6819      	ldreq	r1, [r3, #0]
 8008626:	685b      	ldreq	r3, [r3, #4]
 8008628:	1809      	addeq	r1, r1, r0
 800862a:	6021      	streq	r1, [r4, #0]
 800862c:	6063      	str	r3, [r4, #4]
 800862e:	6054      	str	r4, [r2, #4]
 8008630:	e7cb      	b.n	80085ca <_free_r+0x22>
 8008632:	bd38      	pop	{r3, r4, r5, pc}
 8008634:	20000948 	.word	0x20000948

08008638 <__ascii_mbtowc>:
 8008638:	b082      	sub	sp, #8
 800863a:	b901      	cbnz	r1, 800863e <__ascii_mbtowc+0x6>
 800863c:	a901      	add	r1, sp, #4
 800863e:	b142      	cbz	r2, 8008652 <__ascii_mbtowc+0x1a>
 8008640:	b14b      	cbz	r3, 8008656 <__ascii_mbtowc+0x1e>
 8008642:	7813      	ldrb	r3, [r2, #0]
 8008644:	600b      	str	r3, [r1, #0]
 8008646:	7812      	ldrb	r2, [r2, #0]
 8008648:	1e10      	subs	r0, r2, #0
 800864a:	bf18      	it	ne
 800864c:	2001      	movne	r0, #1
 800864e:	b002      	add	sp, #8
 8008650:	4770      	bx	lr
 8008652:	4610      	mov	r0, r2
 8008654:	e7fb      	b.n	800864e <__ascii_mbtowc+0x16>
 8008656:	f06f 0001 	mvn.w	r0, #1
 800865a:	e7f8      	b.n	800864e <__ascii_mbtowc+0x16>

0800865c <_malloc_usable_size_r>:
 800865c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008660:	1f18      	subs	r0, r3, #4
 8008662:	2b00      	cmp	r3, #0
 8008664:	bfbc      	itt	lt
 8008666:	580b      	ldrlt	r3, [r1, r0]
 8008668:	18c0      	addlt	r0, r0, r3
 800866a:	4770      	bx	lr

0800866c <fiprintf>:
 800866c:	b40e      	push	{r1, r2, r3}
 800866e:	b503      	push	{r0, r1, lr}
 8008670:	4601      	mov	r1, r0
 8008672:	ab03      	add	r3, sp, #12
 8008674:	4805      	ldr	r0, [pc, #20]	@ (800868c <fiprintf+0x20>)
 8008676:	f853 2b04 	ldr.w	r2, [r3], #4
 800867a:	6800      	ldr	r0, [r0, #0]
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	f000 f843 	bl	8008708 <_vfiprintf_r>
 8008682:	b002      	add	sp, #8
 8008684:	f85d eb04 	ldr.w	lr, [sp], #4
 8008688:	b003      	add	sp, #12
 800868a:	4770      	bx	lr
 800868c:	20000028 	.word	0x20000028

08008690 <__ascii_wctomb>:
 8008690:	4603      	mov	r3, r0
 8008692:	4608      	mov	r0, r1
 8008694:	b141      	cbz	r1, 80086a8 <__ascii_wctomb+0x18>
 8008696:	2aff      	cmp	r2, #255	@ 0xff
 8008698:	d904      	bls.n	80086a4 <__ascii_wctomb+0x14>
 800869a:	228a      	movs	r2, #138	@ 0x8a
 800869c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	4770      	bx	lr
 80086a4:	2001      	movs	r0, #1
 80086a6:	700a      	strb	r2, [r1, #0]
 80086a8:	4770      	bx	lr

080086aa <abort>:
 80086aa:	2006      	movs	r0, #6
 80086ac:	b508      	push	{r3, lr}
 80086ae:	f000 fa83 	bl	8008bb8 <raise>
 80086b2:	2001      	movs	r0, #1
 80086b4:	f7fa fd07 	bl	80030c6 <_exit>

080086b8 <__sfputc_r>:
 80086b8:	6893      	ldr	r3, [r2, #8]
 80086ba:	b410      	push	{r4}
 80086bc:	3b01      	subs	r3, #1
 80086be:	2b00      	cmp	r3, #0
 80086c0:	6093      	str	r3, [r2, #8]
 80086c2:	da07      	bge.n	80086d4 <__sfputc_r+0x1c>
 80086c4:	6994      	ldr	r4, [r2, #24]
 80086c6:	42a3      	cmp	r3, r4
 80086c8:	db01      	blt.n	80086ce <__sfputc_r+0x16>
 80086ca:	290a      	cmp	r1, #10
 80086cc:	d102      	bne.n	80086d4 <__sfputc_r+0x1c>
 80086ce:	bc10      	pop	{r4}
 80086d0:	f000 b932 	b.w	8008938 <__swbuf_r>
 80086d4:	6813      	ldr	r3, [r2, #0]
 80086d6:	1c58      	adds	r0, r3, #1
 80086d8:	6010      	str	r0, [r2, #0]
 80086da:	7019      	strb	r1, [r3, #0]
 80086dc:	4608      	mov	r0, r1
 80086de:	bc10      	pop	{r4}
 80086e0:	4770      	bx	lr

080086e2 <__sfputs_r>:
 80086e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e4:	4606      	mov	r6, r0
 80086e6:	460f      	mov	r7, r1
 80086e8:	4614      	mov	r4, r2
 80086ea:	18d5      	adds	r5, r2, r3
 80086ec:	42ac      	cmp	r4, r5
 80086ee:	d101      	bne.n	80086f4 <__sfputs_r+0x12>
 80086f0:	2000      	movs	r0, #0
 80086f2:	e007      	b.n	8008704 <__sfputs_r+0x22>
 80086f4:	463a      	mov	r2, r7
 80086f6:	4630      	mov	r0, r6
 80086f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086fc:	f7ff ffdc 	bl	80086b8 <__sfputc_r>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d1f3      	bne.n	80086ec <__sfputs_r+0xa>
 8008704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008708 <_vfiprintf_r>:
 8008708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870c:	460d      	mov	r5, r1
 800870e:	4614      	mov	r4, r2
 8008710:	4698      	mov	r8, r3
 8008712:	4606      	mov	r6, r0
 8008714:	b09d      	sub	sp, #116	@ 0x74
 8008716:	b118      	cbz	r0, 8008720 <_vfiprintf_r+0x18>
 8008718:	6a03      	ldr	r3, [r0, #32]
 800871a:	b90b      	cbnz	r3, 8008720 <_vfiprintf_r+0x18>
 800871c:	f7fe f8dc 	bl	80068d8 <__sinit>
 8008720:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008722:	07d9      	lsls	r1, r3, #31
 8008724:	d405      	bmi.n	8008732 <_vfiprintf_r+0x2a>
 8008726:	89ab      	ldrh	r3, [r5, #12]
 8008728:	059a      	lsls	r2, r3, #22
 800872a:	d402      	bmi.n	8008732 <_vfiprintf_r+0x2a>
 800872c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800872e:	f7fe f982 	bl	8006a36 <__retarget_lock_acquire_recursive>
 8008732:	89ab      	ldrh	r3, [r5, #12]
 8008734:	071b      	lsls	r3, r3, #28
 8008736:	d501      	bpl.n	800873c <_vfiprintf_r+0x34>
 8008738:	692b      	ldr	r3, [r5, #16]
 800873a:	b99b      	cbnz	r3, 8008764 <_vfiprintf_r+0x5c>
 800873c:	4629      	mov	r1, r5
 800873e:	4630      	mov	r0, r6
 8008740:	f000 f938 	bl	80089b4 <__swsetup_r>
 8008744:	b170      	cbz	r0, 8008764 <_vfiprintf_r+0x5c>
 8008746:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008748:	07dc      	lsls	r4, r3, #31
 800874a:	d504      	bpl.n	8008756 <_vfiprintf_r+0x4e>
 800874c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008750:	b01d      	add	sp, #116	@ 0x74
 8008752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008756:	89ab      	ldrh	r3, [r5, #12]
 8008758:	0598      	lsls	r0, r3, #22
 800875a:	d4f7      	bmi.n	800874c <_vfiprintf_r+0x44>
 800875c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800875e:	f7fe f96b 	bl	8006a38 <__retarget_lock_release_recursive>
 8008762:	e7f3      	b.n	800874c <_vfiprintf_r+0x44>
 8008764:	2300      	movs	r3, #0
 8008766:	9309      	str	r3, [sp, #36]	@ 0x24
 8008768:	2320      	movs	r3, #32
 800876a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800876e:	2330      	movs	r3, #48	@ 0x30
 8008770:	f04f 0901 	mov.w	r9, #1
 8008774:	f8cd 800c 	str.w	r8, [sp, #12]
 8008778:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008924 <_vfiprintf_r+0x21c>
 800877c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008780:	4623      	mov	r3, r4
 8008782:	469a      	mov	sl, r3
 8008784:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008788:	b10a      	cbz	r2, 800878e <_vfiprintf_r+0x86>
 800878a:	2a25      	cmp	r2, #37	@ 0x25
 800878c:	d1f9      	bne.n	8008782 <_vfiprintf_r+0x7a>
 800878e:	ebba 0b04 	subs.w	fp, sl, r4
 8008792:	d00b      	beq.n	80087ac <_vfiprintf_r+0xa4>
 8008794:	465b      	mov	r3, fp
 8008796:	4622      	mov	r2, r4
 8008798:	4629      	mov	r1, r5
 800879a:	4630      	mov	r0, r6
 800879c:	f7ff ffa1 	bl	80086e2 <__sfputs_r>
 80087a0:	3001      	adds	r0, #1
 80087a2:	f000 80a7 	beq.w	80088f4 <_vfiprintf_r+0x1ec>
 80087a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087a8:	445a      	add	r2, fp
 80087aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80087ac:	f89a 3000 	ldrb.w	r3, [sl]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 809f 	beq.w	80088f4 <_vfiprintf_r+0x1ec>
 80087b6:	2300      	movs	r3, #0
 80087b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80087bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087c0:	f10a 0a01 	add.w	sl, sl, #1
 80087c4:	9304      	str	r3, [sp, #16]
 80087c6:	9307      	str	r3, [sp, #28]
 80087c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80087ce:	4654      	mov	r4, sl
 80087d0:	2205      	movs	r2, #5
 80087d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d6:	4853      	ldr	r0, [pc, #332]	@ (8008924 <_vfiprintf_r+0x21c>)
 80087d8:	f7fe f92f 	bl	8006a3a <memchr>
 80087dc:	9a04      	ldr	r2, [sp, #16]
 80087de:	b9d8      	cbnz	r0, 8008818 <_vfiprintf_r+0x110>
 80087e0:	06d1      	lsls	r1, r2, #27
 80087e2:	bf44      	itt	mi
 80087e4:	2320      	movmi	r3, #32
 80087e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087ea:	0713      	lsls	r3, r2, #28
 80087ec:	bf44      	itt	mi
 80087ee:	232b      	movmi	r3, #43	@ 0x2b
 80087f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087f4:	f89a 3000 	ldrb.w	r3, [sl]
 80087f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80087fa:	d015      	beq.n	8008828 <_vfiprintf_r+0x120>
 80087fc:	4654      	mov	r4, sl
 80087fe:	2000      	movs	r0, #0
 8008800:	f04f 0c0a 	mov.w	ip, #10
 8008804:	9a07      	ldr	r2, [sp, #28]
 8008806:	4621      	mov	r1, r4
 8008808:	f811 3b01 	ldrb.w	r3, [r1], #1
 800880c:	3b30      	subs	r3, #48	@ 0x30
 800880e:	2b09      	cmp	r3, #9
 8008810:	d94b      	bls.n	80088aa <_vfiprintf_r+0x1a2>
 8008812:	b1b0      	cbz	r0, 8008842 <_vfiprintf_r+0x13a>
 8008814:	9207      	str	r2, [sp, #28]
 8008816:	e014      	b.n	8008842 <_vfiprintf_r+0x13a>
 8008818:	eba0 0308 	sub.w	r3, r0, r8
 800881c:	fa09 f303 	lsl.w	r3, r9, r3
 8008820:	4313      	orrs	r3, r2
 8008822:	46a2      	mov	sl, r4
 8008824:	9304      	str	r3, [sp, #16]
 8008826:	e7d2      	b.n	80087ce <_vfiprintf_r+0xc6>
 8008828:	9b03      	ldr	r3, [sp, #12]
 800882a:	1d19      	adds	r1, r3, #4
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	9103      	str	r1, [sp, #12]
 8008830:	2b00      	cmp	r3, #0
 8008832:	bfbb      	ittet	lt
 8008834:	425b      	neglt	r3, r3
 8008836:	f042 0202 	orrlt.w	r2, r2, #2
 800883a:	9307      	strge	r3, [sp, #28]
 800883c:	9307      	strlt	r3, [sp, #28]
 800883e:	bfb8      	it	lt
 8008840:	9204      	strlt	r2, [sp, #16]
 8008842:	7823      	ldrb	r3, [r4, #0]
 8008844:	2b2e      	cmp	r3, #46	@ 0x2e
 8008846:	d10a      	bne.n	800885e <_vfiprintf_r+0x156>
 8008848:	7863      	ldrb	r3, [r4, #1]
 800884a:	2b2a      	cmp	r3, #42	@ 0x2a
 800884c:	d132      	bne.n	80088b4 <_vfiprintf_r+0x1ac>
 800884e:	9b03      	ldr	r3, [sp, #12]
 8008850:	3402      	adds	r4, #2
 8008852:	1d1a      	adds	r2, r3, #4
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	9203      	str	r2, [sp, #12]
 8008858:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800885c:	9305      	str	r3, [sp, #20]
 800885e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008928 <_vfiprintf_r+0x220>
 8008862:	2203      	movs	r2, #3
 8008864:	4650      	mov	r0, sl
 8008866:	7821      	ldrb	r1, [r4, #0]
 8008868:	f7fe f8e7 	bl	8006a3a <memchr>
 800886c:	b138      	cbz	r0, 800887e <_vfiprintf_r+0x176>
 800886e:	2240      	movs	r2, #64	@ 0x40
 8008870:	9b04      	ldr	r3, [sp, #16]
 8008872:	eba0 000a 	sub.w	r0, r0, sl
 8008876:	4082      	lsls	r2, r0
 8008878:	4313      	orrs	r3, r2
 800887a:	3401      	adds	r4, #1
 800887c:	9304      	str	r3, [sp, #16]
 800887e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008882:	2206      	movs	r2, #6
 8008884:	4829      	ldr	r0, [pc, #164]	@ (800892c <_vfiprintf_r+0x224>)
 8008886:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800888a:	f7fe f8d6 	bl	8006a3a <memchr>
 800888e:	2800      	cmp	r0, #0
 8008890:	d03f      	beq.n	8008912 <_vfiprintf_r+0x20a>
 8008892:	4b27      	ldr	r3, [pc, #156]	@ (8008930 <_vfiprintf_r+0x228>)
 8008894:	bb1b      	cbnz	r3, 80088de <_vfiprintf_r+0x1d6>
 8008896:	9b03      	ldr	r3, [sp, #12]
 8008898:	3307      	adds	r3, #7
 800889a:	f023 0307 	bic.w	r3, r3, #7
 800889e:	3308      	adds	r3, #8
 80088a0:	9303      	str	r3, [sp, #12]
 80088a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a4:	443b      	add	r3, r7
 80088a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80088a8:	e76a      	b.n	8008780 <_vfiprintf_r+0x78>
 80088aa:	460c      	mov	r4, r1
 80088ac:	2001      	movs	r0, #1
 80088ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80088b2:	e7a8      	b.n	8008806 <_vfiprintf_r+0xfe>
 80088b4:	2300      	movs	r3, #0
 80088b6:	f04f 0c0a 	mov.w	ip, #10
 80088ba:	4619      	mov	r1, r3
 80088bc:	3401      	adds	r4, #1
 80088be:	9305      	str	r3, [sp, #20]
 80088c0:	4620      	mov	r0, r4
 80088c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088c6:	3a30      	subs	r2, #48	@ 0x30
 80088c8:	2a09      	cmp	r2, #9
 80088ca:	d903      	bls.n	80088d4 <_vfiprintf_r+0x1cc>
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0c6      	beq.n	800885e <_vfiprintf_r+0x156>
 80088d0:	9105      	str	r1, [sp, #20]
 80088d2:	e7c4      	b.n	800885e <_vfiprintf_r+0x156>
 80088d4:	4604      	mov	r4, r0
 80088d6:	2301      	movs	r3, #1
 80088d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80088dc:	e7f0      	b.n	80088c0 <_vfiprintf_r+0x1b8>
 80088de:	ab03      	add	r3, sp, #12
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	462a      	mov	r2, r5
 80088e4:	4630      	mov	r0, r6
 80088e6:	4b13      	ldr	r3, [pc, #76]	@ (8008934 <_vfiprintf_r+0x22c>)
 80088e8:	a904      	add	r1, sp, #16
 80088ea:	f7fd fb8b 	bl	8006004 <_printf_float>
 80088ee:	4607      	mov	r7, r0
 80088f0:	1c78      	adds	r0, r7, #1
 80088f2:	d1d6      	bne.n	80088a2 <_vfiprintf_r+0x19a>
 80088f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088f6:	07d9      	lsls	r1, r3, #31
 80088f8:	d405      	bmi.n	8008906 <_vfiprintf_r+0x1fe>
 80088fa:	89ab      	ldrh	r3, [r5, #12]
 80088fc:	059a      	lsls	r2, r3, #22
 80088fe:	d402      	bmi.n	8008906 <_vfiprintf_r+0x1fe>
 8008900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008902:	f7fe f899 	bl	8006a38 <__retarget_lock_release_recursive>
 8008906:	89ab      	ldrh	r3, [r5, #12]
 8008908:	065b      	lsls	r3, r3, #25
 800890a:	f53f af1f 	bmi.w	800874c <_vfiprintf_r+0x44>
 800890e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008910:	e71e      	b.n	8008750 <_vfiprintf_r+0x48>
 8008912:	ab03      	add	r3, sp, #12
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	462a      	mov	r2, r5
 8008918:	4630      	mov	r0, r6
 800891a:	4b06      	ldr	r3, [pc, #24]	@ (8008934 <_vfiprintf_r+0x22c>)
 800891c:	a904      	add	r1, sp, #16
 800891e:	f7fd fe0f 	bl	8006540 <_printf_i>
 8008922:	e7e4      	b.n	80088ee <_vfiprintf_r+0x1e6>
 8008924:	0800a6c4 	.word	0x0800a6c4
 8008928:	0800a6ca 	.word	0x0800a6ca
 800892c:	0800a6ce 	.word	0x0800a6ce
 8008930:	08006005 	.word	0x08006005
 8008934:	080086e3 	.word	0x080086e3

08008938 <__swbuf_r>:
 8008938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800893a:	460e      	mov	r6, r1
 800893c:	4614      	mov	r4, r2
 800893e:	4605      	mov	r5, r0
 8008940:	b118      	cbz	r0, 800894a <__swbuf_r+0x12>
 8008942:	6a03      	ldr	r3, [r0, #32]
 8008944:	b90b      	cbnz	r3, 800894a <__swbuf_r+0x12>
 8008946:	f7fd ffc7 	bl	80068d8 <__sinit>
 800894a:	69a3      	ldr	r3, [r4, #24]
 800894c:	60a3      	str	r3, [r4, #8]
 800894e:	89a3      	ldrh	r3, [r4, #12]
 8008950:	071a      	lsls	r2, r3, #28
 8008952:	d501      	bpl.n	8008958 <__swbuf_r+0x20>
 8008954:	6923      	ldr	r3, [r4, #16]
 8008956:	b943      	cbnz	r3, 800896a <__swbuf_r+0x32>
 8008958:	4621      	mov	r1, r4
 800895a:	4628      	mov	r0, r5
 800895c:	f000 f82a 	bl	80089b4 <__swsetup_r>
 8008960:	b118      	cbz	r0, 800896a <__swbuf_r+0x32>
 8008962:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008966:	4638      	mov	r0, r7
 8008968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	6922      	ldr	r2, [r4, #16]
 800896e:	b2f6      	uxtb	r6, r6
 8008970:	1a98      	subs	r0, r3, r2
 8008972:	6963      	ldr	r3, [r4, #20]
 8008974:	4637      	mov	r7, r6
 8008976:	4283      	cmp	r3, r0
 8008978:	dc05      	bgt.n	8008986 <__swbuf_r+0x4e>
 800897a:	4621      	mov	r1, r4
 800897c:	4628      	mov	r0, r5
 800897e:	f7ff f93d 	bl	8007bfc <_fflush_r>
 8008982:	2800      	cmp	r0, #0
 8008984:	d1ed      	bne.n	8008962 <__swbuf_r+0x2a>
 8008986:	68a3      	ldr	r3, [r4, #8]
 8008988:	3b01      	subs	r3, #1
 800898a:	60a3      	str	r3, [r4, #8]
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	1c5a      	adds	r2, r3, #1
 8008990:	6022      	str	r2, [r4, #0]
 8008992:	701e      	strb	r6, [r3, #0]
 8008994:	6962      	ldr	r2, [r4, #20]
 8008996:	1c43      	adds	r3, r0, #1
 8008998:	429a      	cmp	r2, r3
 800899a:	d004      	beq.n	80089a6 <__swbuf_r+0x6e>
 800899c:	89a3      	ldrh	r3, [r4, #12]
 800899e:	07db      	lsls	r3, r3, #31
 80089a0:	d5e1      	bpl.n	8008966 <__swbuf_r+0x2e>
 80089a2:	2e0a      	cmp	r6, #10
 80089a4:	d1df      	bne.n	8008966 <__swbuf_r+0x2e>
 80089a6:	4621      	mov	r1, r4
 80089a8:	4628      	mov	r0, r5
 80089aa:	f7ff f927 	bl	8007bfc <_fflush_r>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d0d9      	beq.n	8008966 <__swbuf_r+0x2e>
 80089b2:	e7d6      	b.n	8008962 <__swbuf_r+0x2a>

080089b4 <__swsetup_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	4b29      	ldr	r3, [pc, #164]	@ (8008a5c <__swsetup_r+0xa8>)
 80089b8:	4605      	mov	r5, r0
 80089ba:	6818      	ldr	r0, [r3, #0]
 80089bc:	460c      	mov	r4, r1
 80089be:	b118      	cbz	r0, 80089c8 <__swsetup_r+0x14>
 80089c0:	6a03      	ldr	r3, [r0, #32]
 80089c2:	b90b      	cbnz	r3, 80089c8 <__swsetup_r+0x14>
 80089c4:	f7fd ff88 	bl	80068d8 <__sinit>
 80089c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089cc:	0719      	lsls	r1, r3, #28
 80089ce:	d422      	bmi.n	8008a16 <__swsetup_r+0x62>
 80089d0:	06da      	lsls	r2, r3, #27
 80089d2:	d407      	bmi.n	80089e4 <__swsetup_r+0x30>
 80089d4:	2209      	movs	r2, #9
 80089d6:	602a      	str	r2, [r5, #0]
 80089d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089e0:	81a3      	strh	r3, [r4, #12]
 80089e2:	e033      	b.n	8008a4c <__swsetup_r+0x98>
 80089e4:	0758      	lsls	r0, r3, #29
 80089e6:	d512      	bpl.n	8008a0e <__swsetup_r+0x5a>
 80089e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089ea:	b141      	cbz	r1, 80089fe <__swsetup_r+0x4a>
 80089ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089f0:	4299      	cmp	r1, r3
 80089f2:	d002      	beq.n	80089fa <__swsetup_r+0x46>
 80089f4:	4628      	mov	r0, r5
 80089f6:	f7ff fdd7 	bl	80085a8 <_free_r>
 80089fa:	2300      	movs	r3, #0
 80089fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a04:	81a3      	strh	r3, [r4, #12]
 8008a06:	2300      	movs	r3, #0
 8008a08:	6063      	str	r3, [r4, #4]
 8008a0a:	6923      	ldr	r3, [r4, #16]
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	89a3      	ldrh	r3, [r4, #12]
 8008a10:	f043 0308 	orr.w	r3, r3, #8
 8008a14:	81a3      	strh	r3, [r4, #12]
 8008a16:	6923      	ldr	r3, [r4, #16]
 8008a18:	b94b      	cbnz	r3, 8008a2e <__swsetup_r+0x7a>
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a24:	d003      	beq.n	8008a2e <__swsetup_r+0x7a>
 8008a26:	4621      	mov	r1, r4
 8008a28:	4628      	mov	r0, r5
 8008a2a:	f000 f83e 	bl	8008aaa <__smakebuf_r>
 8008a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a32:	f013 0201 	ands.w	r2, r3, #1
 8008a36:	d00a      	beq.n	8008a4e <__swsetup_r+0x9a>
 8008a38:	2200      	movs	r2, #0
 8008a3a:	60a2      	str	r2, [r4, #8]
 8008a3c:	6962      	ldr	r2, [r4, #20]
 8008a3e:	4252      	negs	r2, r2
 8008a40:	61a2      	str	r2, [r4, #24]
 8008a42:	6922      	ldr	r2, [r4, #16]
 8008a44:	b942      	cbnz	r2, 8008a58 <__swsetup_r+0xa4>
 8008a46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a4a:	d1c5      	bne.n	80089d8 <__swsetup_r+0x24>
 8008a4c:	bd38      	pop	{r3, r4, r5, pc}
 8008a4e:	0799      	lsls	r1, r3, #30
 8008a50:	bf58      	it	pl
 8008a52:	6962      	ldrpl	r2, [r4, #20]
 8008a54:	60a2      	str	r2, [r4, #8]
 8008a56:	e7f4      	b.n	8008a42 <__swsetup_r+0x8e>
 8008a58:	2000      	movs	r0, #0
 8008a5a:	e7f7      	b.n	8008a4c <__swsetup_r+0x98>
 8008a5c:	20000028 	.word	0x20000028

08008a60 <__swhatbuf_r>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	460c      	mov	r4, r1
 8008a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a68:	4615      	mov	r5, r2
 8008a6a:	2900      	cmp	r1, #0
 8008a6c:	461e      	mov	r6, r3
 8008a6e:	b096      	sub	sp, #88	@ 0x58
 8008a70:	da0c      	bge.n	8008a8c <__swhatbuf_r+0x2c>
 8008a72:	89a3      	ldrh	r3, [r4, #12]
 8008a74:	2100      	movs	r1, #0
 8008a76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a7a:	bf14      	ite	ne
 8008a7c:	2340      	movne	r3, #64	@ 0x40
 8008a7e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a82:	2000      	movs	r0, #0
 8008a84:	6031      	str	r1, [r6, #0]
 8008a86:	602b      	str	r3, [r5, #0]
 8008a88:	b016      	add	sp, #88	@ 0x58
 8008a8a:	bd70      	pop	{r4, r5, r6, pc}
 8008a8c:	466a      	mov	r2, sp
 8008a8e:	f000 f849 	bl	8008b24 <_fstat_r>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	dbed      	blt.n	8008a72 <__swhatbuf_r+0x12>
 8008a96:	9901      	ldr	r1, [sp, #4]
 8008a98:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a9c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008aa0:	4259      	negs	r1, r3
 8008aa2:	4159      	adcs	r1, r3
 8008aa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008aa8:	e7eb      	b.n	8008a82 <__swhatbuf_r+0x22>

08008aaa <__smakebuf_r>:
 8008aaa:	898b      	ldrh	r3, [r1, #12]
 8008aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008aae:	079d      	lsls	r5, r3, #30
 8008ab0:	4606      	mov	r6, r0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	d507      	bpl.n	8008ac6 <__smakebuf_r+0x1c>
 8008ab6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008aba:	6023      	str	r3, [r4, #0]
 8008abc:	6123      	str	r3, [r4, #16]
 8008abe:	2301      	movs	r3, #1
 8008ac0:	6163      	str	r3, [r4, #20]
 8008ac2:	b003      	add	sp, #12
 8008ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ac6:	466a      	mov	r2, sp
 8008ac8:	ab01      	add	r3, sp, #4
 8008aca:	f7ff ffc9 	bl	8008a60 <__swhatbuf_r>
 8008ace:	9f00      	ldr	r7, [sp, #0]
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	4639      	mov	r1, r7
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f7fe ff91 	bl	80079fc <_malloc_r>
 8008ada:	b948      	cbnz	r0, 8008af0 <__smakebuf_r+0x46>
 8008adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae0:	059a      	lsls	r2, r3, #22
 8008ae2:	d4ee      	bmi.n	8008ac2 <__smakebuf_r+0x18>
 8008ae4:	f023 0303 	bic.w	r3, r3, #3
 8008ae8:	f043 0302 	orr.w	r3, r3, #2
 8008aec:	81a3      	strh	r3, [r4, #12]
 8008aee:	e7e2      	b.n	8008ab6 <__smakebuf_r+0xc>
 8008af0:	89a3      	ldrh	r3, [r4, #12]
 8008af2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008afa:	81a3      	strh	r3, [r4, #12]
 8008afc:	9b01      	ldr	r3, [sp, #4]
 8008afe:	6020      	str	r0, [r4, #0]
 8008b00:	b15b      	cbz	r3, 8008b1a <__smakebuf_r+0x70>
 8008b02:	4630      	mov	r0, r6
 8008b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b08:	f000 f81e 	bl	8008b48 <_isatty_r>
 8008b0c:	b128      	cbz	r0, 8008b1a <__smakebuf_r+0x70>
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	f023 0303 	bic.w	r3, r3, #3
 8008b14:	f043 0301 	orr.w	r3, r3, #1
 8008b18:	81a3      	strh	r3, [r4, #12]
 8008b1a:	89a3      	ldrh	r3, [r4, #12]
 8008b1c:	431d      	orrs	r5, r3
 8008b1e:	81a5      	strh	r5, [r4, #12]
 8008b20:	e7cf      	b.n	8008ac2 <__smakebuf_r+0x18>
	...

08008b24 <_fstat_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	2300      	movs	r3, #0
 8008b28:	4d06      	ldr	r5, [pc, #24]	@ (8008b44 <_fstat_r+0x20>)
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	4608      	mov	r0, r1
 8008b2e:	4611      	mov	r1, r2
 8008b30:	602b      	str	r3, [r5, #0]
 8008b32:	f7fa fafb 	bl	800312c <_fstat>
 8008b36:	1c43      	adds	r3, r0, #1
 8008b38:	d102      	bne.n	8008b40 <_fstat_r+0x1c>
 8008b3a:	682b      	ldr	r3, [r5, #0]
 8008b3c:	b103      	cbz	r3, 8008b40 <_fstat_r+0x1c>
 8008b3e:	6023      	str	r3, [r4, #0]
 8008b40:	bd38      	pop	{r3, r4, r5, pc}
 8008b42:	bf00      	nop
 8008b44:	2000094c 	.word	0x2000094c

08008b48 <_isatty_r>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	4d05      	ldr	r5, [pc, #20]	@ (8008b64 <_isatty_r+0x1c>)
 8008b4e:	4604      	mov	r4, r0
 8008b50:	4608      	mov	r0, r1
 8008b52:	602b      	str	r3, [r5, #0]
 8008b54:	f7fa faf9 	bl	800314a <_isatty>
 8008b58:	1c43      	adds	r3, r0, #1
 8008b5a:	d102      	bne.n	8008b62 <_isatty_r+0x1a>
 8008b5c:	682b      	ldr	r3, [r5, #0]
 8008b5e:	b103      	cbz	r3, 8008b62 <_isatty_r+0x1a>
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	bd38      	pop	{r3, r4, r5, pc}
 8008b64:	2000094c 	.word	0x2000094c

08008b68 <_raise_r>:
 8008b68:	291f      	cmp	r1, #31
 8008b6a:	b538      	push	{r3, r4, r5, lr}
 8008b6c:	4605      	mov	r5, r0
 8008b6e:	460c      	mov	r4, r1
 8008b70:	d904      	bls.n	8008b7c <_raise_r+0x14>
 8008b72:	2316      	movs	r3, #22
 8008b74:	6003      	str	r3, [r0, #0]
 8008b76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}
 8008b7c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b7e:	b112      	cbz	r2, 8008b86 <_raise_r+0x1e>
 8008b80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b84:	b94b      	cbnz	r3, 8008b9a <_raise_r+0x32>
 8008b86:	4628      	mov	r0, r5
 8008b88:	f000 f830 	bl	8008bec <_getpid_r>
 8008b8c:	4622      	mov	r2, r4
 8008b8e:	4601      	mov	r1, r0
 8008b90:	4628      	mov	r0, r5
 8008b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b96:	f000 b817 	b.w	8008bc8 <_kill_r>
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d00a      	beq.n	8008bb4 <_raise_r+0x4c>
 8008b9e:	1c59      	adds	r1, r3, #1
 8008ba0:	d103      	bne.n	8008baa <_raise_r+0x42>
 8008ba2:	2316      	movs	r3, #22
 8008ba4:	6003      	str	r3, [r0, #0]
 8008ba6:	2001      	movs	r0, #1
 8008ba8:	e7e7      	b.n	8008b7a <_raise_r+0x12>
 8008baa:	2100      	movs	r1, #0
 8008bac:	4620      	mov	r0, r4
 8008bae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008bb2:	4798      	blx	r3
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	e7e0      	b.n	8008b7a <_raise_r+0x12>

08008bb8 <raise>:
 8008bb8:	4b02      	ldr	r3, [pc, #8]	@ (8008bc4 <raise+0xc>)
 8008bba:	4601      	mov	r1, r0
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	f7ff bfd3 	b.w	8008b68 <_raise_r>
 8008bc2:	bf00      	nop
 8008bc4:	20000028 	.word	0x20000028

08008bc8 <_kill_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	2300      	movs	r3, #0
 8008bcc:	4d06      	ldr	r5, [pc, #24]	@ (8008be8 <_kill_r+0x20>)
 8008bce:	4604      	mov	r4, r0
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	602b      	str	r3, [r5, #0]
 8008bd6:	f7fa fa66 	bl	80030a6 <_kill>
 8008bda:	1c43      	adds	r3, r0, #1
 8008bdc:	d102      	bne.n	8008be4 <_kill_r+0x1c>
 8008bde:	682b      	ldr	r3, [r5, #0]
 8008be0:	b103      	cbz	r3, 8008be4 <_kill_r+0x1c>
 8008be2:	6023      	str	r3, [r4, #0]
 8008be4:	bd38      	pop	{r3, r4, r5, pc}
 8008be6:	bf00      	nop
 8008be8:	2000094c 	.word	0x2000094c

08008bec <_getpid_r>:
 8008bec:	f7fa ba54 	b.w	8003098 <_getpid>

08008bf0 <_init>:
 8008bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf2:	bf00      	nop
 8008bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bf6:	bc08      	pop	{r3}
 8008bf8:	469e      	mov	lr, r3
 8008bfa:	4770      	bx	lr

08008bfc <_fini>:
 8008bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfe:	bf00      	nop
 8008c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c02:	bc08      	pop	{r3}
 8008c04:	469e      	mov	lr, r3
 8008c06:	4770      	bx	lr
